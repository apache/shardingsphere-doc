<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规则配置 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/</link>
    <description>Recent content in 规则配置 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding/</guid>
      <description>背景信息 数据分片 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包就能够集成各种类型的业务系统。
参数解释 配置入口 类名称：org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;ShardingTableRuleConfiguration&amp;gt; 分片表规则列表 -   autoTables (+) Collection&amp;lt;ShardingAutoTableRuleConfiguration&amp;gt; 自动分片表规则列表 -   bindingTableGroups (*) Collection&amp;lt;String&amp;gt; 绑定表规则列表 无   broadcastTables (*) Collection&amp;lt;String&amp;gt; 广播表规则列表 无   defaultDatabaseShardingStrategy (?) ShardingStrategyConfiguration 默认分库策略 不分片   defaultTableShardingStrategy (?) ShardingStrategyConfiguration 默认分表策略 不分片   defaultKeyGenerateStrategy (?</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/</guid>
      <description>背景信息 Java API 形式配置的读写分离可以方便的适用于各种场景，不依赖额外的 jar 包，用户只需要通过 java 代码构造读写分离数据源便可以使用读写分离功能。
参数解释 配置入口 类名称：org.apache.shardingsphere.readwritesplitting.api.ReadwriteSplittingRuleConfiguration
可配置属性：
   名称 数据类型 说明     dataSources (+) Collection&amp;lt;ReadwriteSplittingDataSourceRuleConfiguration&amp;gt; 读写数据源配置   loadBalancers (*) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 从库负载均衡算法配置    主从数据源配置 类名称：org.apache.shardingsphere.readwritesplitting.api.rule.ReadwriteSplittingDataSourceRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     name String 读写分离数据源名称 -   staticStrategy StaticReadwriteSplittingStrategyConfiguration 静态读写分离配置 -   dynamicStrategy DynamicReadwriteSplittingStrategyConfiguration 动态读写分离配置 -   loadBalancerName (?) String 读库负载均衡算法名称 轮询负载均衡算法    类名称：org.</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/transaction/</guid>
      <description>配置入口 org.apache.shardingsphere.transaction.config.TransactionRuleConfiguration
可配置属性：
   名称 数据类型 说明     defaultType String 默认事务类型   providerType (?) String 事务提供者类型   props (?) Properties 事务属性配置    </description>
    </item>
    
    <item>
      <title>高可用</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/ha/</guid>
      <description>背景信息 通过 Java API 方式构建高可用规则配置。
参数解释 配置入口 类名称：org.apache.shardingsphere.dbdiscovery.api.config.DatabaseDiscoveryRuleConfiguration 可配置属性：
   名称 数据类型 说明     dataSources (+) Collection&amp;lt;DatabaseDiscoveryDataSourceRuleConfiguration&amp;gt; 数据源配置   discoveryHeartbeats (+) Map&amp;lt;String, DatabaseDiscoveryHeartBeatConfiguration&amp;gt; 监听心跳配置   discoveryTypes (+) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 数据库发现类型配置    数据源配置 类名称：org.apache.shardingsphere.dbdiscovery.api.config.rule.DatabaseDiscoveryDataSourceRuleConfiguration
可配置属性：
   名称 数据类型 说明     groupName (+) String 数据库发现组名称   dataSourceNames (+) Collection&amp;lt;String&amp;gt; 数据源名称，多个数据源用逗号分隔 如：ds_0, ds_1   discoveryHeartbeatName (+) String 监听心跳名称   discoveryTypeName (+) String 数据库发现类型名称    监听心跳配置 类名称：org.</description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/encrypt/</guid>
      <description>背景信息 数据加密 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包 就能够集成各种类型的业务系统。
参数解释 配置入口 类名称：org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;EncryptTableRuleConfiguration&amp;gt; 加密表规则配置    encryptors (+) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 加解密算法名称和配置    queryWithCipherColumn (?) boolean 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 true    加密表规则配置 类名称：org.apache.shardingsphere.encrypt.api.config.rule.EncryptTableRuleConfiguration
可配置属性：
   名称 数据类型 说明     name String 表名称   columns (+) Collection&amp;lt;EncryptColumnRuleConfiguration&amp;gt; 加密列规则配置列表   queryWithCipherColumn (?</description>
    </item>
    
    <item>
      <title>影子库</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/</guid>
      <description>背景信息 如果您只想使用 Java API 方式配置使用 ShardingSphere 影子库功能请参考以下配置。
参数解释 配置入口 类名称：org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
可配置属性：
   名称 数据类型 说明     dataSources Map&amp;lt;String, ShadowDataSourceConfiguration&amp;gt; 影子数据源映射名称和配置   tables Map&amp;lt;String, ShadowTableConfiguration&amp;gt; 影子表名称和配置   shadowAlgorithms Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 影子算法名称和配置   defaultShadowAlgorithmName String 默认影子算法名称    影子数据源配置 类名称：org.apache.shardingsphere.shadow.api.config.datasource.ShadowDataSourceConfiguration
可配置属性：
   名称 数据类型 说明     productionDataSourceName String 生产数据源名称   shadowDataSourceName String 影子数据源名称    影子表配置 类名称：org.</description>
    </item>
    
    <item>
      <title>SQL 解析</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/</guid>
      <description>背景信息 SQL 是使用者与数据库交流的标准语言。 SQL 解析引擎负责将 SQL 字符串解析为抽象语法树，供 Apache ShardingSphere 理解并实现其增量功能。 目前支持 MySQL, PostgreSQL, SQLServer, Oracle, openGauss 以及符合 SQL92 规范的 SQL 方言。 由于 SQL 语法的复杂性，目前仍然存在少量不支持的 SQL。 通过 Java API 形式使用 SQL 解析，可以方便得集成进入各种系统，灵活定制用户需求。
参数解释 类名称：org.apache.shardingsphere.parser.config.SQLParserRuleConfiguration
可配置属性：
   名称 数据类型 说明     sqlCommentParseEnabled (?) boolean 是否解析 SQL 注释   parseTreeCache (?) CacheOption 解析语法树本地缓存配置   sqlStatementCache (?) CacheOption SQL 语句本地缓存配置    本地缓存配置 类名称：org.apache.shardingsphere.sql.parser.api.CacheOption
可配置属性：
   名称 数据类型 说明 默认值     initialCapacity int 本地缓存初始容量 语法树本地缓存默认值 128，SQL 语句缓存默认值 2000   maximumSize long 本地缓存最大容量 语法树本地缓存默认值 1024，SQL 语句缓存默认值 65535    操作步骤  设置本地缓存配置 设置解析配置 使用解析引擎解析 SQL  配置示例 CacheOption cacheOption = new CacheOption(128, 1024L); SQLParserEngine parserEngine = new SQLParserEngine(&amp;#34;MySQL&amp;#34;, cacheOption); ParseASTNode parseASTNode = parserEngine.</description>
    </item>
    
    <item>
      <title>SQL 翻译</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-translator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-translator/</guid>
      <description>配置入口 类名称：org.apache.shardingsphere.sqltranslator.api.config.SQLTranslatorRuleConfiguration
可配置属性：
   名称 数据类型 说明     type String SQL 翻译器类型   useOriginalSQLWhenTranslatingFailed (?) boolean SQL 翻译失败是否使用原始 SQL 继续执行    </description>
    </item>
    
    <item>
      <title>混合规则</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/java-api/rules/mix/</guid>
      <description>背景信息 ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、高可用、数据加密等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 JAVA API 的配置示例。
配置示例 // 分片配置 private ShardingRuleConfiguration createShardingRuleConfiguration() { ShardingRuleConfiguration result = new ShardingRuleConfiguration(); result.getTables().add(getOrderTableRuleConfiguration()); result.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(&amp;#34;user_id&amp;#34;, &amp;#34;inline&amp;#34;)); result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(&amp;#34;order_id&amp;#34;, &amp;#34;standard_test_tbl&amp;#34;)); Properties props = new Properties(); props.setProperty(&amp;#34;algorithm-expression&amp;#34;, &amp;#34;demo_ds_${user_id % 2}&amp;#34;); result.getShardingAlgorithms().put(&amp;#34;inline&amp;#34;, new AlgorithmConfiguration(&amp;#34;INLINE&amp;#34;, props)); result.getShardingAlgorithms().put(&amp;#34;standard_test_tbl&amp;#34;, new AlgorithmConfiguration(&amp;#34;STANDARD_TEST_TBL&amp;#34;, new Properties())); result.getKeyGenerators().put(&amp;#34;snowflake&amp;#34;, new AlgorithmConfiguration(&amp;#34;SNOWFLAKE&amp;#34;, new Properties())); return result; } private ShardingTableRuleConfiguration getOrderTableRuleConfiguration() { ShardingTableRuleConfiguration result = new ShardingTableRuleConfiguration(&amp;#34;t_order&amp;#34;, &amp;#34;demo_ds_${0..1}.t_order_${[0, 1]}&amp;#34;); result.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration(&amp;#34;order_id&amp;#34;, &amp;#34;snowflake&amp;#34;)); return result; } // 动态读写分离配置 private static ReadwriteSplittingRuleConfiguration createReadwriteSplittingConfiguration() { ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfiguration1 = new ReadwriteSplittingDataSourceRuleConfiguration(&amp;#34;replica_ds_0&amp;#34;, new DynamicReadwriteSplittingStrategyConfiguration(&amp;#34;readwrite_ds_0&amp;#34;, true), &amp;#34;&amp;#34;); ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfiguration2 = new ReadwriteSplittingDataSourceRuleConfiguration(&amp;#34;replica_ds_1&amp;#34;, new DynamicReadwriteSplittingStrategyConfiguration(&amp;#34;readwrite_ds_1&amp;#34;, true), &amp;#34;&amp;#34;); Collection&amp;lt;ReadwriteSplittingDataSourceRuleConfiguration&amp;gt; dataSources = new LinkedList&amp;lt;&amp;gt;(); dataSources.</description>
    </item>
    
  </channel>
</rss>