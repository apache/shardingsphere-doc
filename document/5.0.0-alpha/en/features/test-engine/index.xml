<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Engine on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/</link>
    <description>Recent content in Test Engine on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/features/test-engine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Case</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/sql-case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/sql-case/</guid>
      <description>Target The code for SQL case is in module sharding-sql-test.There are two targets for this module:
 Test the wildcard replacement by unit test. Share the SQL resource in resources folder.  &amp;lt;sql-cases&amp;gt; &amp;lt;sql-case id=&amp;#34;select_constant_without_table&amp;#34; value=&amp;#34;SELECT 1 as a&amp;#34; /&amp;gt; &amp;lt;sql-case id=&amp;#34;select_with_same_table_name_and_alias&amp;#34; value=&amp;#34;SELECT t_order.* FROM t_order t_order WHERE user_id = ? AND order_id = ?&amp;#34; /&amp;gt; &amp;lt;sql-case id=&amp;#34;select_with_same_table_name_and_alias_column_with_owner&amp;#34; value=&amp;#34;SELECT t_order.order_id,t_order.user_id,status FROM t_order t_order WHERE t_order.user_id = ? AND order_id = ?</description>
    </item>
    
    <item>
      <title>Integration Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/integration-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/integration-test-engine/</guid>
      <description>Process The Parameterized in JUnit will collect all test data, and pass to test method to assert one by one. The process of handling test data is just like a leaking hourglass:
Configuration  environment type  /shardingsphere-test-suite/src/test/resources/integrate/env-jdbc-local.properties /shardingsphere-test-suite/src/test/resources/integrate/env/SQL-TYPE/dataset.xml /shardingsphere-test-suite/src/test/resources/integrate/env/SQL-TYPE/schema.xml   test case type  /shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.xml /shardingsphere-test-suite/src/test/resources/integrate/cases/SQL-TYPE/dataset/FEATURE-TYPE/*.xml   sql-case  /sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml    Environment Configuration Integration test depends on existed database environment, developer need to setup the configuration file for corresponding database to test:</description>
    </item>
    
    <item>
      <title>SQL Parse Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/parse-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/parse-test-engine/</guid>
      <description>Prepare Data Not like Integration test, SQL parse test does not need a specific database environment, just define the sql to parse, and the assert data:
SQL Data As mentioned sql-case-id in Integration testï¼Œtest-case-id could be shared in different module to test, and the file is at /sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml
Parser Assert Data The assert data is at /sharding-core/sharding-core-parse/sharding-core-parse-test/src/test/resources/sharding/SQL-TYPE/*.xml in that xml file, it could assert against the table name, token or sql condition and so on.</description>
    </item>
    
    <item>
      <title>SQL Rewrite Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/rewrite-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/rewrite-test-engine/</guid>
      <description>Target Facing logic databases and tables cannot be executed directly in actual databases. SQL rewrite is used to rewrite logic SQL into rightly executable ones in actual databases, including two parts, correctness rewrite and optimization rewrite. rewrite tests are for these targets.
Test The rewrite tests are in the test folder under sharding-core/sharding-core-rewrite . Followings are the main part for rewrite tests:
 test engine environment configuration assert data  Test engine is the entrance of rewrite tests, just like other test engines, through Junit Parameterized, read every and each data in the xml file under the target test type in test\resources, and then assert by the engine one by one</description>
    </item>
    
    <item>
      <title>Performance Test</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/performance-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/performance-test/</guid>
      <description>Target The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT &amp;amp; UPDATE &amp;amp; DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, replica query &amp;amp; encrypt &amp;amp; sharding, full route). While another set of associated operation, INSERT &amp;amp; SELECT &amp;amp; DELETE, is used to evaluate performance for replica query. To achieve the result better, these tests are performed with jmeter which based on a certain amount of data with 20 concurrent threads for 30 minutes, and one MySQL has been deployed on one machine, while the scenario of MySQL used for comparison is deployed on one machine with one instance.</description>
    </item>
    
  </channel>
</rss>