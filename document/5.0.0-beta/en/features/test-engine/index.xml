<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Engine on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/</link>
    <description>Recent content in Test Engine on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integration Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/integration-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/integration-test/</guid>
      <description>The SQL parsing unit test covers both SQL placeholder and literal dimension. Integration test can be further divided into two dimensions of strategy and JDBC; the former one includes strategies as Sharding, table Sharding, database Sharding, and replica query while the latter one includes Statement and PreparedStatement.
Therefore, one SQL can drive 5 kinds of database parsing * 2 kinds of parameter transmission modes + 5 kinds of databases * 5 kinds of Sharding strategies * 2 kinds of JDBC operation modes = 60 test cases, to enable ShardingSphere to achieve the pursuit of high quality.</description>
    </item>
    
    <item>
      <title>SQL Parser Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/parser-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/parser-test/</guid>
      <description>Prepare Data Not like Integration test, SQL parse test does not need a specific database environment, just define the sql to parse, and the assert data:
SQL Data As mentioned sql-case-id in Integration testï¼Œtest-case-id could be shared in different module to test, and the file is at shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/sql/supported/${SQL-TYPE}/*.xml
Assert Data The assert data is at shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/case/${SQL-TYPE}/*.xml in that xml file, it could assert against the table name, token or sql condition and so on.</description>
    </item>
    
    <item>
      <title>SQL Rewrite Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/rewrite-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/rewrite-test/</guid>
      <description>Target Facing logic databases and tables cannot be executed directly in actual databases. SQL rewrite is used to rewrite logic SQL into rightly executable ones in actual databases, including two parts, correctness rewrite and optimization rewrite. rewrite tests are for these targets.
Test The rewrite tests are in the test folder under sharding-core/sharding-core-rewrite . Followings are the main part for rewrite tests:
 test engine environment configuration assert data  Test engine is the entrance of rewrite tests, just like other test engines, through Junit Parameterized, read every and each data in the xml file under the target test type in test\resources, and then assert by the engine one by one</description>
    </item>
    
    <item>
      <title>Performance Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/performance-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/performance-test/</guid>
      <description>Target The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT &amp;amp; UPDATE &amp;amp; DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, replica query &amp;amp; encrypt &amp;amp; sharding, full route). While another set of associated operation, INSERT &amp;amp; SELECT &amp;amp; DELETE, is used to evaluate performance for replica query. To achieve the result better, these tests are performed with jmeter which based on a certain amount of data with 20 concurrent threads for 30 minutes, and one MySQL has been deployed on one machine, while the scenario of MySQL used for comparison is deployed on one machine with one instance.</description>
    </item>
    
    <item>
      <title>Performance Test(sysbench)</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/performance-test-sysbench/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/en/features/test-engine/performance-test-sysbench/</guid>
      <description>Environment Recommended Hardware CPU: 32 CoresRAM: 128 GBNIC: 10Gb EthernetAt least 5 machines are required:
Jenkins * 1: ${host-jenkins}Sysbench * 1: ${host-sysbench}ShardingSphere-Proxy * 1: ${host-proxy}MySQL Server * 2: ${host-mysql-1}, ${host-mysql-2}The hardware standards of Jenkins and Sysbench machines can appropriately lower.
Software Environment Jenins: The latest versionSysbench: 1.0.20ShardingSphere-Proxy: package from master branchMySQL Server: 5.7.28Test Program According to the above hardware environment, the configuration parameters are as follows, and the parameters should be adjusted according to the changes in the hardware environment.</description>
    </item>
    
  </channel>
</rss>