commit f6a4bc808737240a918f7f19a14a38e8e7b40e8f
Author: Ling Hengqian <linghengqian@outlook.com>
Date:   Sun Sep 29 14:10:45 2024 +0800

    Bump the minimum Seata Client version for Seata integration to 2.1.0 to serve nativeTest under GraalVM Native Image (#33030)

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md
index a25a5f041a9..de095368722 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.cn.md
@@ -258,46 +258,7 @@ Caused by: java.io.UnsupportedEncodingException: Codepage Cp1252 is not supporte
 ]
 ```
 
-6. 当使用 Seata 的 BASE 集成时，用户需要使用特定的 `io.seata:seata-all:1.8.0` 版本以避开对 ByteBuddy Java API 的使用，
-并排除 `io.seata:seata-all:1.8.0` 中过时的 `org.antlr:antlr4-runtime:4.8` 的 Maven 依赖。可能的配置例子如下，
-
-```xml
-<project>
-    <dependencies>
-      <dependency>
-         <groupId>org.apache.shardingsphere</groupId>
-         <artifactId>shardingsphere-jdbc</artifactId>
-         <version>${shardingsphere.version}</version>
-      </dependency>
-      <dependency>
-         <groupId>org.apache.shardingsphere</groupId>
-         <artifactId>shardingsphere-transaction-base-seata-at</artifactId>
-         <version>${shardingsphere.version}</version>
-      </dependency>
-      <dependency>
-         <groupId>io.seata</groupId>
-         <artifactId>seata-all</artifactId>
-         <version>1.8.0</version>
-         <exclusions>
-            <exclusion>
-               <groupId>org.antlr</groupId>
-               <artifactId>antlr4-runtime</artifactId>
-            </exclusion>
-            <exclusion>
-               <groupId>commons-lang</groupId>
-               <artifactId>commons-lang</artifactId>
-            </exclusion>
-            <exclusion>
-               <groupId>org.apache.commons</groupId>
-               <artifactId>commons-pool2</artifactId>
-            </exclusion>
-         </exclusions>
-      </dependency>
-    </dependencies>
-</project>
-```
-
-7. 当需要通过 ShardingSphere JDBC 使用 ClickHouse 方言时，
+6. 当需要通过 ShardingSphere JDBC 使用 ClickHouse 方言时，
 用户需要手动引入相关的可选模块和 classifier 为 `http` 的 ClickHouse JDBC 驱动。
 原则上，ShardingSphere 的 GraalVM Native Image 集成不希望使用 classifier 为 `all` 的 `com.clickhouse:clickhouse-jdbc`，
 因为 Uber Jar 会导致采集重复的 GraalVM Reachability Metadata。
@@ -482,8 +443,14 @@ CREATE TABLE IF NOT EXISTS t_order
 ) STORED BY ICEBERG STORED AS ORC TBLPROPERTIES ('format-version' = '2');
 ```
 
+由于 HiveServer2 JDBC Driver 未实现 `java.sql.DatabaseMetaData#getURL()`，
+ShardingSphere 做了模糊处理，因此用户暂时仅可通过 HikariCP 连接 HiveServer2。
+
 HiveServer2 不支持 ShardingSphere 集成级别的本地事务，XA 事务和 Seata AT 模式事务，更多讨论位于 https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions 。
 
+8. 由于 https://github.com/oracle/graal/issues/7979 的影响，
+对应 `com.oracle.database.jdbc:ojdbc8` Maven 模块的 Oracle JDBC Driver 无法在 GraalVM Native Image 下使用。
+
 ## 贡献 GraalVM Reachability Metadata
 
 ShardingSphere 对在 GraalVM Native Image 下的可用性的验证，是通过 GraalVM Native Build Tools 的 Maven Plugin 子项目来完成的。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md
index 67d1b20c470..bdd9e7dca67 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/graalvm-native-image/_index.en.md
@@ -271,48 +271,7 @@ to define the constructor of `com.mysql.cj.jdbc.MysqlXADataSource` inside the Gr
 ]
 ```
 
-6. When using Seata's BASE integration, 
-users need to use a specific `io.seata:seata-all:1.8.0` version to avoid using the ByteBuddy Java API,
-and exclude the outdated Maven dependency of `org.antlr:antlr4-runtime:4.8` in `io.seata:seata-all:1.8.0`.
-Possible configuration examples are as follows,
-
-```xml
-<project>
-    <dependencies>
-      <dependency>
-         <groupId>org.apache.shardingsphere</groupId>
-         <artifactId>shardingsphere-jdbc</artifactId>
-         <version>${shardingsphere.version}</version>
-      </dependency>
-      <dependency>
-         <groupId>org.apache.shardingsphere</groupId>
-         <artifactId>shardingsphere-transaction-base-seata-at</artifactId>
-         <version>${shardingsphere.version}</version>
-      </dependency>
-      <dependency>
-         <groupId>io.seata</groupId>
-         <artifactId>seata-all</artifactId>
-         <version>1.8.0</version>
-         <exclusions>
-            <exclusion>
-               <groupId>org.antlr</groupId>
-               <artifactId>antlr4-runtime</artifactId>
-            </exclusion>
-            <exclusion>
-               <groupId>commons-lang</groupId>
-               <artifactId>commons-lang</artifactId>
-            </exclusion>
-            <exclusion>
-               <groupId>org.apache.commons</groupId>
-               <artifactId>commons-pool2</artifactId>
-            </exclusion>
-         </exclusions>
-      </dependency>
-    </dependencies>
-</project>
-```
-
-7. When using the ClickHouse dialect through ShardingSphere JDBC, 
+6. When using the ClickHouse dialect through ShardingSphere JDBC, 
 users need to manually introduce the relevant optional modules and the ClickHouse JDBC driver with the classifier `http`.
 In principle, ShardingSphere's GraalVM Native Image integration does not want to use `com.clickhouse:clickhouse-jdbc` with classifier `all`, 
 because Uber Jar will cause the collection of duplicate GraalVM Reachability Metadata.
@@ -500,9 +459,15 @@ CREATE TABLE IF NOT EXISTS t_order
 ) STORED BY ICEBERG STORED AS ORC TBLPROPERTIES ('format-version' = '2');
 ```
 
+Since HiveServer2 JDBC Driver does not implement `java.sql.DatabaseMetaData#getURL()`, 
+ShardingSphere has done some obfuscation, so users can only connect to HiveServer2 through HikariCP for now.
+
 HiveServer2 does not support local transactions, XA transactions, and Seata AT mode transactions at the ShardingSphere integration level. 
 More discussion is available at https://cwiki.apache.org/confluence/display/Hive/Hive+Transactions .
 
+8. Due to https://github.com/oracle/graal/issues/7979 , 
+the Oracle JDBC Driver corresponding to the `com.oracle.database.jdbc:ojdbc8` Maven module cannot be used under GraalVM Native Image.
+
 ## Contribute GraalVM Reachability Metadata
 
 The verification of ShardingSphere's availability under GraalVM Native Image is completed through the Maven Plugin subproject 
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md
index a2458d8760b..ddf276a03bc 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.cn.md
@@ -9,7 +9,9 @@ Apache ShardingSphere 提供 BASE 事务，集成了 Seata 的实现。本文所
 
 ## 前提条件
 
-引入 Maven 依赖，并排除 `io.seata:seata-all` 中过时的 `org.antlr:antlr4-runtime:4.8` 的 Maven 依赖。
+ShardingSphere 的 Seata 集成仅在 `apache/incubator-seata:v2.1.0` 或更高版本可用。
+对于 `org.apache.seata:seata-all` Maven 模块对应的 Seata Client，此限制同时作用于 HotSpot VM 和 GraalVM Native Image。
+引入 Maven 依赖，并排除 `org.apache.seata:seata-all` 中过时的 `org.antlr:antlr4-runtime:4.8` 的 Maven 依赖。
 
 ```xml
 <project>
@@ -25,9 +27,9 @@ Apache ShardingSphere 提供 BASE 事务，集成了 Seata 的实现。本文所
          <version>${shardingsphere.version}</version>
       </dependency>
       <dependency>
-         <groupId>io.seata</groupId>
+         <groupId>org.apache.seata</groupId>
          <artifactId>seata-all</artifactId>
-         <version>2.0.0</version>
+         <version>2.1.0</version>
          <exclusions>
             <exclusion>
                <groupId>org.antlr</groupId>
@@ -39,6 +41,12 @@ Apache ShardingSphere 提供 BASE 事务，集成了 Seata 的实现。本文所
 </project>
 ```
 
+受 Calcite 的影响，ShardingSphere JDBC 使用的 `commons-lang:commons-lang` 和 `org.apache.commons:commons-pool2` 与 Seata Client 存在依赖冲突，
+需用户根据实际情景考虑是否需要解决依赖冲突。
+
+使用 ShardingSphere 的 Seata 集成模块时，ShardingSphere 连接的数据库实例应同时实现 ShardingSphere 的方言解析支持与 Seata AT 模式的方言解析支持。
+这类数据库包括但不限于 `mysql`，`gvenzl/oracle-free`，`gvenzl/oracle-xe`，`postgres`，`mcr.microsoft.com/mssql/server` 等 Docker Image。
+
 ## 操作步骤
 
 1. 启动 Seata Server
@@ -50,32 +58,27 @@ Apache ShardingSphere 提供 BASE 事务，集成了 Seata 的实现。本文所
 ### 启动 Seata Server
 
 按照如下任一链接的步骤，下载并启动 Seata 服务器。
-合理的启动方式应通过 Docker Hub 中的 `seataio/seata-server` 的 Docker Image 来实例化 Seata 服务器。
-对于 `apache/incubator-seata:v2.0.0` 及更早的 Seata 版本，应使用 Docker Hub 中的 `seataio/seata-server`。
-否则应使用 Docker Hub 中的 `apache/seata-server`。
+合理的启动方式应通过 Docker Hub 中的 `apache/seata-server` 的 Docker Image 来实例化 Seata 服务器。
 
-- [seata-fescar-workshop](https://github.com/seata/fescar-workshop)
-- https://hub.docker.com/r/seataio/seata-server
 - https://hub.docker.com/r/apache/seata-server
 
 ### 创建 undo_log 表
 
 在每一个 ShardingSphere 涉及的真实数据库实例中创建 `undo_log` 表。
-SQL 的内容以 https://github.com/apache/incubator-seata/tree/v2.0.0/script/client/at/db 内对应的数据库为准。
+SQL 的内容以 https://github.com/apache/incubator-seata/tree/v2.1.0/script/client/at/db 内对应的数据库为准。
 以下内容以 MySQL 为例。
 ```sql
 CREATE TABLE IF NOT EXISTS `undo_log`
 (
-    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',
-    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',
-    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',
-    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',
-    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',
-    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',
-    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',
-    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
-    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';
-
+   `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',
+   `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',
+   `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',
+   `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',
+   `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',
+   `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',
+   `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',
+   UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
+   ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';
 ALTER TABLE `undo_log` ADD INDEX `ix_log_created` (`log_created`);
 ```
 
@@ -91,7 +94,7 @@ transaction:
 ```
 
 在 classpath 的根目录中增加 `seata.conf` 文件， 
-配置文件格式参考 `io.seata.config.FileConfiguration` 的 [JavaDoc](https://github.com/apache/incubator-seata/blob/v2.0.0/config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java)。
+配置文件格式参考 `org.apache.seata.config.FileConfiguration` 的 [JavaDoc](https://github.com/apache/incubator-seata/blob/v2.1.0/config/seata-config-core/src/main/java/org/apache/seata/config/FileConfiguration.java)。
 
 `seata.conf` 存在四个属性，
 
@@ -116,8 +119,8 @@ client {
 一个最小配置的 `seata.conf` 如下。
 由 ShardingSphere 管理的 `seata.conf` 中， `client.transaction.service.group` 的默认值设置为 `default` 是出于历史原因。
 假设用户使用的 Seata Server 和 Seata Client 的 `registry.conf` 中，`registry.type` 和 `config.type` 均为 `file`，
-则对于 `registry.conf` 的 `config.file.name` 配置的 `.conf` 文件中，事务分组名在 `apache/incubator-seata:v1.5.1` 之后默认值为 `default_tx_group`，
-反之则为 `my_test_tx_group`。
+则对于 `registry.conf` 的 `config.file.name` 配置的 `.conf` 文件中，事务分组名在 `apache/incubator-seata:v1.5.1` 及之后默认值为 `default_tx_group`，
+在 `apache/incubator-seata:v1.5.1` 之前则为 `my_test_tx_group`。
 
 ```conf
 client.application.id = example
@@ -131,7 +134,7 @@ ShardingSphere 的 Seata 集成不支持隔离级别。
 
 ShardingSphere 的 Seata 集成将获取到的 Seata 全局事务置入线程的局部变量。
 而 `org.apache.seata.spring.annotation.GlobalTransactionScanner` 则是采用 Dynamic Proxy 的方式对方法进行增强。
-这意味着用户在使用 ShardingSphere 的 Seata 集成时，用户应避免使用 `io.seata:seata-all` 的 Java API，
+这意味着用户在使用 ShardingSphere 的 Seata 集成时，用户应避免使用 `org.apache.seata:seata-all` 的 Java API，
 除非用户正在混合使用 ShardingSphere 的 Seata 集成与 Seata Client 的 TCC 模式特性。
 
 针对 ShardingSphere 数据源，讨论 6 种情况，
@@ -145,13 +148,13 @@ ShardingSphere 的 Seata 集成将获取到的 Seata 全局事务置入线程的
 
 4. 在函数上使用 Spring Framework 的 `org.springframework.transaction.annotation.Transactional` 注解，这是被允许的。
 
-5. 在函数上使用 `io.seata.spring.annotation.GlobalTransactional` 注解，这是**不被允许的**。
+5. 在函数上使用 `org.apache.seata.spring.annotation.GlobalTransactional` 注解，这是**不被允许的**。
 
-6. 手动从 `io.seata.tm.api.GlobalTransactionContext ` 创建 `io.seata.tm.api.GlobalTransaction` 实例，
-调用 `io.seata.tm.api.GlobalTransaction` 实例的 `begin()`, `commit()` 和 `rollback()` 方法，这是**不被允许的**。
+6. 手动从 `org.apache.seata.tm.api.GlobalTransactionContext ` 创建 `org.apache.seata.tm.api.GlobalTransaction` 实例，
+调用 `org.apache.seata.tm.api.GlobalTransaction` 实例的 `begin()`, `commit()` 和 `rollback()` 方法，这是**不被允许的**。
 
 在使用 Spring Boot 的实际情景中，
-`com.alibaba.cloud:spring-cloud-starter-alibaba-seata` 和 `io.seata:seata-spring-boot-starter` 常常被其他 Maven 依赖传递引入。
+`com.alibaba.cloud:spring-cloud-starter-alibaba-seata` 和 `org.apache.seata:seata-spring-boot-starter` 常常被其他 Maven 依赖传递引入。
 为了避开事务冲突，用户需要在 Spring Boot 的配置文件中将 `seata.enable-auto-data-source-proxy` 的属性置为 `false`。一个可能的依赖关系如下。
 
 ```xml
@@ -168,9 +171,9 @@ ShardingSphere 的 Seata 集成将获取到的 Seata 全局事务置入线程的
          <version>${shardingsphere.version}</version>
       </dependency>
       <dependency>
-         <groupId>io.seata</groupId>
+         <groupId>org.apache.seata</groupId>
          <artifactId>seata-spring-boot-starter</artifactId>
-         <version>2.0.0</version>
+         <version>2.1.0</version>
          <exclusions>
             <exclusion>
                <groupId>org.antlr</groupId>
@@ -195,20 +198,20 @@ seata:
 
 对于设置开启 ShardingSphere 的 Seata 集成的情况下，
 在与 ShardingSphere JDBC DataSource 无关的业务函数中，如需在业务函数使用 Seata Client 的 Seata TCC 模式相关的特性，
-可实例化一个未代理的普通 TCC 接口实现类， 然后使用 `io.seata.integration.tx.api.util.ProxyUtil` 创建一个代理的TCC接口类，
+可实例化一个未代理的普通 TCC 接口实现类， 然后使用 `org.apache.seata.integration.tx.api.util.ProxyUtil` 创建一个代理的TCC接口类，
 并调用 TCC 接口实现类 `Try`，`Confirm`，`Cancel` 三个阶段对应的函数。
 
-对于由 Seata TCC 模式而引入的 `io.seata.spring.annotation.GlobalTransactional` 注解或 Seata TCC 模式涉及的业务函数中需要与数据库实例交互，
+对于由 Seata TCC 模式而引入的 `org.apache.seata.spring.annotation.GlobalTransactional` 注解或 Seata TCC 模式涉及的业务函数中需要与数据库实例交互，
 此注解标记的业务函数内不应使用 ShardingSphere JDBC DataSource，
 而是应该手动创建`javax.sql.DataSource` 实例，或从自定义的 Spring Bean 中获取 `javax.sql.DataSource` 实例。
 
 ### 跨服务调用的事务传播
 
 跨服务调用场景下的事务传播，并不像单个微服务内的事务操作一样开箱即用。
-对于 Seata Server，跨服务调用场景下的事务传播，要把 XID 通过服务调用传递到服务提供方，并绑定到 `io.seata.core.context.RootContext` 中去。
+对于 Seata Server，跨服务调用场景下的事务传播，要把 XID 通过服务调用传递到服务提供方，并绑定到 `org.apache.seata.core.context.RootContext` 中去。
 参考 https://seata.apache.org/docs/user/api/ 。这需要讨论两种情况，
 
-1. 在使用 ShardingSphere JDBC 的场景下，跨多个微服务的事务场景需要考虑在起点微服务的上下文使用 `io.seata.core.context.RootContext.getXID()` 获取 Seata XID 后，
+1. 在使用 ShardingSphere JDBC 的场景下，跨多个微服务的事务场景需要考虑在起点微服务的上下文使用 `org.apache.seata.core.context.RootContext.getXID()` 获取 Seata XID 后，
    通过 HTTP 或 RPC 等手段传递给终点微服务，并在终点微服务的 Filter 或 Spring WebMVC HandlerInterceptor 中处理。
    Spring WebMVC HandlerInterceptor 仅适用于 Spring Boot 微服务，对 Quarkus，Micronaut Framework 和 Helidon 无效。
 
@@ -270,7 +273,7 @@ public class DemoService {
 讨论单服务调用的事务传播。当微服务实例 `a-service` 的业务函数 `aMethod` 抛出异常，在业务函数内对 MySQL 数据库实例 `a-mysql` 的更改将被正常回滚。
 
 讨论跨服务调用的事务传播。当微服务实例 `b-service` 的业务函数 `bMethod` 抛出异常，在业务函数内对 MySQL 数据库实例 `b-mysql` 的更改将被正常回滚，
-而微服务实例 `a-service` 的 `io.seata.core.context.RootContext` 未绑定微服务实例 `b-service` 的业务函数 `bMethod` 的 Seata XID，
+而微服务实例 `a-service` 的 `org.apache.seata.core.context.RootContext` 未绑定微服务实例 `b-service` 的业务函数 `bMethod` 的 Seata XID，
 因此在业务函数内对 MySQL 数据库实例 `a-mysql` 的更改将不会被回滚。
 
 为了实现当微服务实例 `b-service` 的业务函数 `bMethod` 抛出异常，在业务函数内对 MySQL 数据库实例 `a-mysql` 和 `b-mysql` 的更改均被正常回滚，
@@ -281,7 +284,7 @@ public class DemoService {
 可能的改造逻辑如下。
 
 ```java
-import io.seata.core.context.RootContext;
+import org.apache.seata.core.context.RootContext;
 import org.springframework.boot.web.client.RestTemplateBuilder;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -308,7 +311,7 @@ public class DemoService {
 此时在微服务实例 `a-service` 和 `b-service` 均需要添加自定义的 `org.springframework.web.servlet.config.annotation.WebMvcConfigurer` 实现。
 
 ```java
-import io.seata.integration.http.TransactionPropagationInterceptor;
+import org.apache.seata.integration.http.TransactionPropagationInterceptor;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
@@ -330,7 +333,7 @@ public class CustomWebMvcConfigurer implements WebMvcConfigurer {
 可能的改造逻辑如下。
 
 ```java
-import io.seata.core.context.RootContext;
+import org.apache.seata.core.context.RootContext;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.client.RestClient;
@@ -356,7 +359,7 @@ public class DemoService {
 此时在微服务实例 `a-service` 和 `b-service` 均需要添加自定义的 `org.springframework.web.servlet.config.annotation.WebMvcConfigurer` 实现。
 
 ```java
-import io.seata.integration.http.JakartaTransactionPropagationInterceptor;
+import org.apache.seata.integration.http.JakartaTransactionPropagationInterceptor;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
@@ -375,14 +378,14 @@ public class CustomWebMvcConfigurer implements WebMvcConfigurer {
 
 3. 微服务实例 `a-service` 和 `b-service` 均为 Spring Boot 微服务，但使用的 API 网关中间件阻断了所有包含 `TX_XID` 的 HTTP Header 的 HTTP 请求。
 用户需要考虑更改把 XID 通过服务调用传递到微服务实例 `a-service` 使用的 HTTP Header，或使用 RPC 框架把 XID 通过服务调用传递到微服务实例 `a-service`。
-参考 https://github.com/apache/incubator-seata/tree/v2.0.0/integration 。
+参考 https://github.com/apache/incubator-seata/tree/v2.1.0/integration 。
 
 4. 微服务实例 `a-service` 和 `b-service` 均为 Quarkus，Micronaut Framework 和 Helidon 等微服务。此情况下无法使用 Spring WebMVC HandlerInterceptor。
 可参考如下 Spring Boot 3 的自定义 WebMvcConfigurer 实现，来实现 Filter。
 
 ```java
-import io.seata.common.util.StringUtils;
-import io.seata.core.context.RootContext;
+import org.apache.seata.common.util.StringUtils;
+import org.apache.seata.core.context.RootContext;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import org.springframework.context.annotation.Configuration;
@@ -429,6 +432,3 @@ public class CustomWebMvcConfigurer implements WebMvcConfigurer {
 5. 微服务实例 `a-service` 和 `b-service` 均为 Spring Boot 微服务，但使用的组件是 Spring WebFlux 而非 Spring WebMVC。
 在反应式编程 API 下 ShardingSphere JDBC 无法处理 R2DBC DataSource，仅可处理 JDBC DataSource。
 在使用 WebFlux 组件的 Spring Boot 微服务中应避免创建 ShardingSphere JDBC DataSource。
-
-6. 微服务实例 `a-service` 和 `b-service` 使用的 Seata Client 为 `org.apache.seata:seata-all`， 而非 `io.seata:seata-all`。
-将所有对 `io.seata` package 的调用更改为 `org.apache.seata` package 即可。
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md
index 24065995243..37b7f9410bc 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/special-api/transaction/seata.en.md
@@ -10,7 +10,9 @@ All references to Seata integration in this article refer to Seata AT mode.
 
 ## Prerequisites
 
-Introduce Maven dependencies and exclude the outdated Maven dependencies of `org.antlr:antlr4-runtime:4.8` in `io.seata:seata-all`.
+ShardingSphere's Seata integration is only available in `apache/incubator-seata:v2.1.0` or higher.
+For Seata Client corresponding to the `org.apache.seata:seata-all` Maven module, this limitation applies to both HotSpot VM and GraalVM Native Image.
+Introduce Maven dependencies and exclude the outdated Maven dependency of `org.antlr:antlr4-runtime:4.8` in `org.apache.seata:seata-all`.
 
 ```xml
 <project>
@@ -26,20 +28,28 @@ Introduce Maven dependencies and exclude the outdated Maven dependencies of `org
          <version>${shardingsphere.version}</version>
       </dependency>
       <dependency>
-         <groupId>io.seata</groupId>
-         <artifactId>seata-all</artifactId>
-         <version>2.0.0</version>
-         <exclusions>
+        <groupId>org.apache.seata</groupId>
+        <artifactId>seata-all</artifactId>
+        <version>2.1.0</version>
+        <exclusions>
             <exclusion>
                <groupId>org.antlr</groupId>
                <artifactId>antlr4-runtime</artifactId>
             </exclusion>
-         </exclusions>
+        </exclusions>
       </dependency>
     </dependencies>
 </project>
 ```
 
+Affected by Calcite, 
+`commons-lang:commons-lang` and `org.apache.commons:commons-pool2` used by ShardingSphere JDBC have dependency conflicts with Seata Client.
+Users need to consider whether to resolve dependency conflicts based on actual scenarios.
+
+When using ShardingSphere's Seata integration module, 
+the database instance connected to ShardingSphere should implement both ShardingSphere's dialect parsing support and Seata AT mode's dialect parsing support. 
+Such databases include but are not limited to `mysql`, `gvenzl/oracle-free`, `gvenzl/oracle-xe`, `postgres`, `mcr.microsoft.com/mssql/server` and other Docker Images.
+
 ## Procedure
 
 1. Start Seata Server
@@ -52,32 +62,27 @@ Introduce Maven dependencies and exclude the outdated Maven dependencies of `org
 
 Follow the steps in one of the links below to download and start Seata Server.
 
-The proper way to start Seata Server is to instantiate it through the Docker Image of `seataio/seata-server` in Docker Hub.
-For `apache/incubator-seata:v2.0.0` and earlier Seata versions, `seataio/seata-server` from Docker Hub should be used.
-Otherwise, `apache/seata-server` from Docker Hub should be used.
+The proper way to start Seata Server is to instantiate it through the Docker Image of `apache/seata-server` in Docker Hub.
 
-- [seata-fescar-workshop](https://github.com/seata/fescar-workshop)
-- https://hub.docker.com/r/seataio/seata-server
 - https://hub.docker.com/r/apache/seata-server
 
 ### Create undo_log table
 
 Create the `undo_log` table in each real database instance involved in ShardingSphere.
-The SQL content is based on the corresponding database in https://github.com/apache/incubator-seata/tree/v2.0.0/script/client/at/db .
+The SQL content is based on the corresponding database in https://github.com/apache/incubator-seata/tree/v2.1.0/script/client/at/db .
 The following content takes MySQL as an example.
 ```sql
 CREATE TABLE IF NOT EXISTS `undo_log`
 (
-   `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',
-   `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',
-   `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',
-   `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',
-   `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',
-   `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',
-   `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',
-   UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
-   ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';
-
+    `branch_id`     BIGINT       NOT NULL COMMENT 'branch transaction id',
+    `xid`           VARCHAR(128) NOT NULL COMMENT 'global transaction id',
+    `context`       VARCHAR(128) NOT NULL COMMENT 'undo_log context,such as serialization',
+    `rollback_info` LONGBLOB     NOT NULL COMMENT 'rollback info',
+    `log_status`    INT(11)      NOT NULL COMMENT '0:normal status,1:defense status',
+    `log_created`   DATETIME(6)  NOT NULL COMMENT 'create datetime',
+    `log_modified`  DATETIME(6)  NOT NULL COMMENT 'modify datetime',
+    UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`)
+    ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8mb4 COMMENT ='AT transaction mode undo table';
 ALTER TABLE `undo_log` ADD INDEX `ix_log_created` (`log_created`);
 ```
 
@@ -96,7 +101,7 @@ transaction:
 ```
 
 Add the `seata.conf` file to the root directory of the classpath.
-The configuration file format refers to the [JavaDoc](https://github.com/apache/incubator-seata/blob/v2.0.0/config/seata-config-core/src/main/java/io/seata/config/FileConfiguration.java) of `io.seata.config.FileConfiguration`.
+The configuration file format refers to the [JavaDoc](https://github.com/apache/incubator-seata/blob/v2.1.0/config/seata-config-core/src/main/java/org/apache/seata/config/FileConfiguration.java) of `org.apache.seata.config.FileConfiguration`.
 
 There are four properties in `seata.conf`,
 
@@ -121,8 +126,9 @@ client {
 A minimally configured `seata.conf` is as follows.
 In `seata.conf` managed by ShardingSphere, the default value of `client.transaction.service.group` is set to `default` for historical reasons.
 Assuming that in the `registry.conf` of Seata Server and Seata Client used by the user, `registry.type` and `config.type` are both `file`,
-then for the `.conf` file configured by `config.file.name` of `registry.conf`, 
-the default value of the transaction group name is `default_tx_group` after `apache/incubator-seata:v1.5.1`, otherwise it is `my_test_tx_group`.
+then for the `.conf` file configured by `config.file.name` of `registry.conf`,
+the default transaction group name is `default_tx_group` in `apache/incubator-seata:v1.5.1` and later, 
+and `my_test_tx_group` before `apache/incubator-seata:v1.5.1`.
 
 ```conf
 client.application.id = example
@@ -136,7 +142,7 @@ ShardingSphere's Seata integration does not support isolation levels.
 
 ShardingSphere's Seata integration places the obtained Seata global transaction into the thread's local variables.
 And `org.apache.seata.spring.annotation.GlobalTransactionScanner` uses Dynamic Proxy to enhance the method.
-This means that when using ShardingSphere's Seata integration, users should avoid using the Java API of `io.seata:seata-all`, 
+This means that when using ShardingSphere's Seata integration, users should avoid using the Java API of `org.apache.seata:seata-all`, 
 unless the user is mixing ShardingSphere's Seata integration with the TCC mode feature of Seata Client.
 
 For ShardingSphere data source, discuss 6 situations,
@@ -150,13 +156,13 @@ and manually calling the `setAutoCommit()`, `commit()` and `rollback()` methods
 
 4. Using Spring Framework’s `org.springframework.transaction.annotation.Transactional` annotation on functions is allowed.
 
-5. Using the `io.seata.spring.annotation.GlobalTransactional` annotation on the function is **not allowed**.
+5. Using the `org.apache.seata.spring.annotation.GlobalTransactional` annotation on the function is **not allowed**.
 
-6. Manually create `io.seata.tm.api.GlobalTransaction` instance from `io.seata.tm.api.GlobalTransactionContext`,
-calling the `begin()`, `commit()` and `rollback()` methods of an `io.seata.tm.api.GlobalTransaction` instance is **not allowed**.
+6. Manually create `org.apache.seata.tm.api.GlobalTransaction` instance from `org.apache.seata.tm.api.GlobalTransactionContext`,
+calling the `begin()`, `commit()` and `rollback()` methods of an `org.apache.seata.tm.api.GlobalTransaction` instance is **not allowed**.
 
 In actual scenarios where Spring Boot is used, 
-`com.alibaba.cloud:spring-cloud-starter-alibaba-seata` and `io.seata:seata-spring-boot-starter` are often transitively imported by other Maven dependencies.
+`com.alibaba.cloud:spring-cloud-starter-alibaba-seata` and `org.apache.seata:seata-spring-boot-starter` are often transitively imported by other Maven dependencies.
 To avoid transaction conflicts, users need to set the property `seata.enable-auto-data-source-proxy` to `false` in the Spring Boot configuration file. 
 A possible dependency relationship is as follows.
 
@@ -174,9 +180,9 @@ A possible dependency relationship is as follows.
           <version>${shardingsphere.version}</version>
        </dependency>
        <dependency>
-          <groupId>io.seata</groupId>
+          <groupId>org.apache.seata</groupId>
           <artifactId>seata-spring-boot-starter</artifactId>
-          <version>2.0.0</version>
+          <version>2.1.0</version>
           <exclusions>
              <exclusion>
                 <groupId>org.antlr</groupId>
@@ -202,21 +208,21 @@ seata:
 
 For the case of setting up ShardingSphere's Seata integration,
 In business functions unrelated to ShardingSphere JDBC DataSource, if you need to use Seata Client's Seata TCC mode-related features in business functions,
-you can instantiate a non-proxy ordinary TCC interface implementation class, and then use `io.seata.integration.tx.api.util.ProxyUtil` to create a proxy TCC interface class,
+you can instantiate a non-proxy ordinary TCC interface implementation class, and then use `org.apache.integration.tx.api.util.ProxyUtil` to create a proxy TCC interface class,
 and call the functions corresponding to the three stages of the TCC interface implementation class `Try`, `Confirm`, and `Cancel`.
 
-For the `io.seata.spring.annotation.GlobalTransactional` annotation introduced by the Seata TCC mode or the business functions involved in the Seata TCC mode that need to interact with the database instance, 
+For the `org.apache.seata.spring.annotation.GlobalTransactional` annotation introduced by the Seata TCC mode or the business functions involved in the Seata TCC mode that need to interact with the database instance, 
 ShardingSphere JDBC DataSource should not be used in the business functions marked by this annotation. Instead, 
 a `javax.sql.DataSource` instance should be created manually or obtained from a custom Spring Bean.
 
 ### Transactional propagation across service calls
 
 Transactional propagationn in cross-service call scenarios is not as out-of-the-box as transaction operations within a single microservice.
-For Seata Server, transactional propagation in cross-service call scenarios requires passing XID to the service provider through service calls and binding it to `io.seata.core.context.RootContext`.
+For Seata Server, transactional propagation in cross-service call scenarios requires passing XID to the service provider through service calls and binding it to `org.apache.seata.core.context.RootContext`.
 Refer to https://seata.apache.org/docs/user/api/ . This requires discussing two situations,
 
 1. In the scenario of using ShardingSphere JDBC, 
-transaction scenarios across multiple microservices need to consider using `io.seata.core.context.RootContext.getXID()` to obtain Seata XID in the context of the starting microservice,
+transaction scenarios across multiple microservices need to consider using `org.apache.seata.core.context.RootContext.getXID()` to obtain Seata XID in the context of the starting microservice,
 and passing it to the end microservice through HTTP or RPC, and processing it in the Filter or Spring WebMVC HandlerInterceptor of the end microservice.
 Spring WebMVC HandlerInterceptor is only applicable to Spring Boot microservices and is invalid for Quarkus, Micronaut Framework and Helidon.
 
@@ -285,7 +291,7 @@ the changes to the MySQL database instance `a-mysql` in the business function wi
 
 Discuss transaction propagation for cross-service calls. When the business function `bMethod` of the microservice instance `b-service` throws an exception, 
 the changes to the MySQL database instance `b-mysql` in the business function will be rolled back normally,
-and the `io.seata.core.context.RootContext` of the microservice instance `a-service` is not bound to the Seata XID of the business function `bMethod` of the microservice instance `b-service`,
+and the `org.apache.seata.core.context.RootContext` of the microservice instance `a-service` is not bound to the Seata XID of the business function `bMethod` of the microservice instance `b-service`,
 so the changes to the MySQL database instance `a-mysql` in the business function will not be rolled back.
 
 In order to achieve that when the business function `bMethod` of the microservice instance `b-service` throws an exception, 
@@ -297,7 +303,7 @@ Users can use `org.springframework.web.client.RestTemplate` in the business func
 The possible transformation logic is as follows.
 
 ```java
-import io.seata.core.context.RootContext;
+import org.apache.seata.core.context.RootContext;
 import org.springframework.boot.web.client.RestTemplateBuilder;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
@@ -324,7 +330,7 @@ public class DemoService {
 At this time, custom `org.springframework.web.servlet.config.annotation.WebMvcConfigurer` implementations need to be added to the microservice instances `a-service` and `b-service`.
 
 ```java
-import io.seata.integration.http.TransactionPropagationInterceptor;
+import org.apache.seata.integration.http.TransactionPropagationInterceptor;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
@@ -347,7 +353,7 @@ Users can use `org.springframework.web.client.RestClient` in the business functi
 The possible transformation logic is as follows.
 
 ```java
-import io.seata.core.context.RootContext;
+import org.apache.seata.core.context.RootContext;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.client.RestClient;
@@ -373,7 +379,7 @@ public class DemoService {
 At this time, custom `org.springframework.web.servlet.config.annotation.WebMvcConfigurer` implementations need to be added to the microservice instances `a-service` and `b-service`.
 
 ```java
-import io.seata.integration.http.JakartaTransactionPropagationInterceptor;
+import org.apache.seata.integration.http.JakartaTransactionPropagationInterceptor;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
@@ -395,15 +401,15 @@ the changes to the MySQL database instances `a-mysql` and `b-mysql` in the busin
 but the API gateway middleware used blocks all HTTP requests containing the HTTP Header of `TX_XID`.
 The user needs to consider changing the HTTP Header used to pass XID to the microservice instance `a-service` through service calls, 
 or use the RPC framework to pass XID to the microservice instance `a-service` through service calls.
-Refer to https://github.com/apache/incubator-seata/tree/v2.0.0/integration .
+Refer to https://github.com/apache/incubator-seata/tree/v2.1.0/integration .
 
 4. The microservice instances `a-service` and `b-service` are both microservices such as Quarkus, Micronaut Framework and Helidon. 
 In this case, Spring WebMVC HandlerInterceptor cannot be used.
 You can refer to the following Spring Boot 3 custom WebMvcConfigurer implementation to implement Filter.
 
 ```java
-import io.seata.common.util.StringUtils;
-import io.seata.core.context.RootContext;
+import org.apache.seata.common.util.StringUtils;
+import org.apache.seata.core.context.RootContext;
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import org.springframework.context.annotation.Configuration;
@@ -450,6 +456,3 @@ public class CustomWebMvcConfigurer implements WebMvcConfigurer {
 5. Both microservice instances `a-service` and `b-service` are Spring Boot microservices, but the components used are Spring WebFlux instead of Spring WebMVC.
 ShardingSphere JDBC cannot handle R2DBC DataSource under the reactive programming API, only JDBC DataSource.
 Avoid creating ShardingSphere JDBC DataSource in Spring Boot microservices using WebFlux components.
-
-6. The Seata Client used by the microservice instances `a-service` and `b-service` is `org.apache.seata:seata-all`, not `io.seata:seata-all`.
-Change all calls to the `io.seata` package to the `org.apache.seata` package.
