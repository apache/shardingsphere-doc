<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>外部集成 on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/configuration/external-integration/</link>
    <description>Recent content in 外部集成 on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/configuration/external-integration/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>连接至开启 SASL 鉴权的 Zookeeper Server</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/configuration/external-integration/sasl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/configuration/external-integration/sasl/</guid>
      <description>使用方式 ElasticJob 的 org.apache.shardingsphere.elasticjob.reg.zookeeper.ZookeeperRegistryCenter 能正常连接至开启 SASL 鉴权的 Zookeeper Server。 SASL 机制允许在客户端和服务器之间实现安全通信，而 ZooKeeper 支持 Kerberos 或 DIGEST-MD5 作为身份验证方案。 下文讨论常见情景。
DIGEST-MD5 假设通过 Docker Engine 部署单个 Zookeeper Server 实例，对应的 docker-compose.yml 内容如下，
services: zookeeper-test: image: zookeeper:3.9.2 volumes: - ./jaas-server-test.conf:/jaas-test.conf environment: JVMFLAGS: &amp;#34;-Djava.security.auth.login.config=/jaas-test.conf&amp;#34; ZOO_CFG_EXTRA: &amp;#34;authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider sessionRequireClientSASLAuth=true&amp;#34; ports: - &amp;#34;2181:2181&amp;#34; 假设存在文件为 ./jaas-server-test.conf，内容如下，
Server { org.apache.zookeeper.server.auth.DigestLoginModule required user_bob=&amp;quot;bobsecret&amp;quot;; }; 假设存在独立的 Spring Boot 应用，只需要在 Spring Boot 的启动类配置 SASL 的鉴权信息。逻辑类似如下，
import javax.security.auth.login.AppConfigurationEntry; import javax.security.auth.login.Configuration; import java.util.HashMap; import java.util.Map; public class ExampleUtils { public void initSasl() { Configuration configuration = new Configuration() { @Override public AppConfigurationEntry[] getAppConfigurationEntry(final String name) { Map&amp;lt;String, String&amp;gt; options = new HashMap&amp;lt;&amp;gt;(); options.</description>
    </item>
    
  </channel>
</rss>
