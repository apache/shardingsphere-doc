<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规则配置 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/</link>
    <description>Recent content in 规则配置 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding/</guid>
      <description>背景信息 数据分片 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包就能够集成各种类型的业务系统。
参数解释 配置入口 类名称：org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;ShardingTableRuleConfiguration&amp;gt; 分片表规则列表 -   autoTables (+) Collection&amp;lt;ShardingAutoTableRuleConfiguration&amp;gt; 自动分片表规则列表 -   bindingTableGroups (*) Collection&amp;lt;String&amp;gt; 绑定表规则列表 无   defaultDatabaseShardingStrategy (?) ShardingStrategyConfiguration 默认分库策略 不分片   defaultTableShardingStrategy (?) ShardingStrategyConfiguration 默认分表策略 不分片   defaultKeyGenerateStrategy (?) KeyGeneratorConfiguration 默认自增列生成器配置 雪花算法   defaultAuditStrategy (?</description>
    </item>
    
    <item>
      <title>广播表</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/broadcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/broadcast/</guid>
      <description>广播表 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包就能够集成各种类型的业务系统。
参数解释 类名称：org.apache.shardingsphere.broadcast.config.BroadcastRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;String&amp;gt; 广播表规则配置     配置示例 广播表 Java API 配置示例如下：
public final class ShardingDatabasesAndTablesConfigurationPrecise { @Override public DataSource getDataSource() throws SQLException { return ShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Arrays.asList(createBroadcastRuleConfiguration()), new Properties()); } private Map&amp;lt;String, DataSource&amp;gt; createDataSourceMap() { Map&amp;lt;String, DataSource&amp;gt; result = new HashMap&amp;lt;&amp;gt;(); result.put(&amp;#34;demo_ds_0&amp;#34;, DataSourceUtil.createDataSource(&amp;#34;demo_ds_0&amp;#34;)); result.</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/readwrite-splitting/</guid>
      <description>背景信息 Java API 形式配置的读写分离可以方便的适用于各种场景，不依赖额外的 jar 包，用户只需要通过 java 代码构造读写分离数据源便可以使用读写分离功能。
参数解释 配置入口 类名称：org.apache.shardingsphere.readwritesplitting.config.ReadwriteSplittingRuleConfiguration
可配置属性：
   名称 数据类型 说明     dataSources (+) Collection&amp;lt;ReadwriteSplittingDataSourceRuleConfiguration&amp;gt; 读写数据源配置   loadBalancers (*) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 从库负载均衡算法配置    主从数据源配置 类名称：org.apache.shardingsphere.readwritesplitting.config.rule.ReadwriteSplittingDataSourceGroupRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     name String 读写分离数据源名称 -   writeDataSourceName String 写库数据源名称 -   readDataSourceNames List&amp;lt;String&amp;gt; 读库数据源名称 -   transactionalReadQueryStrategy (?) TransactionalReadQueryStrategy 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源） DYNAMIC   loadBalancerName (?</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/transaction/</guid>
      <description>配置入口 org.apache.shardingsphere.transaction.config.TransactionRuleConfiguration
可配置属性：
   名称 数据类型 说明     defaultType String 默认事务类型   providerType (?) String 事务提供者类型   props (?) Properties 事务属性配置    </description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/encrypt/</guid>
      <description>背景信息 数据加密 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包 就能够集成各种类型的业务系统。
参数解释 配置入口 类名称：org.apache.shardingsphere.encrypt.config.EncryptRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;EncryptTableRuleConfiguration&amp;gt; 加密表规则配置    encryptors (+) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 加解密算法名称和配置     加密表规则配置 类名称：org.apache.shardingsphere.encrypt.config.rule.EncryptTableRuleConfiguration
可配置属性：
   名称 数据类型 说明     name String 表名称   columns (+) Collection&amp;lt;EncryptColumnRuleConfiguration&amp;gt; 加密列规则配置列表    加密列规则配置 类名称：org.</description>
    </item>
    
    <item>
      <title>数据脱敏</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/mask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/mask/</guid>
      <description>背景信息 数据脱敏 Java API 规则配置允许用户直接通过编写 Java 代码的方式，完成 ShardingSphereDataSource 对象的创建，Java API 的配置方式非常灵活，不需要依赖额外的 jar 包 就能够集成各种类型的业务系统。
参数解释 配置入口 类名称：org.apache.shardingsphere.mask.config.MaskRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;MaskTableRuleConfiguration&amp;gt; 脱敏表规则配置    maskAlgorithms (+) Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 脱敏算法名称和配置     脱敏表规则配置 类名称：org.apache.shardingsphere.mask.config.rule.MaskTableRuleConfiguration
可配置属性：
   名称 数据类型 说明     name String 表名称   columns (+) Collection&amp;lt;MaskColumnRuleConfiguration&amp;gt; 脱敏列规则配置列表    脱敏列规则配置 类名称：org.</description>
    </item>
    
    <item>
      <title>影子库</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/shadow/</guid>
      <description>背景信息 如果您只想使用 Java API 方式配置使用 ShardingSphere 影子库功能请参考以下配置。
参数解释 配置入口 类名称：org.apache.shardingsphere.shadow.config.ShadowRuleConfiguration
可配置属性：
   名称 数据类型 说明     dataSources Map&amp;lt;String, ShadowDataSourceConfiguration&amp;gt; 影子数据源映射名称和配置   tables Map&amp;lt;String, ShadowTableConfiguration&amp;gt; 影子表名称和配置   shadowAlgorithms Map&amp;lt;String, AlgorithmConfiguration&amp;gt; 影子算法名称和配置   defaultShadowAlgorithmName String 默认影子算法名称    影子数据源配置 类名称：org.apache.shardingsphere.shadow.config.datasource.ShadowDataSourceConfiguration
可配置属性：
   名称 数据类型 说明     productionDataSourceName String 生产数据源名称   shadowDataSourceName String 影子数据源名称    影子表配置 类名称：org.</description>
    </item>
    
    <item>
      <title>SQL 解析</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-parser/</guid>
      <description>背景信息 SQL 是使用者与数据库交流的标准语言。 SQL 解析引擎负责将 SQL 字符串解析为抽象语法树，供 Apache ShardingSphere 理解并实现其增量功能。 目前支持 MySQL, PostgreSQL, SQLServer, Oracle, openGauss 以及符合 SQL92 规范的 SQL 方言。 由于 SQL 语法的复杂性，目前仍然存在少量不支持的 SQL。 通过 Java API 形式使用 SQL 解析，可以方便得集成进入各种系统，灵活定制用户需求。
参数解释 类名称：org.apache.shardingsphere.parser.config.SQLParserRuleConfiguration
可配置属性：
   名称 数据类型 说明     parseTreeCache (?) CacheOption 解析语法树本地缓存配置   sqlStatementCache (?) CacheOption SQL 语句本地缓存配置    本地缓存配置 类名称：org.apache.shardingsphere.sql.parser.api.CacheOption
可配置属性：
   名称 数据类型 说明 默认值     initialCapacity int 本地缓存初始容量 语法树本地缓存默认值 128，SQL 语句缓存默认值 2000   maximumSize long 本地缓存最大容量 语法树本地缓存默认值 1024，SQL 语句缓存默认值 65535    操作步骤  设置本地缓存配置 设置解析配置 使用解析引擎解析 SQL  配置示例 CacheOption cacheOption = new CacheOption(128, 1024L); SQLParserEngine parserEngine = new SQLParserEngine(&amp;#34;MySQL&amp;#34;, cacheOption); ParseASTNode parseASTNode = parserEngine.</description>
    </item>
    
    <item>
      <title>SQL 翻译</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-translator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-translator/</guid>
      <description>背景信息 通过 Java API 形式使用 SQL 翻译，可以方便得集成进入各种系统，灵活定制用户需求。
参数解释 类名称：org.apache.shardingsphere.sqltranslator.config.SQLTranslatorRuleConfiguration
可配置属性：
   名称 数据类型 说明     type String SQL 翻译器类型   useOriginalSQLWhenTranslatingFailed (?) boolean SQL 翻译失败是否使用原始 SQL 继续执行    操作步骤  配置翻译类型 type 配置 useOriginalSQLWhenTranslatingFailed 参数，是否在 SQL 翻译失败后使用原始 SQL 继续执行  配置示例 SQLTranslatorRuleConfiguration ruleConfig = new SQLTranslatorRuleConfiguration(&amp;#34;Native&amp;#34;, new Properties(), false); String translatedSQL = new SQLTranslatorRule(ruleConfig).translate(); 相关参考  YAML 配置：SQL 翻译  </description>
    </item>
    
    <item>
      <title>混合规则</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/mix/</guid>
      <description>背景信息 ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、数据加密等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 JAVA API 的配置示例。
配置示例 // 分片配置 private ShardingRuleConfiguration createShardingRuleConfiguration() { ShardingRuleConfiguration result = new ShardingRuleConfiguration(); result.getTables().add(getOrderTableRuleConfiguration()); result.setDefaultDatabaseShardingStrategy(new StandardShardingStrategyConfiguration(&amp;#34;user_id&amp;#34;, &amp;#34;inline&amp;#34;)); result.setDefaultTableShardingStrategy(new StandardShardingStrategyConfiguration(&amp;#34;order_id&amp;#34;, &amp;#34;standard_test_tbl&amp;#34;)); Properties props = new Properties(); props.setProperty(&amp;#34;algorithm-expression&amp;#34;, &amp;#34;demo_ds_${user_id % 2}&amp;#34;); result.getShardingAlgorithms().put(&amp;#34;inline&amp;#34;, new AlgorithmConfiguration(&amp;#34;INLINE&amp;#34;, props)); result.getShardingAlgorithms().put(&amp;#34;standard_test_tbl&amp;#34;, new AlgorithmConfiguration(&amp;#34;STANDARD_TEST_TBL&amp;#34;, new Properties())); result.getKeyGenerators().put(&amp;#34;snowflake&amp;#34;, new AlgorithmConfiguration(&amp;#34;SNOWFLAKE&amp;#34;, new Properties())); return result; } private ShardingTableRuleConfiguration getOrderTableRuleConfiguration() { ShardingTableRuleConfiguration result = new ShardingTableRuleConfiguration(&amp;#34;t_order&amp;#34;, &amp;#34;demo_ds_${0..1}.t_order_${[0, 1]}&amp;#34;); result.setKeyGenerateStrategy(new KeyGenerateStrategyConfiguration(&amp;#34;order_id&amp;#34;, &amp;#34;snowflake&amp;#34;)); return result; } // 读写分离配置 private static ReadwriteSplittingRuleConfiguration createReadwriteSplittingConfiguration() { ReadwriteSplittingDataSourceRuleConfiguration dataSourceConfiguration1 = new ReadwriteSplittingDataSourceRuleConfiguration(&amp;#34;replica_ds_0&amp;#34;, Arrays.</description>
    </item>
    
    <item>
      <title>数据分片路由缓存</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sharding-cache/</guid>
      <description>背景信息 该项功能为实验性功能，需要与数据分片功能同时使用。 数据分片路由缓存会将逻辑 SQL、分片键实际参数值、路由结果放入缓存中，以空间换时间，减少路由逻辑对 CPU 的使用。
建议仅在满足以下条件的情况下启用：
 纯 OLTP 场景 ShardingSphere 进程所在机器 CPU 已达到瓶颈 CPU 开销主要在于 ShardingSphere 路由逻辑 所有 SQL 已经最优且每次 SQL 执行都能命中单一分片  在不满足以上条件的情况下使用，可能对 SQL 的执行延时不会有明显改善，同时会增加内存的压力。
参数解释 类名称：org.apache.shardingsphere.sharding.api.config.cache.ShardingCacheConfiguration
可配置属性：
   名称 数据类型 说明 默认值     allowedMaxSqlLength int 允许缓存的 SQL 长度限制 -   routeCache org.apache.shardingsphere.sharding.api.config.cache.ShardingCacheOptionsConfiguration 路由缓存 -    类名称：org.apache.shardingsphere.sharding.api.config.cache.ShardingCacheOptionsConfiguration
可配置属性：
   名称 数据类型 说明 默认值     softValues boolean 是否软引用缓存值 -   initialCapacity int 缓存初始容量 -   maximumSize int 缓存最大容量 -    配置示例 public final class ShardingDatabasesAndTablesConfigurationPrecise { @Override public DataSource getDataSource() throws SQLException { return ShardingSphereDataSourceFactory.</description>
    </item>
    
    <item>
      <title>单表</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/single/</guid>
      <description>背景信息 单表规则用于指定哪些单表需要被 ShardingSphere 管理，也可设置默认的单表数据源。
参数解释 类名称：org.apache.shardingsphere.single.config.SingleRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     tables (+) Collection&amp;lt;String&amp;gt; 单表规则列表 -   defaultDataSource (?) String 单表默认数据源 -    操作步骤  初始化 SingleRuleConfiguration； 添加需要加载的单表，配置默认数据源。  配置示例 SingleRuleConfiguration ruleConfig = new SingleRuleConfiguration(); ShardingSphereDataSourceFactory.createDataSource(createDataSourceMap(), Arrays.asList(ruleConfig), new Properties()); 相关参考  单表  </description>
    </item>
    
    <item>
      <title>联邦查询</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-federation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/cn/user-manual/shardingsphere-jdbc/java-api/rules/sql-federation/</guid>
      <description>背景信息 该功能为实验性功能，暂不适合核心系统生产环境使用。 当关联查询中的多个表分布在不同的数据库实例上时，通过开启联邦查询可以进行跨库关联查询，以及子查询。
参数解释 类名称：org.apache.shardingsphere.sqlfederation.config.SQLFederationRuleConfiguration
可配置属性：
   名称 数据类型 说明 默认值     sqlFederationEnabled boolean 是否开启联邦查询 -   allQueryUseSQLFederation boolean 是否全部查询 SQL 使用联邦查询 -   executionPlanCache org.apache.shardingsphere.sql.parser.api.CacheOption 执行计划缓存 -    本地缓存配置 类名称：org.apache.shardingsphere.sql.parser.api.CacheOption
可配置属性：
   名称 数据类型 说明 默认值     initialCapacity int 执行计划缓存初始容量 执行计划本地缓存初始默认值 2000   maximumSize long 执行计划缓存最大容量 执行计划本地缓存最大默认值 65535    配置示例 private SQLFederationRuleConfiguration createSQLFederationRuleConfiguration() { CacheOption executionPlanCache = new CacheOption(2000, 65535L); return new SQLFederationRuleConfiguration(true, false, executionPlanCache); } 相关参考  YAML 配置：联邦查询  </description>
    </item>
    
  </channel>
</rss>
