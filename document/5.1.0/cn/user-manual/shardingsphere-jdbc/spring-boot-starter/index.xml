<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot Starter on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/</link>
    <description>Recent content in Spring Boot Starter on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>模式配置</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/mode/</guid>
      <description>缺省配置为使用内存模式。
配置项说明 spring.shardingsphere.mode.type= # 运行模式类型。可选配置：Memory、Standalone、Clusterspring.shardingsphere.mode.repository= # 持久化仓库配置。Memory 类型无需持久化spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置内存模式 spring.shardingsphere.mode.type=Memory单机模式 spring.shardingsphere.mode.type=Standalonespring.shardingsphere.mode.repository.type= # 持久化仓库类型spring.shardingsphere.mode.repository.props.&amp;lt;key&amp;gt;= # 持久化仓库所需属性spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置集群模式 spring.shardingsphere.mode.type=Clusterspring.shardingsphere.mode.repository.type= # 持久化仓库类型spring.shardingsphere.mode.repository.props.namespace= # 注册中心命名空间spring.shardingsphere.mode.repository.props.server-lists= # 注册中心连接地址spring.shardingsphere.mode.repository.props.&amp;lt;key&amp;gt;= # 持久化仓库所需属性spring.shardingsphere.mode.overwrite= # 是否使用本地配置覆盖持久化配置持久化仓库类型的详情，请参见内置持久化仓库类型列表。</description>
    </item>
    
    <item>
      <title>数据源配置</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/spring-boot-starter/data-source/</guid>
      <description>使用本地数据源 配置项说明 spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分# &amp;lt;actual-data-source-name&amp;gt; 表示真实数据源名称spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.type= # 数据库连接池全类名spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.driver-class-name= # 数据库驱动类名，以数据库连接池自身配置为准spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.jdbc-url= # 数据库 URL 连接，以数据库连接池自身配置为准spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.username= # 数据库用户名，以数据库连接池自身配置为准spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.password= # 数据库密码，以数据库连接池自身配置为准spring.shardingsphere.datasource.&amp;lt;actual-data-source-name&amp;gt;.&amp;lt;xxx&amp;gt;= # ... 数据库连接池的其它属性配置示例 示例的数据库驱动为 MySQL，连接池为 HikariCP，可以更换为其他数据库驱动和连接池。
# 配置真实数据源spring.shardingsphere.datasource.names=ds1,ds2# 配置第 1 个数据源spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSourcespring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driverspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1spring.shardingsphere.datasource.ds1.username=rootspring.shardingsphere.datasource.ds1.password=# 配置第 2 个数据源spring.shardingsphere.datasource.ds2.type=com.zaxxer.hikari.HikariDataSourcespring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.jdbc.Driverspring.shardingsphere.datasource.ds2.jdbc-url=jdbc:mysql://localhost:3306/ds2spring.shardingsphere.datasource.ds2.username=rootspring.shardingsphere.datasource.ds2.password=使用 JNDI 数据源 如果计划使用 JNDI 配置数据库，在应用容器（如 Tomcat）中使用 ShardingSphere-JDBC 时， 可使用 spring.shardingsphere.datasource.${datasourceName}.jndiName 来代替数据源的一系列配置。
配置项说明 spring.shardingsphere.datasource.names= # 真实数据源名称，多个数据源用逗号区分# &amp;lt;actual-data-source-name&amp;gt; 表示真实数据源名称spring.</description>
    </item>
    
  </channel>
</rss>