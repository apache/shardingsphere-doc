<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>使用手册 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/</link>
    <description>Recent content in 使用手册 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxy 启动</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/startup/</guid>
      <description>启动步骤  下载 ShardingSphere-Proxy 的最新发行版。 如果使用 docker，可以执行 docker pull shardingsphere/shardingsphere-proxy 获取镜像。详细信息请参考Docker镜像。 解压缩后修改 conf/server.yaml和以 config- 前缀开头的文件，如：conf/config-xxx.yaml 文件，进行分片规则、读写分离规则配置。配置方式请参考配置手册。 Linux 操作系统请运行 bin/start.sh，Windows 操作系统请运行 bin/start.bat 启动 ShardingSphere-Proxy。如需配置启动端口、配置文件位置，可参考快速入门。  使用 PostgreSQL  使用任何 PostgreSQL 的客户端连接。如: psql -U root -h 127.0.0.1 -p 3307  使用 MySQL  将 MySQL 的 JDBC 驱动程序复制至目录 ext-lib/。 使用任何 MySQL 的客户端连接。如: mysql -u root -h 127.0.0.1 -P 3307  使用自定义分片算法 当用户需要使用自定义的分片算法类时，无法再通过简单的行表达式在 YAML 文件进行配置。可通过以下方式配置使用自定义分片算法。
 实现 ShardingAlgorithm 接口定义的算法实现类。 将上述 Java 文件打包成 jar 包。 将上述 jar 包拷贝至 ShardingSphere-Proxy 解压后的 conf/lib-ext 目录。 将上述自定义算法实现类的 Java 文件引用配置在 YAML 文件中，具体可参考配置规则。  注意事项  ShardingSphere-Proxy 默认使用 3307 端口，可以通过启动脚本追加参数作为启动端口号。如: bin/start.</description>
    </item>
    
    <item>
      <title>分布式治理</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/governance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/governance/</guid>
      <description>ShardingSphere-Proxy 支持使用 SPI 方式接入分布式治理，实现配置和元数据统一管理以及实例熔断和从库禁用等功能。
Zookeeper ShardingSphere-Proxy 默认提供了 Zookeeper 解决方案，实现了配置中心和注册中心功能。 配置规则同 ShardingSphere-JDBC YAML 保持一致。
其他第三方组件 详情请参考支持的第三方组件。
 使用 SPI 方式实现相关逻辑编码，并将生成的 jar 包复制至 ShardingSphere-Proxy 的 lib 目录。 按照配置规则进行配置，即可使用。  </description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/transaction/</guid>
      <description>ShardingSphere-Proxy 接入的分布式事务 API 同 ShardingSphere-JDBC 保持一致，支持 LOCAL，XA，BASE 类型的事务。
XA 事务 ShardingSphere-Proxy 原生支持 XA 事务，默认的事务管理器为 Atomikos。 可以通过在 ShardingSphere-Proxy 的 conf 目录中添加 jta.properties 来定制化 Atomikos 配置项。 具体的配置规则请参考 Atomikos 的官方文档。
BASE事务 BASE 目前没有集成至 ShardingSphere-Proxy 的二进制发布包中，使用时需要将实现了 ShardingTransactionManager SPI 的 jar 拷贝至 conf/lib 目录，然后切换事务类型为 BASE。</description>
    </item>
    
    <item>
      <title>SCTL</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/sctl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-proxy/usage/sctl/</guid>
      <description>SCTL (ShardingSphere Control Language) 为 ShardingSphere 特有的控制语句， 可以在运行时修改和查询 ShardingSphere-Proxy 的状态，目前支持的语法为：
   语句 说明     sctl:set transaction_type=XX 修改当前连接的事务类型, 支持LOCAL，XA，BASE。例：sctl:set transaction_type=XA   sctl:show transaction_type 查询当前连接的事务类型   sctl:show cached_connections 查询当前连接中缓存的物理数据库连接个数   sctl:explain SQL 查看逻辑 SQL 的执行计划，例：sctl:explain select * from t_order;   sctl:hint set PRIMARY_ONLY=true 针对当前连接，是否将数据库操作强制路由到主库   sctl:hint set DatabaseShardingValue=yy 针对当前连接，设置 hint 仅对数据库分片有效，并添加分片值，yy：数据库分片值   sctl:hint addDatabaseShardingValue xx=yy 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：数据库分片值   sctl:hint addTableShardingValue xx=yy 针对当前连接，为表 xx 添加分片值 yy，xx：逻辑表名称，yy：表分片值   sctl:hint clear 针对当前连接，清除 hint 所有设置   sctl:hint show status 针对当前连接，查询 hint 状态，primary_only:true/false，sharding_type:databases_only/databases_tables   sctl:hint show table status 针对当前连接，查询逻辑表的 hint 分片值    ShardingSphere-Proxy 默认不支持 hint，如需支持，请在 conf/server.</description>
    </item>
    
  </channel>
</rss>