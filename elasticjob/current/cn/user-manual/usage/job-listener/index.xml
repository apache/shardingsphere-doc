<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>作业监听器 on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/</link>
    <description>Recent content in 作业监听器 on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>监听器开发</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/listener-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/listener-interface/</guid>
      <description>常规监听器 若作业处理作业服务器的文件，处理完成后删除文件，可考虑使用每个节点均执行清理任务。 此类型任务实现简单，且无需考虑全局分布式任务是否完成，应尽量使用此类型监听器。
public class MyJobListener implements ElasticJobListener { @Override public void beforeJobExecuted(ShardingContexts shardingContexts) { // do something ...  } @Override public void afterJobExecuted(ShardingContexts shardingContexts) { // do something ...  } @Override public String getType() { return &amp;#34;simpleJobListener&amp;#34;; } } 分布式监听器 若作业处理数据库数据，处理完成后只需一个节点完成数据清理任务即可。 此类型任务处理复杂，需同步分布式环境下作业的状态同步，提供了超时设置来避免作业不同步导致的死锁，应谨慎使用。
public class MyDistributeOnceJobListener extends AbstractDistributeOnceElasticJobListener { private static final long startTimeoutMills = 3000; private static final long completeTimeoutMills = 3000; public MyDistributeOnceJobListener() { super(startTimeoutMills, completeTimeoutMills); } @Override public void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts) { // do something .</description>
    </item>
    
    <item>
      <title>使用 Java API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/java-api/</guid>
      <description>常规监听器 public class JobMain { public static void main(String[] args) { new ScheduleJobBootstrap(createRegistryCenter(), createJobConfiguration()).schedule(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;#34;zk_host:2181&amp;#34;, &amp;#34;elastic-job-demo&amp;#34;)); regCenter.init(); return regCenter; } private static JobConfiguration createJobConfiguration() { JobConfiguration jobConfiguration = JobConfiguration.newBuilder(&amp;#34;test&amp;#34;, 2) .jobListenerTypes(&amp;#34;simpleListener&amp;#34;, &amp;#34;distributeListener&amp;#34;).build(); } } 分布式监听器 public class JobMain { public static void main(String[] args) { new ScheduleJobBootstrap(createRegistryCenter(), createJobConfiguration()).schedule(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;#34;zk_host:2181&amp;#34;, &amp;#34;elastic-job-demo&amp;#34;)); regCenter.</description>
    </item>
    
    <item>
      <title>使用 Spring 命名空间</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-listener/spring-namespace/</guid>
      <description>监听器配置 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:elasticjob=&amp;#34;http://shardingsphere.apache.org/schema/elasticjob&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/elasticjob http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd &amp;#34;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;elasticjob:zookeeper id=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;yourhost:2181&amp;#34; namespace=&amp;#34;my-job&amp;#34; base-sleep-time-milliseconds=&amp;#34;1000&amp;#34; max-sleep-time-milliseconds=&amp;#34;3000&amp;#34; max-retries=&amp;#34;3&amp;#34; /&amp;gt; &amp;lt;!-- 配置作业 Bean --&amp;gt; &amp;lt;bean id=&amp;#34;myJob&amp;#34; class=&amp;#34;xxx.MyJob&amp;#34; /&amp;gt; &amp;lt;elasticjob:job id=&amp;#34;${myJob.id}&amp;#34; job-ref=&amp;#34;myJob&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; sharding-total-count=&amp;#34;3&amp;#34; cron=&amp;#34;0/1 * * * * ?&amp;#34; job-listener-types=&amp;#34;simpleJobListener,distributeOnceJobListener&amp;#34;&amp;gt; &amp;lt;/elasticjob:job&amp;gt; &amp;lt;/beans&amp;gt; 作业启动 将配置 Spring 命名空间的 xml 通过 Spring 启动，作业将自动加载。</description>
    </item>
    
  </channel>
</rss>
