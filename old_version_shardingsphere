commit 2f1ddffea298d732bded922c8037c5598fc8433a
Author: LJ <97254796+DIDA-lJ@users.noreply.github.com>
Date:   Sat May 25 18:20:34 2024 +0800

    According to semantics, modify unreasonable format errors in the document. (#31384)
    
    * Update 2022_06_16_Understanding_Apache_ShardingSphere's_SPI_and_why_it’s_simpler_than_Dubbo’s.en.md
    
    According to the meaning of the documentation, there is no need for a list to delete the document.
    
    * Update 2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
    
    Modify unreasonable segmentation errors in the document.
    
    * Update 2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
    
    Modify the related division as a three -level title.

diff --git "a/docs/blog/content/material/2022_06_16_Understanding_Apache_ShardingSphere's_SPI_and_why_it\342\200\231s_simpler_than_Dubbo\342\200\231s.en.md" "b/docs/blog/content/material/2022_06_16_Understanding_Apache_ShardingSphere's_SPI_and_why_it\342\200\231s_simpler_than_Dubbo\342\200\231s.en.md"
index d7402de2041..5a21010b5f2 100644
--- "a/docs/blog/content/material/2022_06_16_Understanding_Apache_ShardingSphere's_SPI_and_why_it\342\200\231s_simpler_than_Dubbo\342\200\231s.en.md"
+++ "b/docs/blog/content/material/2022_06_16_Understanding_Apache_ShardingSphere's_SPI_and_why_it\342\200\231s_simpler_than_Dubbo\342\200\231s.en.md"
@@ -50,7 +50,7 @@ We can see now that Dubbo’s Java SPI is completely different from the JDK SPI.
 
 Unlike the Dubbo implementation concept, ShardingSphere extends the JDK SPI with less code.
 
-1. The configuration is exactly the same as in the Java SPI.
+The configuration is exactly the same as in the Java SPI.
 Let’s take the `DialectTableMetaDataLoader` interface implementation class as an example:
 
 `DialectTableMetaDataLoader.class`
diff --git a/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md b/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
index 731767727db..87daac6f109 100644
--- a/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
+++ b/docs/blog/content/material/2022_06_28_Cloud_native_deployment_for_a_high-performance_data_gateway_new_API_driver_Apache_ShardingSphere_5.1.2_is_released.en.md
@@ -19,7 +19,8 @@ In addition to the above-mentioned new features, this update also improves SQL p
 This post will give you an overview of the ShardingSphere 5.1.2 updates.
 
 ## New Features
-**ShardingSphere-Proxy configuration using Helm**
+### **ShardingSphere-Proxy configuration using Helm**
+
 ShardingSphere-Proxy provides Docker images for deployment in containers. However, for those who need to deploy ShardingSphere-Proxy on [Kubernetes](https://kubernetes.io/), you have to go through some procedures such as database driver mounting, configuration mounting, custom algorithm mounting, etc., which make the deployment process relatively tedious and causes high operation & maintenance costs.
 
 This update brings the new ShardingSphere-Proxy Helm Chart, a new feature donated to the Apache ShardingSphere community by [SphereEx](https://www.sphere-ex.com/), a provider of enterprise-grade, cloud-native data-enhanced computing products, and solutions. This development allows Apache ShardingSphere to embrace ahead cloud-native computing.
@@ -32,7 +33,8 @@ Due to the limits imposed by open source protocol, ShardingSphere-Proxy’s bina
 
 For such cases, ShardingSphere-Proxy Helm Chart can automatically obtain the MySQL JDBC driver in the Pod’s Init container, reducing your deployment operation costs.
 
-**SQL dialect translation**
+### **SQL dialect translation**
+
 With increased database diversification, the coexistence of multiple types of databases is now the norm. The scenarios in which heterogeneous databases are accessed using one SQL dialect are becoming a trend.
 
 The existence of multiple diversified databases makes it difficult to standardize SQL dialects for accessing databases, meaning that engineers need to use different dialects for different types of databases - lacking a unified query platform.
@@ -68,25 +70,29 @@ Connection conn = dataSource.getConnection();
 ```
 
 ## Optimizations of the existing capabilities
-**Kernel**
+### **Kernel**
+
 In this update, ShardingSphere merged lots of PRs to improve SQL parsing support. SQL parsing optimizations take up a large proportion of the update log.
 
 ShardingSphere provided preliminary support for PostgreSQL / openGauss schema in 5.1.1.
 
 In this 5.1.2 update, the kernel, cluster mode, and auto-scaling support for PostgreSQL / openGauss schema has been improved. For example, support for schema structure has been added to metadata pairs, and schema customization is also supported in kernel and auto-scaling.
 
-**ShardingSphere-Proxy**
+### **ShardingSphere-Proxy**
+
 As the market for servers using ARM CPUs becomes more popular, ShardingSphere-Proxy also provides images for arm64 architecture on Docker as well.
 
 When it comes to MySQL, ShardingSphere-Proxy fixed the issue where packets longer than 8 MB could not be received, and further supports receiving data larger than 16 MB in total.
 
-**Auto-scaling**
+### **Auto-scaling**
+
 In addition to supporting PostgreSQL schema customization, auto-scaling also implements automatic table creation when migrating PostgreSQL, and fixes the problem where PostgreSQL incremental migration would report errors when encountering null fields values. In addition to these features, auto-scaling also reduces resource consumption during migration and provides support for incremental migration in openGauss 3.0.
 
 ## Release notes
 The full release note for ShardingSphere 5.1.2 can be found in the following sections. Note that this update adjusts a small number of APIs, so please refer to the API Adjustments section for more details.
 
-**New Features**
+### **New Features**
+
 Kernel: alpha version of SQL dialect conversion for MySQL and PostgreSQL.
 
 Kernel: Support for PostgreSQL and openGauss custom schema.
@@ -115,7 +121,8 @@ Operation mode: Governance Center supports PG/openGauss three-level structure.
 
 Operation mode: Governance Center supports Database level distributed locking.
 
-**Optimization**
+### **Optimization**
+
 Kernel: support for PostgreSQL and openGauss copy statements.
 
 Kernel: support for PostgreSQL alter/ drop index statements.
