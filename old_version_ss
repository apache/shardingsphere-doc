commit 830dfc8d8e63909a59ef8b1cd45ba7bf8b1a6ef4
Author: Liang Zhang <zhangliang@apache.org>
Date:   Sun May 12 17:07:16 2024 +0800

    Fix code inspection for test module (#31216)

diff --git a/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md b/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
index 5d2a35884ed..5d07f2f5efa 100644
--- a/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
+++ b/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
@@ -55,7 +55,7 @@ Currently, more than 170 companies are using ShardingSphere. This article is bas
 ## System Architecture and Data Flow
 As shown in Figure 2, ShardingSphere can be divided into five modules:
 
-1. **dData source:** It enables storage by integrating various databases and currently supports data sources such as MySQL, PostgreSQL, SQL Server, Oracle, MariaDB and openGuass.
+1. **dData source:** It enables storage by integrating various databases and currently supports data sources such as MySQL, PostgreSQL, SQL Server, Oracle, MariaDB and openGauss.
 2. **Function:** It provides many out-of-the-box features that can be freely added, combined, or deleted as needed.
 3. **Governor** is mainly used for configuration management and health monitoring.
 4. **SQL engine.** With the complete data sharding SQL engine, all functions are pluggable, and any function can be implemented through a SQL statement.
diff --git "a/docs/blog/content/material/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy\342\200\231s_Authentication.en.md" "b/docs/blog/content/material/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy\342\200\231s_Authentication.en.md"
index 93bef78784d..8e89b63dd60 100644
--- "a/docs/blog/content/material/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy\342\200\231s_Authentication.en.md"
+++ "b/docs/blog/content/material/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy\342\200\231s_Authentication.en.md"
@@ -175,7 +175,7 @@ Connection failed.
 
 We see that it’s actually due to the authentication protocol.
 
-The psql client requires md5 protocol authentication by default, but because Proxy requires the scram-sha-256 under the openGuass protocol, the negotiation fails and an exception is thrown.
+The psql client requires md5 protocol authentication by default, but because Proxy requires the scram-sha-256 under the openGauss protocol, the negotiation fails and an exception is thrown.
 
 ## Following Steps
 
@@ -229,7 +229,7 @@ Connection succeeded.
 
 ![img](https://shardingsphere.apache.org/blog/img/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy’s_Authentication.en.md8.jpeg)
 
-Now we see that `psql` has successfully connected to ShardingSphere-Proxy under the openGuass protocol.
+Now we see that `psql` has successfully connected to ShardingSphere-Proxy under the openGauss protocol.
 
 ![img](https://shardingsphere.apache.org/blog/img/2023_05_18_Enhancing_Database_Security_ShardingSphere-Proxy’s_Authentication.en.md9.jpeg)
 
diff --git a/docs/document/content/test-manual/pipeline-e2e-test/_index.en.md b/docs/document/content/test-manual/pipeline-e2e-test/_index.en.md
index 25bb7593306..065db93d5a3 100644
--- a/docs/document/content/test-manual/pipeline-e2e-test/_index.en.md
+++ b/docs/document/content/test-manual/pipeline-e2e-test/_index.en.md
@@ -14,7 +14,7 @@ Currently, NATIVE and DOCKER are available.
 1. NATIVE : Run on developer local machine. Need to start ShardingSphere-Proxy instance and database instance by developer. It could be used for local debugging.
 2. DOCKER : Run on docker started by Maven plugin. It could be used for GitHub Actions, and it could be used for local debugging too.
 
-Supported databases: MySQL, PostgreSQL and openGuass.
+Supported databases: MySQL, PostgreSQL and openGauss.
 
 ## User guide
 
