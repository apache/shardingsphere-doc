<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Concepts &amp; Features on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/en/features/</link>
    <description>Recent content in Concepts &amp; Features on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/elasticjob/current/en/features/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Schedule Model</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/schedule-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/schedule-model/</guid>
      <description>ElasticJob is a thread-level scheduling framework for in-process. Through it, Job can be transparently combined with business application systems. It can be easily used in conjunction with Java frameworks such as Spring and Dubbo. Spring DI (Dependency Injection) Beans can be freely used in Job, such as data source connection pool and Dubbo remote service, etc., which is more convenient for business development.</description>
    </item>
    
    <item>
      <title>Elastic Schedule</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/elastic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/elastic/</guid>
      <description>Elastic schedule is the most important feature in ElasticJob, which acts as a job processing system that enables the horizontal scaling of jobs by sharding, it&amp;rsquo;s also the origin of the project name &amp;ldquo;ElasticJob&amp;rdquo;.
Sharding A concept in ElasticJob to split the job, enabling the job to be executed in distributed environment, where every single server only executes one of the slice that is assigned to it. ElasticJob is aware of the number of servers in an almost-real-time manner, with the increment/decrement number of the servers, it re-assigns the job slices to the distributed servers, maximizing the efficiency as the increment of resources.</description>
    </item>
    
    <item>
      <title>Failover</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/failover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/failover/</guid>
      <description>ElasticJob will not re-shard during this execution, but wait for the next scheduling before starting the re-sharding process. When the server is down during job execution, failover allows the unfinished task to be compensated and executed on another job node.
Concept Failover is a temporary compensation execution mechanism for the currently executed job. When the next job is run, the current job allocation will be adjusted through resharding. For example, if the job is executed at an hourly interval, each execution will take 30 minutes.</description>
    </item>
    
    <item>
      <title>Misfire</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/misfire/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/misfire/</guid>
      <description>ElasticJob does not allow jobs to be executed at the same time. When the execution time of a job exceeds its running interval, re-executing the missed task can ensure that the job continues to execute the overdue job after completing the last task.
Concept The misfire function enables the overdue tasks to be executed immediately after the completion of the previous tasks. For example, if the job is executed at an hourly interval, each execution will take 30 minutes.</description>
    </item>
    
    <item>
      <title>Job Open Ecosystem</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/en/features/job-type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/en/features/job-type/</guid>
      <description>Flexible customized jobs is the most important design change in ElasticJob 3.x . The new version is based on the design concept of the Apache ShardingSphere pluggable architecture, and the new Job API was created. It is intended to enable developers to expand the types of jobs in a more convenient and isolated way, and create an ecosystem of ElasticJob jobs.
While ElasticJob provides functions such as elastic scaling and distributed management of jobs, it does not limit the types of jobs.</description>
    </item>
    
  </channel>
</rss>
