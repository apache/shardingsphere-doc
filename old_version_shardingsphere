commit 345e3177671bf28bdb2a0d32e8a6b686d5c484e6
Author: Ling Hengqian <linghengqian@outlook.com>
Date:   Thu Oct 3 09:24:14 2024 +0800

    Support running DistSQL under Proxy Native in the form of GraalVM Native Image (#33095)

diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
index f2f12789569..08570688f11 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
@@ -5,17 +5,22 @@ weight = 2
 
 ## 背景信息
 
-本节主要介绍如何通过 `GraalVM` 的 `native-image` 组件构建 ShardingSphere-Proxy 的 `Native Image` 和对应的 `Docker Image`。
+本节主要介绍如何通过 `GraalVM` 的 `native-image` 命令行工具构建 ShardingSphere Proxy 的 `GraalVM Native Image`，
+以及包含此 `GraalVM Native Image` 的 `Docker Image`。
+
+ShardingSphere Proxy 的 `GraalVM Native Image` 在本文即指代 ShardingSphere Proxy Native。
+
+GraalVM Native Image 的背景信息可参考 https://www.graalvm.org 。
 
 ## 注意事项
 
-- ShardingSphere Proxy 尚未准备好与 GraalVM Native Image 集成。 Proxy 的 Native Image 产物在
-  https://github.com/apache/shardingsphere/pkgs/container/shardingsphere-proxy-native 存在每夜构建。假设存在包
-  含`global.yaml` 的 `conf` 文件夹为 `./custom/conf`，你可通过如下的 `docker-compose.yml` 文件进行测试。
+本节涉及的所有 Docker Image 均不通过 https://downloads.apache.org ，https://repository.apache.org/ 等 ASF 官方渠道进行分发。
+Docker Image 仅在 `ghcr.io` 等下游渠道提供以方便使用。
 
-```yaml
-version: "3.8"
+Proxy 的 Native Image 产物在 https://github.com/apache/shardingsphere/pkgs/container/shardingsphere-proxy-native 存在每夜构建。
+假设存在包含 `global.yaml` 的 `conf` 文件夹为 `./custom/conf`，你可通过如下的 `docker-compose.yml` 文件进行测试。
 
+```yaml
 services:
   apache-shardingsphere-proxy-native:
     image: ghcr.io/apache/shardingsphere-proxy-native:latest
@@ -25,83 +30,107 @@ services:
       - "3307:3307"
 ```
 
-- 本节假定处于 Linux（amd64，aarch64），MacOS（amd64，aarch64/M1）或 Windows（amd64）环境。
+ShardingSphere Proxy Native 可执行 DistSQL，这意味着实际上不需要任何定义逻辑数据库的 YAML 文件。
+
+默认情况下，ShardingSphere Proxy Native 的 GraalVM Native Image 中仅包含，
+
+1. ShardingSphere 维护的自有及部分第三方依赖的 GraalVM Reachability Metadata
+2. H2database, OpenGauss 和 PostgreSQL 的 JDBC Driver
+3. HikariCP 的数据库连接池
+4. Logback 的日志框架
+
+如果用户需要在 ShardingSphere Proxy Native 中使用第三方 JAR，则需要修改 `distribution/proxy-native/pom.xml` 的内容，以构建以下的任意输出，
+
+1. 自定义的 GraalVM Native Image
+2. 包含自定义的 GraalVM Native Image 的自定义 Docker Image
 
-- 本节依然受到 ShardingSphere JDBC 一侧的 [GraalVM Native Image](/cn/user-manual/shardingsphere-jdbc/graalvm-native-image) 的已记录内容的限制。
+本节假定处于以下的系统环境之一，
+
+1. Linux（amd64，aarch64）
+2. MacOS（amd64，aarch64/M1）
+3. Windows（amd64）
+
+若处于 Linux（riscv64）等 Graal compiler 不支持的系统环境，
+请根据 https://medium.com/graalvm/graalvm-native-image-meets-risc-v-899be38eddd9 的内容启用 LLVM backend 来使用 LLVM compiler。
+
+本节依然受到 ShardingSphere JDBC 一侧的 [GraalVM Native Image](/cn/user-manual/shardingsphere-jdbc/graalvm-native-image) 的已记录内容的限制。
 
 ## 前提条件
 
-1. 根据 https://www.graalvm.org/downloads/ 要求安装和配置 JDK 23 对应的 `GraalVM Community Edition`
-   或 `GraalVM Community Edition` 的下游发行版。若使用 `SDKMAN!`，
+1. 根据 https://www.graalvm.org/downloads/ 要求安装和配置 JDK 22 对应的 `GraalVM Community Edition` 或 `GraalVM Community Edition` 的下游发行版。
+若使用 `SDKMAN!`，
 
 ```shell
-sdk install java 23-graalce
+sdk install java 22.0.2-graalce
+sdk use java 22.0.2-graalce
 ```
 
 2. 根据 https://www.graalvm.org/jdk23/reference-manual/native-image/#prerequisites 的要求安装本地工具链。
 
-3. 如果需要构建 Docker Image， 确保 `docker-ce` 已安装。
+3. 如果需要构建 Docker Image， 确保 `Docker Engine` 已安装。
 
 ## 操作步骤
 
 1. 获取 Apache ShardingSphere Git Source
 
-- 在[下载页面](https://shardingsphere.apache.org/document/current/en/downloads/)
-  或 https://github.com/apache/shardingsphere/tree/master 获取。
+在[下载页面](https://shardingsphere.apache.org/document/current/en/downloads/)或 https://github.com/apache/shardingsphere/tree/master 获取。
 
 2. 在命令行构建产物, 分两种情形。
 
-- 情形一：不需要使用存在 SPI 实现的 JAR 或第三方依赖的 JAR
-
-- 在 Git Source 同级目录下执行如下命令, 直接完成 Native Image 的构建。
+情形一：不需要使用存在自定义 SPI 实现的 JAR 或第三方依赖的 JAR 。在 Git Source 同级目录下执行如下命令, 直接完成 Native Image 的构建。
 
 ```bash
+cd ./shardingsphere/
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native -DskipTests clean package
 ```
 
-- 情形二：需要使用存在 SPI 实现的 JAR 或 GPL V2 等 LICENSE 的第三方依赖的 JAR。
+情形二：需要使用存在自定义 SPI 实现的 JAR 或第三方依赖的 JAR。在 `distribution/proxy-native/pom.xml` 的 `dependencies` 加入如下选项之一，
 
-- 在 `distribution/proxy-native/pom.xml` 的 `dependencies` 加入存在 SPI 实现的 JAR
-  或第三方依赖的 JAR。示例如下
+(1) 存在 SPI 实现的 JAR
+(2) 第三方依赖的 JAR
 
-```xml
+示例如下，这些 JAR 应预先置入本地 Maven 仓库或 Maven Central 等远程 Maven 仓库。
 
+```xml
 <dependencies>
-  <dependency>
-    <groupId>com.mysql</groupId>
-    <artifactId>mysql-connector-j</artifactId>
-    <version>8.1.0</version>
-  </dependency>
+    <dependency>
+        <groupId>com.mysql</groupId>
+        <artifactId>mysql-connector-j</artifactId>
+        <version>9.0.0</version>
+    </dependency>
 </dependencies>
 ```
 
-- 通过命令行构建 GraalVM Native Image。
+随后通过命令行构建 GraalVM Native Image。
 
 ```bash
+cd ./shardingsphere/
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native -DskipTests clean package
 ```
 
-3. 通过命令行启动 Native Image, 需要带上 4 个参数。
-   第一个参数为 ShardingSphere Proxy 使用的端口，第二个参数为你编写的包含 `global.yaml` 的 `/conf` 文件夹，
-   第三个参数为绑定端口的 Address，第四个参数为 Force Start，如果为 true 则保证 ShardingSphere Proxy Native 无论能否连接都能正常启动。
-   假设已存在文件夹`./custom/conf`，示例为
+3. 通过命令行启动 Native Image, 需要带上 4 个参数，
+   第 1 个参数为 ShardingSphere Proxy Native 使用的端口，
+   第 2 个参数为用户编写的包含 `global.yaml` 配置文件的文件夹，
+   第 3 个参数为要侦听的主机，如果为 `0.0.0.0` 则允许任意数据库客户端均可访问 ShardingSphere Proxy Native
+   第 4 个参数为 Force Start，如果为 `true` 则保证 ShardingSphere Proxy Native 无论能否连接都能正常启动。
+
+假设已存在文件夹`./custom/conf`，示例为，
 
 ```bash
-./apache-shardingsphere-proxy-native 3307 ./custom/conf "0.0.0.0" false
+cd ./shardingsphere/
+cd ./distribution/proxy-native/target/apache-shardingsphere-5.5.1-SNAPSHOT-shardingsphere-proxy-native-bin/
+./proxy-native "3307" "./custom/conf" "0.0.0.0" "false"
 ```
 
-4. 如果需要构建 Docker Image, 在添加存在 SPI 实现的依赖或第三方依赖后, 在命令行执行如下命令。
+4. 如果需要构建 Docker Image, 在添加存在 SPI 实现的依赖或第三方依赖后, 在命令行执行如下命令，
 
 ```shell
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native,docker.native -DskipTests clean package
 ```
 
-- 假设存在包含`global.yaml` 的 `conf` 文件夹为 `./custom/conf`，可通过如下的 `docker-compose.yml` 文件启动 GraalVM Native
-  Image 对应的 Docker Image。
+假设存在包含 `global.yaml` 的 `conf` 文件夹为 `./custom/conf`，可通过如下的 `docker-compose.yml` 文件启动包含 GraalVM Native Image 的 Docker Image。
 
 ```yaml
-version: "3.8"
-
 services:
   apache-shardingsphere-proxy-native:
     image: apache/shardingsphere-proxy-native:latest
@@ -111,25 +140,23 @@ services:
       - "3307:3307"
 ```
 
-- 如果你不对 Git Source 做任何更改， 上文提及的命令将使用 `oraclelinux:9-slim` 作为 Base Docker Image。
-  但如果你希望使用 `busybox:glic`，`gcr.io/distroless/base` 或 `scratch` 等更小体积的 Docker Image 作为 Base Docker
-  Image，你需要根据 https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/ 的要求，
-  做为 `pom.xml`的 `native profile` 添加 `-H:+StaticExecutableWithDynamicLibC` 的 `jvmArgs` 等操作。
-  另请注意，某些第三方依赖将需要在 `Dockerfile` 安装更多系统库，例如 `libdl`。
-  因此请确保根据你的使用情况调整 `distribution/proxy-native` 下的 `pom.xml` 和 `Dockerfile` 的内容。
+如果你不对 Git Source 做任何更改， 上文提及的命令将使用 `oraclelinux:9-slim` 作为 Base Docker Image。
+但如果你希望使用 `busybox:glic`，`gcr.io/distroless/base` 或 `scratch` 等更小体积的 Docker Image 作为 Base Docker
+Image，你需要根据 https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/ 的要求，
+做为 `pom.xml`的 `native profile` 添加 `-H:+StaticExecutableWithDynamicLibC` 的 `jvmArgs` 等操作。
+另请注意，某些第三方依赖将需要在 `Dockerfile` 安装更多系统库，例如 `libdl`。
+因此请确保根据你的使用情况调整 `distribution/proxy-native` 下的 `pom.xml` 和 `Dockerfile` 的内容。
 
 ## 可观察性
 
-针对 GraalVM Native Image 形态的 ShardingSphere Proxy，其提供的可观察性的能力与
-[可观察性](/cn/user-manual/shardingsphere-proxy/observability) 并不一致。
+针对 GraalVM Native Image 形态的 ShardingSphere Proxy，其提供的可观察性的能力与[可观察性](/cn/user-manual/shardingsphere-proxy/observability)并不一致。
 
-你可以使用 https://www.graalvm.org/jdk23/tools/ 提供的一系列命令行工具或可视化工具观察 GraalVM Native Image 的内部行为，
-并根据其要求使用 VSCode 完成调试工作。如果你正在使用 IntelliJ IDEA 并且希望调试生成的 GraalVM Native Image，你可以关注
-https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java
-及其后继。如果你使用的不是 Linux，则无法对 GraalVM Native Image 进行 Debug，请关注尚未关闭的
-https://github.com/oracle/graal/issues/5648 。
+用户可以使用 https://www.graalvm.org/jdk23/tools/ 提供的一系列命令行工具或可视化工具观察 GraalVM Native Image 的内部行为，
+并根据其要求使用 VSCode 完成调试工作。如果用户正在使用 IntelliJ IDEA 并且希望调试生成的 GraalVM Native Image，
+用户可以关注 https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java 及其后继。
+如果用户使用的不是 Linux，则无法对 GraalVM Native Image 进行 Debug，请关注尚未关闭的 https://github.com/oracle/graal/issues/5648 。
 
-对于使用 `ShardingSphere Agent` 等 Java Agent 的情形， GraalVM 的 `native-image` 组件尚未完全支持在构建 Native
-Image 时使用 javaagent，你需要关注尚未关闭的 https://github.com/oracle/graal/issues/1065 。
+对于使用 `ShardingSphere Agent` 等 Java Agent 的情形， GraalVM 的 `native-image` 组件尚未完全支持在构建 Native Image 时使用 javaagent，
+用户需要关注尚未关闭的 https://github.com/oracle/graal/issues/1065 。
 
 若用户期望在 ShardingSphere Proxy Native 下使用这类 Java Agent，则需要关注 https://github.com/oracle/graal/pull/8077 涉及的变动。
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
index 2ce594e5f8b..0ea7e5f2604 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
@@ -5,19 +5,22 @@ weight = 2
 
 ## Background
 
-This section mainly introduces how to build the `Native Image` of ShardingSphere-Proxy and the
-corresponding `Docker Image` through the `native-image` component of `GraalVM`.
+This section mainly introduces it how to build the `GraalVM Native Image` of ShardingSphere Proxy through the `native-image` command line tool of `GraalVM`,
+and the `Docker Image` containing this `GraalVM Native Image`.
+
+The `GraalVM Native Image` of ShardingSphere Proxy refers to ShardingSphere Proxy Native in this article.
+
+For background information about GraalVM Native Image, please refer to https://www.graalvm.org .
 
 ## Notice
 
-- ShardingSphere Proxy is not yet ready to integrate with GraalVM Native Image. Proxy's Native Image artifacts are
-  built nightly at https://github.com/apache/shardingsphere/pkgs/container/shardingsphere-proxy-native .
-  Assuming there is a `conf` folder containing `global.yaml` as `./custom/conf`, you can test it with the
-  following `docker-compose.yml` file.
+All Docker Images mentioned in this section are not distributed through ASF official channels such as https://downloads.apache.org and https://repository.apache.org/ .
+Docker Images are only provided on downstream channels such as `ghcr.io` for convenience.
 
-````yaml
-version: "3.8"
+Native Image products of Proxy exist in nightly builds at https://github.com/apache/shardingsphere/pkgs/container/shardingsphere-proxy-native .
+Assuming that there is a `conf` folder containing `global.yaml` as `./custom/conf`, you can test it with the following `docker-compose.yml` file.
 
+```yaml
 services:
   apache-shardingsphere-proxy-native:
     image: ghcr.io/apache/shardingsphere-proxy-native:latest
@@ -25,89 +28,113 @@ services:
       - ./custom/conf:/opt/shardingsphere-proxy-native/conf
     ports:
       - "3307:3307"
-````
+```
+
+ShardingSphere Proxy Native can execute DistSQL, which means that no YAML file that defines the logical database is actually required.
+
+By default, the GraalVM Native Image of ShardingSphere Proxy Native only contains,
+
+1. GraalVM Reachability Metadata maintained by ShardingSphere and some third-party dependencies
+2. JDBC Driver for H2database, OpenGauss and PostgreSQL
+3. HikariCP database connection pool
+4. Logback logging framework
+
+If the user needs to use third-party JAR in ShardingSphere Proxy Native, 
+the content of `distribution/proxy-native/pom.xml` needs to be modified to build any of the following outputs,
+
+1. Customized GraalVM Native Image
+2. Customized Docker Image containing customized GraalVM Native Image
 
-- This section assumes a Linux (amd64, aarch64), MacOS (amd64, aarch64/M1) or Windows (amd64) environment.
+This section assumes that you are in one of the following system environments:
 
-- This section is still subject to the documented content of [GraalVM Native Image](/en/user-manual/shardingsphere-jdbc/graalvm-native-image) on the ShardingSphere JDBC side.
+1. Linux (amd64, aarch64)
+2. MacOS (amd64, aarch64/M1)
+3. Windows (amd64)
+
+If you are in a system environment that Graal compiler does not support, such as Linux (riscv64),
+please enable LLVM backend according to the content of https://medium.com/graalvm/graalvm-native-image-meets-risc-v-899be38eddd9 to use the LLVM compiler.
+
+This section is still limited by the documented content of the [GraalVM Native Image](/us/user-manual/shardingsphere-jdbc/graalvm-native-image) on the ShardingSphere JDBC side.
 
 ## Premise
 
-1. Install and configure `GraalVM Community Edition` or a downstream distribution of `GraalVM Community Edition` for
-JDK 23 according to https://www.graalvm.org/downloads/. If `SDKMAN!` is used,
+1. Install and configure `GraalVM Community Edition` or a downstream distribution of `GraalVM Community Edition` for JDK 22 according to https://www.graalvm.org/downloads/ .
+   If using `SDKMAN!`,
 
 ```shell
-sdk install java 23-graalce
+sdk install java 22.0.2-graalce
+sdk use java 22.0.2-graalce
 ```
 
-2. Install the local toolchain as required by https://www.graalvm.org/jdk23/reference-manual/native-image/#prerequisites.
+2. Install the native toolchain according to https://www.graalvm.org/jdk23/reference-manual/native-image/#prerequisites .
 
-3. If you need to build a Docker Image, make sure `docker-ce` is installed.
+3. If you need to build a Docker Image, make sure `Docker Engine` is installed.
 
 ## Steps
 
 1. Get Apache ShardingSphere Git Source
 
-- Get it at the [download page](https://shardingsphere.apache.org/document/current/en/downloads/)
-  or https://github.com/apache/shardingsphere/tree/master.
+Get it from [Download page](https://shardingsphere.apache.org/document/current/en/downloads/) or https://github.com/apache/shardingsphere/tree/master .
 
-2. Build the product on the command line, in two cases.
+2. Build the product in the command line, divided into two cases.
 
-- Scenario 1: No need to use JARs with SPI implementations or 3rd party dependencies
-
-- Execute the following command in the same directory of Git Source to directly complete the construction of Native
-  Image.
+Case 1: No need to use JAR with custom SPI implementation or third-party dependent JAR. Execute the following command in the same directory as Git Source to directly complete the construction of Native Image.
 
 ```bash
+cd ./shardingsphere/
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native -DskipTests clean package
 ```
 
-- Scenario 2: It is necessary to use a JAR that has an SPI implementation or a third-party dependent JAR of a LICENSE
-  such as GPL V2.
+Case 2: Need to use JAR with custom SPI implementation or third-party dependent JAR. Add one of the following options to the `dependencies` of `distribution/proxy-native/pom.xml`:
 
-- Add SPI implementation JARs or third-party dependent JARs to `dependencies`
-  in `distribution/proxy-native/pom.xml`. Examples are as follows
+(1) JARs with SPI implementations
+(2) JARs with third-party dependencies
 
-```xml
+The examples are as follows. 
+These JARs should be pre-placed in the local Maven repository or a remote Maven repository such as Maven Central.
 
+```xml
 <dependencies>
     <dependency>
         <groupId>com.mysql</groupId>
         <artifactId>mysql-connector-j</artifactId>
-        <version>8.1.0</version>
+        <version>9.0.0</version>
     </dependency>
 </dependencies>
 ```
 
-- Build GraalVM Native Image via command line.
+Then build the GraalVM Native Image through the command line.
 
 ```bash
+cd ./shardingsphere/
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native -DskipTests clean package
 ```
 
-3. To start Native Image through the command line, you need to bring 4 parameters. The first parameter is the `Port`
-   used by ShardingSphere Proxy, the second parameter is the `/conf` folder containing `global.yaml` written by you, the
-   third parameter is the `Address` of the bound port, and the fourth parameter is `Force Start`, if it is true, it will
-   ensure that ShardingSphere Proxy Native can start normally no matter whether it is connected or not. Assuming the
-   folder `./custom/conf` already exists, the example is
+3. To start Native Image through the command line, you need to bring 4 parameters.
+   The first parameter is the port used by ShardingSphere Proxy Native.
+   The second parameter is the folder containing the `global.yaml` configuration file written by the user.
+   The third parameter is the host to listen to. If it is `0.0.0.0`, any database client is allowed to access ShardingSphere Proxy Native.
+   The fourth parameter is Force Start. If it is `true`, it ensures that ShardingSphere Proxy Native can start normally regardless of whether it can be connected.
+
+Assuming the folder `./custom/conf` already exists, the example is.
 
 ```bash
-./apache-shardingsphere-proxy-native 3307 ./custom/conf "0.0.0.0" false
-````
+cd ./shardingsphere/
+cd ./distribution/proxy-native/target/apache-shardingsphere-5.5.1-SNAPSHOT-shardingsphere-proxy-native-bin/
+./proxy-native "3307" "./custom/conf" "0.0.0.0" "false"
+```
 
-4. If you need to build a Docker Image, execute the following command on the command line after adding dependencies that
-   exist for SPI implementation or third-party dependencies.
+4. If you need to build a Docker Image, after adding the dependencies that have SPI implementation or third-party dependencies, 
+   execute the following command in the command line:
 
 ```shell
 ./mvnw -am -pl distribution/proxy-native -T1C -Prelease.native,docker.native -DskipTests clean package
 ```
 
-- Assuming that there is a `conf` folder containing `global.yaml` as `./custom/conf`, you can start the Docker Image
-  corresponding to GraalVM Native Image through the following `docker-compose.yml` file.
+Assuming that there is a conf folder called `./custom/conf` containing `global.yaml`, 
+you can start the Docker Image containing the GraalVM Native Image using the following `docker-compose.yml` file,
 
 ```yaml
-version: "3.8"
-
 services:
   apache-shardingsphere-proxy-native:
     image: apache/shardingsphere-proxy-native:latest
@@ -117,28 +144,25 @@ services:
       - "3307:3307"
 ```
 
-- If you don't make any changes to the Git Source, the commands mentioned above will use `oraclelinux:9-slim` as the
-  Base Docker Image. But if you want to use a smaller Docker Image like `busybox:glic`, `gcr.io/distroless/base` or
-  `scratch` as the Base Docker Image, you need according
-  to https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/,
-  add operations such as `-H:+StaticExecutableWithDynamicLibC` to `jvmArgs` as the `native profile` of `pom.xml`.
-  Also note that some 3rd-party dependencies will require more system libraries such as `libdl` to be installed in
-  the `Dockerfile`. So make sure to tune `distribution/proxy-native` according to your usage `pom.xml` and `Dockerfile`
-  below.
+If you do not make any changes to the Git Source, 
+the commands mentioned above will use `oraclelinux:9-slim` as the Base Docker Image.
+But if you want to use a smaller Docker Image such as `busybox:glic`, 
+`gcr.io/distroless/base` or `scratch` as the Base Docker Image, 
+you need to follow the requirements of https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/ and add `-H:+StaticExecutableWithDynamicLibC` to the `jvmArgs` of the `native profile` in `pom.xml`.
+Also note that some third-party dependencies will require more system libraries to be installed in the `Dockerfile`, such as `libdl`.
+So make sure to adjust the contents of `pom.xml` and `Dockerfile` under `distribution/proxy-native` according to your usage.
 
 ## Observability
 
-ShardingSphere for GraalVM Native Image form Proxy, which provides observability capabilities
-with [Observability](/en/user-manual/shardingsphere-proxy/observability) not consistent.
+The observability provided by ShardingSphere Proxy in the form of GraalVM Native Image is not consistent with [observability](/cn/user-manual/shardingsphere-proxy/observability).
 
-You can observe GraalVM Native Image using a series of command line tools or visualization tools available
-at https://www.graalvm.org/jdk23/tools/, and use VSCode to debug it according to its requirements.
-If you are using IntelliJ IDEA and want to debug the generated GraalVM Native Image, You can follow
-https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java
-and its successors. If you are not using Linux, you cannot debug GraalVM Native Image, please pay attention
-to https://github.com/oracle/graal/issues/5648 which has not been closed yet.
+Users can use a series of command-line tools or visualization tools provided by https://www.graalvm.org/jdk23/tools/ to observe the internal behavior of GraalVM Native Image,
+and use VSCode to complete debugging work according to their requirements. 
+If users are using IntelliJ IDEA and want to debug the generated GraalVM Native Image,
+users can follow https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java and its successors.
+If users are not using Linux, they cannot debug GraalVM Native Image. Please follow https://github.com/oracle/graal/issues/5648 which has not been closed.
 
-For the use of Java Agents such as `ShardingSphere Agent`, GraalVM's `native-image` component does not yet fully support building Native
-when using javaagent with Image, you need to pay attention to https://github.com/oracle/graal/issues/1065 which has not yet been closed.
+For Java Agents such as `ShardingSphere Agent`, the `native-image` component of GraalVM does not fully support the use of javaagent when building Native Image.
+Users need to pay attention to https://github.com/oracle/graal/issues/1065 which has not been closed.
 
-If users expect to use this type of Java Agent under ShardingSphere Proxy Native, they need to pay attention to the changes involved in https://github.com/oracle/graal/pull/8077 .
+If users expect to use such Java Agents under ShardingSphere Proxy Native, they need to pay attention to the changes involved in https://github.com/oracle/graal/pull/8077 .
