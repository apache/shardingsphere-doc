<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分片 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/</link>
    <description>Recent content in 分片 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CREATE SHARDING ALGORITHM</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-algorithm/</guid>
      <description>描述 CREATE SHARDING ALGORITHM 语法用于为当前所选的逻辑库添加分片算法
语法定义 CreateShardingAlgorithm ::= &amp;#39;CREATE&amp;#39; &amp;#39;SHARDING&amp;#39; &amp;#39;ALGORITHM&amp;#39; shardingAlgorithmName &amp;#39;(&amp;#39; algorithmDefinition &amp;#39;)&amp;#39; algorithmDefinition ::= &amp;#39;TYPE&amp;#39; &amp;#39;(&amp;#39; &amp;#39;NAME&amp;#39; &amp;#39;=&amp;#39; algorithmType ( &amp;#39;,&amp;#39; &amp;#39;PROPERTIES&amp;#39; &amp;#39;(&amp;#39; propertyDefinition &amp;#39;)&amp;#39; )?&amp;#39;)&amp;#39; propertyDefinition ::= ( key &amp;#39;=&amp;#39; value ) ( &amp;#39;,&amp;#39; key &amp;#39;=&amp;#39; value )* shardingAlgorithmName ::= identifier algorithmType ::= identifier 补充说明  algorithmType 为分片算法类型，详细的分片算法类型信息请参考分片算法  示例 1.创建分片算法 -- 创建类型为 INLINE 的分片算法 CREATE SHARDING ALGORITHM inline_algorithm ( TYPE(NAME=inline, PROPERTIES(&amp;#34;algorithm-expression&amp;#34;=&amp;#34;t_order_${user_id % 2}&amp;#34;)) ); -- 创建类型为 AUTO_INTERVAL 的分片算法 CREATE SHARDING ALGORITHM interval_algorithm ( TYPE(NAME=auto_interval, PROPERTIES(&amp;#34;datetime-lower&amp;#34;=&amp;#34;2022-01-01 00:00:00&amp;#34;, &amp;#34;datetime-upper&amp;#34;=&amp;#34;2022-01-03 00:00:00&amp;#34;, &amp;#34;sharding-seconds&amp;#34;=&amp;#34;86400&amp;#34;)) ); 保留字 CREATE、SHARDING、ALGORITHM、TYPE、NAME、PROPERTIES 相关链接  保留字  </description>
    </item>
    
    <item>
      <title>CREATE SHARDING TABLE RULE</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-table-rule/</guid>
      <description>描述 CREATE SHARDING TABLE RULE 语法用于为当前所选逻辑库添加分片规则
语法定义 CreateShardingTableRule ::= &amp;#39;CREATE&amp;#39; &amp;#39;SHARDING&amp;#39; &amp;#39;TABLE&amp;#39; &amp;#39;RULE&amp;#39; ( tableDefinition | autoTableDefinition ) ( &amp;#39;,&amp;#39; ( tableDefinition | autoTableDefinition ) )* tableDefinition ::= tableName &amp;#39;(&amp;#39; &amp;#39;DATANODES&amp;#39; &amp;#39;(&amp;#39; dataNode ( &amp;#39;,&amp;#39; dataNode )* &amp;#39;)&amp;#39; ( &amp;#39;,&amp;#39; &amp;#39;DATABASE_STRATEGY&amp;#39; &amp;#39;(&amp;#39; strategyDefinition &amp;#39;)&amp;#39; )? ( &amp;#39;,&amp;#39; &amp;#39;TABLE_STRATEGY&amp;#39; &amp;#39;(&amp;#39; strategyDefinition &amp;#39;)&amp;#39; )? ( &amp;#39;,&amp;#39; &amp;#39;KEY_GENERATE_STRATEGY&amp;#39; &amp;#39;(&amp;#39; keyGenerateStrategyDefinition &amp;#39;)&amp;#39; )? &amp;#39;)&amp;#39; autoTableDefinition ::= tableName &amp;#39;(&amp;#39; &amp;#39;RESOURCES&amp;#39; &amp;#39;(&amp;#39; resourceName ( &amp;#39;,&amp;#39; resourceName )* &amp;#39;)&amp;#39; &amp;#39;,&amp;#39; &amp;#39;SHARDING_COLUMN&amp;#39; &amp;#39;=&amp;#39; columnName &amp;#39;,&amp;#39; algorithmDefinition ( &amp;#39;,&amp;#39; &amp;#39;KEY_GENERATE_STRATEGY&amp;#39; &amp;#39;(&amp;#39; keyGenerateStrategyDefinition &amp;#39;)&amp;#39; )?</description>
    </item>
    
    <item>
      <title>CREATE DEFAULT SHARDING STRATEGY</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-default-sharding-strategy/</guid>
      <description>描述 CREATE DEFAULT SHARDING STRATEGY 语法用于创建默认的分片策略
语法定义 CreateDefaultShardingStrategy ::= &amp;#39;CREATE&amp;#39; &amp;#39;DEFAULT&amp;#39; &amp;#39;SHARDING&amp;#39; (&amp;#39;DATABASE&amp;#39; | &amp;#39;TABLE&amp;#39;) &amp;#39;STRATEGY&amp;#39; &amp;#39;(&amp;#39; shardingStrategy &amp;#39;)&amp;#39; shardingStrategy ::= &amp;#39;TYPE&amp;#39; &amp;#39;=&amp;#39; strategyType &amp;#39;,&amp;#39; ( &amp;#39;SHARDING_COLUMN&amp;#39; &amp;#39;=&amp;#39; columnName | &amp;#39;SHARDING_COLUMNS&amp;#39; &amp;#39;=&amp;#39; columnNames ) &amp;#39;,&amp;#39; ( &amp;#39;SHARDING_ALGORITHM&amp;#39; &amp;#39;=&amp;#39; algorithmName | algorithmDefinition ) algorithmDefinition ::= &amp;#39;TYPE&amp;#39; &amp;#39;(&amp;#39; &amp;#39;NAME&amp;#39; &amp;#39;=&amp;#39; algorithmType ( &amp;#39;,&amp;#39; &amp;#39;PROPERTIES&amp;#39; &amp;#39;(&amp;#39; propertyDefinition &amp;#39;)&amp;#39; )?&amp;#39;)&amp;#39; columnNames ::= columnName (&amp;#39;,&amp;#39; columnName)+ columnName ::= identifier algorithmName ::= identifier algorithmType ::= identifier 补充说明  当使用复合分片算法时，需要通过 SHARDING_COLUMNS 指定多个分片键 algorithmType 为分片算法类型，详细的分片算法类型信息请参考分片算法  示例 1.</description>
    </item>
    
    <item>
      <title>CREATE SHARDING BINDING TABLE RULE</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-binding-table-rule/</guid>
      <description>描述 CREATE SHARDING BINDING TABLE RULE 语法用于为具有分片规则的表（分片表）添加绑定关系并创建绑定规则
语法定义 CreateBindingTableRule ::= &amp;#39;CREATE&amp;#39; &amp;#39;SHARDING&amp;#39; &amp;#39;BINDING&amp;#39; &amp;#39;TABLE&amp;#39; &amp;#39;RULES&amp;#39; bindingRelationshipDefinition (&amp;#39;,&amp;#39; bindingRelationshipDefinition )* bindingRelationshipDefinition ::= &amp;#39;(&amp;#39; tableName (&amp;#39;,&amp;#39; tableName)* &amp;#39;)&amp;#39; tableName ::= identifier 补充说明  只有分片表才能创建绑定关系 一个分片表只能具有一个绑定关系 添加绑定关系的分片表需要使用相同的资源，并且分片节点个数相同。例如 ds_${0..1}.t_order_${0..1} 与 ds_${0..1}.t_order_item_${0..1} 添加绑定关系的分片表需要对分片键使用相同的分片算法。例如 t_order_${order_id % 2} 与 t_order_item_${order_item_id % 2} 只能存在一个绑定规则，但可包含多个绑定关系，因此无法重复执行 CREATE SHARDING BINDING TABLE RULE 。当绑定规则已经存在但还需要添加绑定关系时，需要使用 ALTER SHARDING BINDING TABLE RULE 来修改绑定规则  示例 1.创建绑定关系 -- 创建绑定关系之前需要先创建分片表 t_order,t_order_item CREATE SHARDING BINDING TABLE RULES (t_order,t_order_item); 2.</description>
    </item>
    
    <item>
      <title>CREATE SHARDING BROADCAST TABLE RULE</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-broadcast-table-rule/</guid>
      <description>描述 CREATE SHARDING BROADCAST TABLE RULE 语法用于为需要广播的表（广播表）创建广播规则
语法定义 CreateDefaultShardingStrategy ::= &amp;#39;CREATE&amp;#39; &amp;#39;DEFAULT&amp;#39; &amp;#39;SHARDING&amp;#39; (&amp;#39;DATABASE&amp;#39; | &amp;#39;TABLE&amp;#39;) &amp;#39;STRATEGY&amp;#39; &amp;#39;(&amp;#39; shardingStrategy &amp;#39;)&amp;#39; shardingStrategy ::= &amp;#39;TYPE&amp;#39; &amp;#39;=&amp;#39; strategyType &amp;#39;,&amp;#39; ( &amp;#39;SHARDING_COLUMN&amp;#39; &amp;#39;=&amp;#39; columnName | &amp;#39;SHARDING_COLUMNS&amp;#39; &amp;#39;=&amp;#39; columnNames ) &amp;#39;,&amp;#39; ( &amp;#39;SHARDING_ALGORITHM&amp;#39; &amp;#39;=&amp;#39; algorithmName | algorithmDefinition ) algorithmDefinition ::= &amp;#39;TYPE&amp;#39; &amp;#39;(&amp;#39; &amp;#39;NAME&amp;#39; &amp;#39;=&amp;#39; algorithmType ( &amp;#39;,&amp;#39; &amp;#39;PROPERTIES&amp;#39; &amp;#39;(&amp;#39; propertyDefinition &amp;#39;)&amp;#39; )?&amp;#39;)&amp;#39; columnNames ::= columnName (&amp;#39;,&amp;#39; columnName)+ columnName ::= identifier algorithmName ::= identifier algorithmType ::= identifier 补充说明  tableName 可使用已经存在的表或者将要创建的表 只能存在一个广播规则，但可包含多个广播表，因此无法重复执行 CREATE SHARDING BROADCAST TABLE RULE。当广播规则已经存在但还需要添加广播表时，需要使用 ALTER BROADCAST TABLE RULE 来修改广播规则  示例 创建广播规则 -- 将 t_province， t_city 添加到广播规则中 CREATE SHARDING BROADCAST TABLE RULES (t_province, t_city); </description>
    </item>
    
    <item>
      <title>CREATE SHARDING KEY GENERATOR</title>
      <link>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.2/cn/reference/distsql/syntax/rdl/rule-definition/sharding/create-sharding-key-generator/</guid>
      <description>描述 CREATE SHARDING KEY GENERATOR 语法用于为当前所选的逻辑库添加分布式主键生成器
语法定义 CreateShardingAlgorithm ::= &amp;#39;CREATE&amp;#39; &amp;#39;SHARDING&amp;#39; &amp;#39;KEY&amp;#39; &amp;#39;GENERATOR&amp;#39; keyGeneratorName &amp;#39;(&amp;#39; algorithmDefinition &amp;#39;)&amp;#39; algorithmDefinition ::= &amp;#39;TYPE&amp;#39; &amp;#39;(&amp;#39; &amp;#39;NAME&amp;#39; &amp;#39;=&amp;#39; algorithmType ( &amp;#39;,&amp;#39; &amp;#39;PROPERTIES&amp;#39; &amp;#39;(&amp;#39; propertyDefinition &amp;#39;)&amp;#39; )?&amp;#39;)&amp;#39; propertyDefinition ::= ( key &amp;#39;=&amp;#39; value ) ( &amp;#39;,&amp;#39; key &amp;#39;=&amp;#39; value )* keyGeneratorName ::= identifier algorithmType ::= identifier 补充说明  algorithmType 为分布式主键生成算法类型，详细的分布式主键生成算法类型信息请参考分布式序列算法类型  示例 创建分布式主键生成器 CREATE SHARDING KEY GENERATOR snowflake_key_generator ( TYPE(NAME=SNOWFLAKE, PROPERTIES(&amp;#34;max-vibration-offset&amp;#34;=3)) ); 保留字 CREATE、SHARDING、KEY、GENERATOR、TYPE、NAME、PROPERTIES 相关链接  保留字  </description>
    </item>
    
  </channel>
</rss>