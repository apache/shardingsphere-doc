<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rules on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/</link>
    <description>Recent content in Rules on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding/</guid>
      <description>Background The configuration method of data sharding Spring Namespace is applicable to traditional Spring projects. The sharding rules and attributes are configured through the namespace xml configuration file. Spring completes the creation and management of ShardingSphereDataSource objects to avoid additional coding work.
Parameters Namespace: http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.0.xsd
&amp;lt;sharding:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   table-rules (?) Tag Sharding table rule configuration   auto-table-rules (?</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/</guid>
      <description>Background Spring namespace read/write splitting configuration method is suitable for conventional Spring projects, determine sharding rules and properties through namespace XML configuration files, and let Spring do the creation and management of ShardingSphereDataSource objects, avoiding additional coding work.
Parameters Explained Namespace: http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.0.xsd
&amp;lt;readwrite-splitting:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   data-source-rule (+) Tag Readwrite-splitting data source rule configuration    &amp;lt;readwrite-splitting:data-source-rule /&amp;gt;</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt/</guid>
      <description>Background Spring Namespace&amp;rsquo;s data encryption configuration applies to the traditional Spring projects. Sharding rules and attributes are configured through the XML configuration file of the namespace. Spring creates and manages the ShardingSphereDataSource object, reducing unnecessary coding.
Parameters Namespace: http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.0.xsd
&amp;lt;encrypt:rule /&amp;gt;
   Name Type Description Default Value     id Attribute Spring Bean Id    table (+) Tag Encrypt table configuration     &amp;lt;encrypt:table /&amp;gt;</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/</guid>
      <description>Background Under the distributed application architecture based on microservices, the business needs multiple services to be completed through a series of service and middleware calls, so the stress test of a single service can no longer represent the real scenario. In the test environment, rebuilding a complete set of pressure test environments similar to the production environment would mean an excessively high cost, and often an inability to simulate the complexity and flow of the online environment.</description>
    </item>
    
    <item>
      <title>SQL Parser</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/</guid>
      <description>Background Spring namespace&amp;rsquo;s SQL parser configuration applies to traditional Spring projects. SQL parsing rules and attributes can be configured through the XML configuration files of the namespace.
Parameters Namespaceï¼šhttp://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.0.xsd
&amp;lt;sql-parser:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   sql-comment-parse-enable Attribute Whether to parse SQL comments   parse-tree-cache-ref Attribute Parse tree local cache name   sql-statement-cache-ref Attribute SQL statement local cache name    &amp;lt;sql-parser:cache-option /&amp;gt;</description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/en/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix/</guid>
      <description>Background ShardingSphere provides a variety of features, such as data sharding, read/write splitting, high availability, and data decryption. These features can be used independently or in combination.
Below, you will find the configuration samples based on Spring Namespace.
Samples &amp;lt;!-- Sharding configuration --&amp;gt; &amp;lt;sharding:standard-strategy id=&amp;#34;databaseStrategy&amp;#34; sharding-column=&amp;#34;user_id&amp;#34; algorithm-ref=&amp;#34;inlineStrategyShardingAlgorithm&amp;#34; /&amp;gt; &amp;lt;sharding:sharding-algorithm id=&amp;#34;inlineStrategyShardingAlgorithm&amp;#34; type=&amp;#34;INLINE&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;algorithm-expression&amp;#34;&amp;gt;replica_ds_${user_id % 2}&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/sharding:sharding-algorithm&amp;gt; &amp;lt;sharding:key-generate-algorithm id=&amp;#34;snowflakeAlgorithm&amp;#34; type=&amp;#34;SNOWFLAKE&amp;#34;&amp;gt; &amp;lt;/sharding:key-generate-algorithm&amp;gt; &amp;lt;sharding:key-generate-strategy id=&amp;#34;orderKeyGenerator&amp;#34; column=&amp;#34;order_id&amp;#34; algorithm-ref=&amp;#34;snowflakeAlgorithm&amp;#34; /&amp;gt; &amp;lt;sharding:rule id=&amp;#34;shardingRule&amp;#34;&amp;gt; &amp;lt;sharding:table-rules&amp;gt; &amp;lt;sharding:table-rule logic-table=&amp;#34;t_order&amp;#34; database-strategy-ref=&amp;#34;databaseStrategy&amp;#34; key-generate-strategy-ref=&amp;#34;orderKeyGenerator&amp;#34; /&amp;gt; &amp;lt;/sharding:table-rules&amp;gt; &amp;lt;/sharding:rule&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>