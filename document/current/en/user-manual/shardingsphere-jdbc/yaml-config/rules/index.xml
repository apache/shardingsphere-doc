<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rules on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/</link>
    <description>Recent content in Rules on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</guid>
      <description>Background Data sharding YAML configuration is highly readable. The dependencies between sharding rules can be quickly understood through the YAML format. ShardingSphere automatically creates the ShardingSphereDataSource object according to YAML configuration, which can reduce unnecessary coding for users.
Parameters rules: - !SHARDING tables: # Sharding table configuration &amp;lt;logic_table_name&amp;gt; (+): # Logic table name actualDataNodes (?): # Describe data source names and actual tables (refer to Inline syntax rules) databaseStrategy (?): # Databases sharding strategy, use default databases sharding strategy if absent.</description>
    </item>
    
    <item>
      <title>Broadcast Table</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/broadcast/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/broadcast/</guid>
      <description>Background Broadcast table YAML configuration is highly readable. The broadcast rules can be quickly understood thanks to the YAML format. ShardingSphere automatically creates the ShardingSphereDataSource object according to the YAML configuration, which reduces unnecessary coding for users.
Parameters rules: - !BROADCAST tables: # Broadcast tables - &amp;lt;table_name&amp;gt; - &amp;lt;table_name&amp;gt; Procedure  Configure broadcast table list in the YAML file. Call the createDataSource method of the object YamlShardingSphereDataSourceFactory. Create ShardingSphereDataSource according to the configuration information in YAML files.</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</guid>
      <description>Background Read/write splitting YAML configuration is highly readable. The YAML format enables you to quickly understand the dependencies between read/write sharding rules. ShardingSphere automatically creates the ShardingSphereDataSource object according to the YAML configuration, which reduces unnecessary coding for users.
Parameters Readwrite-splitting rules: - !READWRITE_SPLITTING dataSources: &amp;lt;data_source_name&amp;gt; (+): # Logic data source name of readwrite-splitting write_data_source_name: # Write data source name read_data_source_names: # Read data source names, multiple data source names separated with comma transactionalReadQueryStrategy (?</description>
    </item>
    
    <item>
      <title>Distributed Transaction</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</guid>
      <description>Background ShardingSphere provides three modes for distributed transactions LOCAL, XA, BASE.
Parameters transaction: defaultType: # Transaction mode, optional value LOCAL/XA/BASE providerType: # Specific implementation of the mode Procedure Use LOCAL Mode The content of the server.yaml configuration file is as follows:
transaction: defaultType: LOCAL Use XA Mode The content of the server.yaml configuration file is as follows:
transaction: defaultType: XA providerType: Narayana/Atomikos To manually add Narayana-related dependencies:
jta-5.12.4.Final.jar arjuna-5.12.4.Final.jar common-5.12.4.Final.jar jboss-connector-api_1.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/</guid>
      <description>Background The YAML configuration approach to data encryption is highly readable, with the YAML format enabling a quick understanding of dependencies between encryption rules. Based on the YAML configuration, ShardingSphere automatically completes the creation of ShardingSphereDataSource objects, reducing unnecessary coding efforts for users.
Parameters rules: - !ENCRYPT tables: &amp;lt;table_name&amp;gt; (+): # Encrypt table name columns: &amp;lt;column_name&amp;gt; (+): # Encrypt logic column name cipher: name: # Cipher column name encryptorName: # Cipher encrypt algorithm name assistedQuery (?</description>
    </item>
    
    <item>
      <title>Data Masking</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/mask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/mask/</guid>
      <description>Background The YAML configuration approach to data masking is highly readable, with the YAML format enabling a quick understanding of dependencies between mask rules. Based on the YAML configuration, ShardingSphere automatically completes the creation of ShardingSphereDataSource objects, reducing unnecessary coding efforts for users.
Parameters rules: - !MASK tables: &amp;lt;table_name&amp;gt; (+): # Mask table name columns: &amp;lt;column_name&amp;gt; (+): # Mask logic column name maskAlgorithm: # Mask algorithm name # Mask algorithm configuration maskAlgorithms: &amp;lt;mask_algorithm_name&amp;gt; (+): # Mask algorithm name type: # Mask algorithm type props: # Mask algorithm properties # .</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/</guid>
      <description>Background Please refer to the following configuration in order to use the ShardingSphere shadow DB feature in ShardingSphere-Proxy.
Parameters rules: - !SHADOW dataSources: shadowDataSource: productionDataSourceName: # production data source name shadowDataSourceName: # shadow data source name tables: &amp;lt;table_name&amp;gt;: dataSourceNames: # shadow table associates shadow data source name list - &amp;lt;shadow_data_source&amp;gt; shadowAlgorithmNames: # shadow table associates shadow algorithm name list - &amp;lt;shadow_algorithm_name&amp;gt; defaultShadowAlgorithmName: # default shadow algorithm name (option) shadowAlgorithms: &amp;lt;shadow_algorithm_name&amp;gt; (+): # shadow algorithm name type: # shadow algorithm type props: # shadow algorithm attribute configuration Please refer to Built-in shadow algorithm list for more details.</description>
    </item>
    
    <item>
      <title>SQL-parser</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/</guid>
      <description>Background The SQL parser YAML configuration is readable and easy to use. The YAML files allow you to separate the code from the configuration, and easily modify the configuration file as needed.
Parameters sqlParser: sqlCommentParseEnabled: # Whether to parse SQL comments  sqlStatementCache: # SQL statement local cache initialCapacity: # Initial capacity of local cache maximumSize: # Maximum capacity of local cache parseTreeCache: # Parse tree local cache initialCapacity: # Initial capacity of local cache maximumSize: # Maximum capacity of local cache Procedure  Set local cache configuration.</description>
    </item>
    
    <item>
      <title>SQL Translator</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-translator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-translator/</guid>
      <description>Configuration Item Explanation sqlTranslator: type: # SQL translator type useOriginalSQLWhenTranslatingFailed: # Whether use original SQL when translating failed </description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/mix/</guid>
      <description>Background ShardingSphere provides a variety of features, such as data sharding, read/write splitting, and data encryption. These features can be used independently or in combination. Below, you will find the parameters&amp;rsquo; explanation and configuration samples based on YAML.
Parameters rules: - !SHARDING tables: &amp;lt;logic_table_name&amp;gt;: # Logical table name: actualDataNodes: # consists of logical data source name plus table name (refer to Inline syntax rules) tableStrategy: # Table shards strategy. The same as database shards strategy standard: shardingColumn: # Sharding column name shardingAlgorithmName: # Sharding algorithm name keyGenerateStrategy: column: # Auto-increment column name.</description>
    </item>
    
    <item>
      <title>Cache for Sharding Route</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding-cache/</guid>
      <description>Background This feature is experimental and needs to be used with the data sharding rule. The cache for sharding route will put the logical SQL, the parameter value of the shard key, and the routing result into the cache, exchange space for time, and reduce CPU usage of the routing logic.
We recommend enabling it only if the following conditions are met:
 Pure OLTP scenarios. The CPU of the machine which deployed the ShardingSphere process has reached the bottleneck.</description>
    </item>
    
    <item>
      <title>Single Table</title>
      <link>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/single/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/user-manual/shardingsphere-jdbc/yaml-config/rules/single/</guid>
      <description>Background Single rule is used to specify which single tables need to be managed by ShardingSphere, or to set the default single table data source.
Parameters rules: - !SINGLE tables: # MySQL style - ds_0.t_single # Load specified single table - ds_1.* # Load all single tables in the specified data source - &amp;#34;*.*&amp;#34; # Load all single tables # PostgreSQL style - ds_0.public.t_config - ds_1.public.* - ds_2.*.* - &amp;#34;*.*.*&amp;#34; defaultDataSource: ds_0 # The default data source is used when executing CREATE TABLE statement to create a single table.</description>
    </item>
    
  </channel>
</rss>