commit f8d5364d3a66a9f6c03dfc6a41ae1516534e6a45
Author: LJ <97254796+DIDA-lJ@users.noreply.github.com>
Date:   Sun May 5 22:06:17 2024 +0800

    Optimize docs (#31120)
    
    * Update Oct_12_2_A_Distributed_Database_Middleware_Ecosystem_Driven_by_Open_Source.cn.md
    
    Improve unreasonable formatting in documents
    
    * Update Oct_12_3_How_Can_Students_Participate_in_Open-Source_Communities.cn.md
    
    Improve unreasonable formatting in documents
    
    * Update Oct_12_4_Updates_and_FAQ_Your_1_Minute_Quick_Start_Guide_to_ShardingSphere.cn.md
    
    Improve unreasonable formatting in documents
    
    * Update Oct_12_5_E-Hualu_ShardingSphere_Hulu_Story_Data_Processing_Shortcut.cn.md
    
    Optimize docs
    
    * Update Oct_12_6_AutoTable_Your_Butler-Like_Sharding_Configuration_Tool.cn.md
    
    Improve unreasonable formatting in documents
    
    * Update Oct_12_9_ShardingSphere_JD_Baitiao_Story_of_an_Implementation_Journey.cn.md
    
    Improve unreasonable formatting in documents
    
    * Update alpha.cn.md
    
    Optimize docs
    
    * Update alpha.cn.md
    
    Optimize docs
    
    * Update committer.cn.md
    
    Optimize docs
    
    * Update community.cn.md
    
    Optimize docs
    
    * Update engine.cn.md
    
    Optimize docs

diff --git a/docs/blog/content/material/alpha.cn.md b/docs/blog/content/material/alpha.cn.md
index bbdc855eda4..a12371c62ac 100644
--- a/docs/blog/content/material/alpha.cn.md
+++ b/docs/blog/content/material/alpha.cn.md
@@ -12,7 +12,7 @@ ElasticJob（ https://github.com/apache/shardingsphere-elasticjob ）是面向
 ElasticJob 在技术选型时，选择站在了巨人的肩膀上而不是重复制造轮子的理念，将定时任务事实标准的 QuartZ 与 分布式协调的利器 ZooKeeper 完美结合，快速而稳定的搭建了全新概念的分布式调度框架。
 
 ### ElasticJob调度模型
-ElasticJob 的调度模型划分为支持线程级别调度的进程内调度 ElasticJob-Lite，和进程级别调度的ElasticJob-Cloud。
+ElasticJob 的调度模型划分为支持线程级别调度的进程内调度 ElasticJob-Lite，和进程级别调度的 ElasticJob-Cloud。
 
 **进程内调度**
 
@@ -32,7 +32,7 @@ ElasticJob-Lite 本身是无中心化架构，无需独立的中心化调度节
 
 ElasticJob-Cloud 拥有进程内调度和进程级别调度两种方式。由于 ElasticJob-Cloud 能够对作业服务器的资源进行控制，因此其作业类型可划分为常驻任务和瞬时任务。常驻任务类似于ElasticJob-Lite，是进程内调度；瞬时任务则完全不同，它充分的利用了资源分配的削峰填谷能力，是进程级的调度，每次任务的会启动全新的进程处理。
 
-ElasticJob-Cloud 需要通过 Mesos 对资源进行控制，并且通过部署在 Mesos Master的调度器进行任务和资源的分配。Cloud采用中心化架构，将调度中心的高可用交由 Mesos管理。
+ElasticJob-Cloud 需要通过 Mesos 对资源进行控制，并且通过部署在 Mesos Master 的调度器进行任务和资源的分配。Cloud 采用中心化架构，将调度中心的高可用交由 Mesos管理。
 
 它的架构图如下：
 
@@ -76,9 +76,9 @@ ElasticJob 中任务分片项的概念，使得任务可以在分布式的环境
 
 **API 变更**
 
-1. 将 Maven 坐标的 groupId 变更为org.apache.shardingsphere.elasticjob
+1. 将 Maven 坐标的 groupId 变更为 org.apache.shardingsphere.elasticjob
 
-2. 将包名称变更为org.apache.shardingsphere.elasticjob
+2. 将包名称变更为 org.apache.shardingsphere.elasticjob
 
 3. 将 Spring 命名空间名称变更为 http://shardingsphere.apache.org/schema/elasticjob
 
@@ -92,7 +92,7 @@ ElasticJob 中任务分片项的概念，使得任务可以在分布式的环境
 
 1. 调度器多元化，增加一次性任务调度器
 
-2. 提供ElasticJob-Lite 项目的 官方 Spring Boot Starter
+2. 提供 ElasticJob-Lite 项目的 官方 Spring Boot Starter
 
 3. 支持使用多种数据库类型存储作业历史轨迹数据
 
@@ -102,7 +102,7 @@ ElasticJob 中任务分片项的概念，使得任务可以在分布式的环境
 
 ### 3.x版本设计解读
 
-通过Release Notes能够看出，ElasticJob 3.x 并非 2.x 的修补版本，而是通过革新的设计理念践行的一套新产品。
+通过 Release Notes 能够看出，ElasticJob 3.x 并非 2.x 的修补版本，而是通过革新的设计理念践行的一套新产品。
 
 ElasticJob 3.x 最直观的变化是将原有的个位数的模块数量拆分为数十个职责清理的微模块。
 
@@ -110,27 +110,27 @@ ElasticJob 3.x 最直观的变化是将原有的个位数的模块数量拆分
 
 **微内核**
 
-ElasticJob 3.x 抽象了 API 和基础设施模块，并且将注册中心、历史执行轨迹、控制台、作业执行器、Lite和Cloud等模块全数分离。
+ElasticJob 3.x 抽象了 API 和基础设施模块，并且将注册中心、历史执行轨迹、控制台、作业执行器、Lite 和 Cloud 等模块全数分离。
 
 内核模块高度可扩展，但不依赖于可扩展模块本身的实现。它继承了 ElasticJob 之前的能力，在继续为开发者提供分布式服务的工具包的同时，向开发者开放可自由定制化扩展的脚手架。
 
 **可扩展**
 
-ElasticJob 3.x在微内核的基础上定义了丰富的可扩展接口，包括作业类型、配置策略、历史执行轨迹存储端以及将要做的注册中心存储端等可扩展接口。
+ElasticJob 3.x 在微内核的基础上定义了丰富的可扩展接口，包括作业类型、配置策略、历史执行轨迹存储端以及将要做的注册中心存储端等可扩展接口。
 
 开发者可以在不修改 ElasticJob 源码的情况下织入定制化功能，真正做到对修改关闭，对扩展开放。
 
 **生态对接**
 
-ElasticJob 3.x 提供了官方的Spring Boot Starter，并已经着手开发基于 Apache SkyWalking 的自动探针，使其能更加便捷的融入现有的技术体系。
+ElasticJob 3.x 提供了官方的 Spring Boot Starter，并已经着手开发基于 Apache SkyWalking 的自动探针，使其能更加便捷的融入现有的技术体系。
 
-另外，从Release Notes中可以解读到的是，ElasticJob 3.x 并未对 Cloud进行大幅更新，其主要改动均集中在内核以及Lite模块。
+另外，从 Release Notes中可以解读到的是，ElasticJob 3.x 并未对 Cloud 进行大幅更新，其主要改动均集中在内核以及 Lite 模块。
 
-对于部署复杂且逐渐不再流行的 Mesos，ElasticJob 的 3.x 将渐渐弱化对它的依赖，并计划在未来提供更加泛化资源隔离 API，使 Cloud 产品线可对接Mesos，Kubernetes 甚至无依赖的独立部署使用。
+对于部署复杂且逐渐不再流行的 Mesos，ElasticJob 的 3.x 将渐渐弱化对它的依赖，并计划在未来提供更加泛化资源隔离 API，使 Cloud 产品线可对接 Mesos，Kubernetes 甚至无依赖的独立部署使用。
 
 ### 3.0.0-beta 功能预告
 
-在调整完项目和包结构之后，ElasticJob 3.0.0-beta版本将工作重点放在新功能开发和操作 API 标准化这两个方面。
+在调整完项目和包结构之后，ElasticJob 3.0.0-beta 版本将工作重点放在新功能开发和操作 API 标准化这两个方面。
 
 **新功能预告**
 
@@ -140,7 +140,7 @@ ElasticJob 3.x 提供了官方的Spring Boot Starter，并已经着手开发基
 
 2. HTTP 作业类型
 
-支持HTTP作业类型，在Script 之外提供另外的跨语言作业类型。
+支持 HTTP 作业类型，在 Script 之外提供另外的跨语言作业类型。
 
 **操作 API 标准化**
 
@@ -162,7 +162,7 @@ ElasticJob 3.x 提供了官方的Spring Boot Starter，并已经着手开发基
 
 **可插拔生态**
 
-与 Apache ShardingSphere 一脉相承，ElasticJob 也将提供更加可插拔和模块化架构，为开发者提供基础设施。方便开发者基于 ElasticJob 二次开发，添加各种定制化功能，包括但不限于作业类型（如：大数据作业、HTTP作业等）、注册中心类型（如：Eureka等）、执行轨迹存储介质（如其他数据库类型）等。
+与 Apache ShardingSphere 一脉相承，ElasticJob 也将提供更加可插拔和模块化架构，为开发者提供基础设施。方便开发者基于 ElasticJob 二次开发，添加各种定制化功能，包括但不限于作业类型（如：大数据作业、HTTP 作业等）、注册中心类型（如：Eureka 等）、执行轨迹存储介质（如其他数据库类型）等。
 
 
 ElasticJob 最终会将 Lite 和 Cloud 以更贴近的方式供开发工程师和运维工程师使用，共享其调度、执行和作业库。整体规划如下：
@@ -173,7 +173,7 @@ ElasticJob 最终会将 Lite 和 Cloud 以更贴近的方式供开发工程师
 
 ElasticJob 社区在之前的几年处于停滞状况，主要原因是作者精力有限，分身乏术。在接收到了作为 Apache ShardingSphere 弹性迁移的调度基础设施的需求之后，本就一脉相承的 ElasticJob 社区决定重启，并且作为 Apache ShardingSphere 的子项目继续发光发热。目前的 ElasticJob 已正式将项目源码迁入 Apache 的 GitHub 仓库，并且在重启的几个月来十分活跃，在GitHub 周和月度趋势排名中榜上有名。
 
-ElasticJob 是Apache ShardingSphere（ https://github.com/apache/shardingsphere ）的子项目，目标是成为独立的 Apache 顶级项目，以及为 Apache ShardingSphere 的弹性迁移提供数据调度的基石。
+ElasticJob 是 Apache ShardingSphere（ https://github.com/apache/shardingsphere ）的子项目，目标是成为独立的 Apache 顶级项目，以及为 Apache ShardingSphere 的弹性迁移提供数据调度的基石。
 
 ### 作者简介
 
@@ -183,7 +183,7 @@ ElasticJob 是Apache ShardingSphere（ https://github.com/apache/shardingsphere
 
 目前主要精力投入在将分布式数据库中间件 Apache ShardingSphere 打造为业界一流的金融级数据解决方案之上。
 
-Apache ShardingSphere( https://github.com/apache/shardingsphere )是京东主导的首个 Apache 软件基金会顶级项目，也是 Apache 软件基金会首个分布式数据库中间件。
+Apache ShardingSphere ( https://github.com/apache/shardingsphere )是京东主导的首个 Apache 软件基金会顶级项目，也是 Apache 软件基金会首个分布式数据库中间件。
 
 曾出版书籍《未来架构——从服务化到云原生》。
 
diff --git a/docs/blog/content/material/committer.cn.md b/docs/blog/content/material/committer.cn.md
index 6d7de763b4f..da0d71e4d5f 100644
--- a/docs/blog/content/material/committer.cn.md
+++ b/docs/blog/content/material/committer.cn.md
@@ -4,7 +4,7 @@ weight = 5
 chapter = true
 +++
 
-### 什么是Apache软件基金会？
+### 什么是 Apache 软件基金会？
 
 Apache 软件基金会（Apache Software Foundation），是当今最具影响力的非盈利性开源软件项目组织，正式成立于 1999 年，主要由开发者与用户的团体组成。在 Apache 软件基金会主导下，已有 350 多个顶级开源项目毕业，包括全球最著名的网络服务器软件 Apache HTTP Server。秉持着“开放、创新、社区”的精神，很多 Apache 项目已经建立起强大成功的生态圈，社区充满活力。
 
@@ -12,7 +12,7 @@ Apache 软件基金会（Apache Software Foundation），是当今最具影响
 
 Apache 软件基金会如今已成为现代开源软件生态系统的基石。
 
-### 为什么要成为Apache committer？
+### 为什么要成为 Apache committer？
 
 说了这么多，不管大家之前对 Apache 软件基金会了解到了什么程度，都可以看出，这是一个极具影响力的组织，在业内广受认可。
 
@@ -31,7 +31,7 @@ Apache 软件基金会如今已成为现代开源软件生态系统的基石。
 
 ![](https://shardingsphere.apache.org/blog/img/committer1.jpg)
 
-### 如何成为官方认可的 committer？
+### 如何成为官方认可的 committer ？
 
 下面就是本篇文章的重点啦，需要做些什么，才会成为一名官方认可的 committer 呢？
 
diff --git a/docs/blog/content/material/community.cn.md b/docs/blog/content/material/community.cn.md
index 36905915cd9..3895015482a 100644
--- a/docs/blog/content/material/community.cn.md
+++ b/docs/blog/content/material/community.cn.md
@@ -31,9 +31,9 @@ Apache ShardingSphere 社区受邀参与了11月9日在清华大学举办的《
 
 ### 02 Apache 软件基金会项目简介 ###
 
-Apache 软件基金会是一个非盈利组织。从1999年至今的20年时间里，产出了无数影响软件行业的项目。在几百个 Apache 软件基金会项目中，我们可以浏览一下几个非常著名的项目：Apache Tomcat、Apache Commons、Apache Maven、Apache Hadoop、Apache Kafka、Apache Spark、Apache Zookeeper等等。Apache 软件基金会的项目成为了开发者日常工作的基石。毫不夸张的说，如果以上项目，您一个都没听说过的话，那么可能很难拿到任何一家公司的Java后端或大数据类Offer。
+Apache 软件基金会是一个非盈利组织。从1999年至今的20年时间里，产出了无数影响软件行业的项目。在几百个 Apache 软件基金会项目中，我们可以浏览一下几个非常著名的项目：Apache Tomcat、Apache Commons、Apache Maven、Apache Hadoop、Apache Kafka、Apache Spark、Apache Zookeeper 等等。Apache 软件基金会的项目成为了开发者日常工作的基石。毫不夸张的说，如果以上项目，您一个都没听说过的话，那么可能很难拿到任何一家公司的 Java 后端或大数据类 Offer 。
 
-近年来，来自中国的 Apache 项目也越来越多了，截止到目前为止，已经有19个来自中国的项目进入了 Apache 软件基金会，其中有9个项目已经毕业成为顶级项目，还有10个项目正在孵化中。对于没有在西方社会工作过的人来说，参与一个国际化的开源项目的门槛有点高，因此，来自中国的 Apache 软件基金会项目对于想参与开源的国内同学是一个巨大的福音。这些项目能够提供一个有效的缓冲带，让一些初入社区且找不到门路的同学能够以熟悉的母语快速的进入国际化的开源社区。来自中国的 Apache 软件基金会项目，与来自西方的Apache软件基金会项目在流程、规范、法务等方面并无不同，唯一的区别是能在社区中找到可以说汉语的人，拉进沟通交流的举例，并进一步的了解 Apache 社区的运作模式，为以后参与其他国际化项目打好基础。
+近年来，来自中国的 Apache 项目也越来越多了，截止到目前为止，已经有 19 个来自中国的项目进入了 Apache 软件基金会，其中有 9 个项目已经毕业成为顶级项目，还有 10 个项目正在孵化中。对于没有在西方社会工作过的人来说，参与一个国际化的开源项目的门槛有点高，因此，来自中国的 Apache 软件基金会项目对于想参与开源的国内同学是一个巨大的福音。这些项目能够提供一个有效的缓冲带，让一些初入社区且找不到门路的同学能够以熟悉的母语快速的进入国际化的开源社区。来自中国的 Apache 软件基金会项目，与来自西方的 Apache 软件基金会项目在流程、规范、法务等方面并无不同，唯一的区别是能在社区中找到可以说汉语的人，拉进沟通交流的举例，并进一步的了解 Apache 社区的运作模式，为以后参与其他国际化项目打好基础。
 
 ### 03 Apache ShardingSphere 简介 ###
 
@@ -48,11 +48,11 @@ Apache ShardingSphere 开源将近4年了，它的外部使用相当广泛，目
 
 \-1- 邮件列表数据变化
 
-这里只统计 dev@shardingsphere.apache.org 邮箱，dev邮箱是社区交流问题的主要途径。2019 年 5 月有邮件 53 封；主题20个；参与人数 14 人。而且这些数据的统计是包含了 GitBox 从 GitHub 转发的15封邮件，那么实际的邮件数量是38封。在2019年9月的统计数据则有了明显的提升，其中邮件148封；主题34个，参与人 37 人，并且我们已经将 GitBox 转发的邮件从 dev 邮件组摘除，而是转移到了notification@shardingsphere.apache.org 邮箱。
+这里只统计 dev@shardingsphere.apache.org 邮箱，dev邮箱是社区交流问题的主要途径。2019 年 5 月有邮件 53 封；个；参与人数 14 人。而且这些数据的统计是包含了 GitBox 从 GitHub 转发的 15 封邮件，那么实际的邮件数量是38 封。在2019年9月的统计数据则有了明显的提升，其中邮件 148 封；主题 34 个，参与人 37 人，并且我们已经将 GitBox 转发的邮件从 dev 邮件组摘除，而是转移到了notification@shardingsphere.apache.org 邮箱。
 
 \-2- GitHub 数据变化
 
-从项目开源之初，到 2018 年 6 月左右的时间，项目整体的提交波峰波谷数据，和我个人的提交数据是几乎吻合的。这说明，在没有进入 Apache 软件基金会之前，ShardingSphere 项目是个人色彩浓重的项目，它的成功与失败，是绑定在个人之上，项目的风险完全集中在一个或几个人身上。对比下近一个月（2019 年 10 月-2019 年 11 月）的 GitHub 数据，可以看到项目有33个人参与；合并了 100 个 pull requests；关闭了 167 个 issues；新建了 36 个 issues ；总共修改了 591 个文件；其中新增代码 12021 行；删除代码 6577 行。可以看到，Apache ShardingSphere 已经从个人项目转变为一个社区项目，由社区所掌控的项目风险更小、进展更迅速。GitHub的stars数量在近一年中增长了 4000 以上，从进入 Apache 基金会之前的 5000 +增长到了现在的 9000+。
+从项目开源之初，到 2018 年 6 月左右的时间，项目整体的提交波峰波谷数据，和我个人的提交数据是几乎吻合的。这说明，在没有进入 Apache 软件基金会之前，ShardingSphere 项目是个人色彩浓重的项目，它的成功与失败，是绑定在个人之上，项目的风险完全集中在一个或几个人身上。对比下近一个月（2019 年 10 月-2019 年 11 月）的 GitHub 数据，可以看到项目有 33 个人参与；合并了 100 个 pull requests；关闭了 167 个 issues；新建了 36 个 issues ；总共修改了 591 个文件；其中新增代码 12021 行；删除代码 6577 行。可以看到，Apache ShardingSphere 已经从个人项目转变为一个社区项目，由社区所掌控的项目风险更小、进展更迅速。GitHub 的 stars 数量在近一年中增长了 4000 以上，从进入 Apache 基金会之前的 5000+ 增长到了现在的 9000+。
 
 \-3- 社区数据变化
 
@@ -70,19 +70,19 @@ Apache ShardingSphere 开源将近4年了，它的外部使用相当广泛，目
 
 5\. 公开和远程的工作模式。只有在邮件列表或GitHub进行公开讨论问题，才会被视为已经发生的问题。社区不会处理私下的沟通和承诺，社区希望所有的问题和决议都是公开可查的。远程协作则表示合作者没有必要在地理上集中在一起，这就意味着工作是异步的。非交互式沟通，则进一步要求信息来往要交代清楚上下文，并尽可能多的通过一次信息描述更多的问题，从而进一步的促进沟通者的思考。
 
-Apache 软件基金会提供了一个社区成熟度的评估模型，从代码、著作权、发布、质量、社区、一致决议、产品独立性这7个方面对社区的成熟度进行评估。目前Apache ShardingSphere已经完成了评估，已经通过了其全部34个子项目的评估。
+Apache 软件基金会提供了一个社区成熟度的评估模型，从代码、著作权、发布、质量、社区、一致决议、产品独立性这7个方面对社区的成熟度进行评估。目前 Apache ShardingSphere 已经完成了评估，已经通过了其全部34个子项目的评估。
 
 ### 06 提升 Apache ShardingSphere 社区的活跃度 ###
 
-1\. 项目架构调整。Apache ShardingSphere 在技术结构层面是由数据库协议层、SQL 层、分布式事务层和存储层组成的，在功能层面则是由分片、高可用治理、数据脱敏、读写分离等很多功能组成。目前的ShardingSphere 架构正在调整为完全 SPI 化的架构，扩展任一技术或实现任一功能都不会影响其他功能。举例说明：Apache ShardingSphere 对 SQL 的支持会根据数据库的方言完全分离，改动了 MySQL 的解析部分，不会对其他数据库有任何影响。因此，ShardingSphere可以支持很多贡献者同时贡献代码而相互不冲突。
+1\. 项目架构调整。Apache ShardingSphere 在技术结构层面是由数据库协议层、SQL 层、分布式事务层和存储层组成的，在功能层面则是由分片、高可用治理、数据脱敏、读写分离等很多功能组成。目前的 ShardingSphere 架构正在调整为完全 SPI 化的架构，扩展任一技术或实现任一功能都不会影响其他功能。举例说明：Apache ShardingSphere 对 SQL 的支持会根据数据库的方言完全分离，改动了 MySQL 的解析部分，不会对其他数据库有任何影响。因此，ShardingSphere 可以支持很多贡献者同时贡献代码而相互不冲突。
 
-2\. 项目指南。Apache ShardingSphere 为贡献者提供了很多指南，可以让潜在的贡献者通过指南了解如何参与 Apache ShardingSphere 的社区，这些指南包括邮件订阅指南、贡献者指南、提交者指南、发布指南以及文档指南，基本涵盖了所有的参与社区的要素。社区也正在着手处理技术模块相关的贡献指南，目前的测试框架以及SQL解析指南正在进行中。
+2\. 项目指南。Apache ShardingSphere 为贡献者提供了很多指南，可以让潜在的贡献者通过指南了解如何参与 Apache ShardingSphere 的社区，这些指南包括邮件订阅指南、贡献者指南、提交者指南、发布指南以及文档指南，基本涵盖了所有的参与社区的要素。社区也正在着手处理技术模块相关的贡献指南，目前的测试框架以及 SQL 解析指南正在进行中。
 
-3\. 规范。规范化的代码可以使项目更加具有仪式感，当有代码开始腐坏时，是整个项目开始失控的开始。因此，代码规范也是 Apache ShardingSphere 项目的重要组成，社区提供了代码规范文档的同时，也提供了checkstyle 等代码检查工具，不符合规范的代码通不过持续集成工具的检查，也无从合并至开发主干。
+3\. 规范。规范化的代码可以使项目更加具有仪式感，当有代码开始腐坏时，是整个项目开始失控的开始。因此，代码规范也是 Apache ShardingSphere 项目的重要组成，社区提供了代码规范文档的同时，也提供了 checkstyle 等代码检查工具，不符合规范的代码通不过持续集成工具的检查，也无从合并至开发主干。
 
 4\. 需求边界划分。Apache ShardingSphere 本身是一个活跃社区的同时，也是京东的基础数据库中间件，支撑了大量的在线应用。因此 Apache ShardingSphere 将项目拆分为公司使用的场景和社区场景。在公司使用的场景需求下，功能会尽量维持稳定、优先级更高、并且有 Deadline 作为项目提交的最终日期限制；在社区的场景下，功能会维持持续开放的心态、优先级适中、一般会采用里程碑的方式作为功能的最终日期。作为京东的 Apache ShardingSphere 的团队，我们也是社区的一部分，在参与社区的同时，会将稳定版本的 Apache ShardingSphere 赋能公司内部应用。
 
-5\. 多元化沟通渠道。除了邮件和 GitHub 的 issue，社区也提供了微信群进行交流。特别说明一下，邮件和 GitHub 永远是核心开发者用于处理问题的依据。微信沟通虽然方便，但不便于归档和二次查询，因此只用于进一步沟通使用，如果用户没有通过邮件或GitHub创建问题，核心开发者可能并不会通过微信直接反馈。
+5\. 多元化沟通渠道。除了邮件和 GitHub 的 issue，社区也提供了微信群进行交流。特别说明一下，邮件和 GitHub 永远是核心开发者用于处理问题的依据。微信沟通虽然方便，但不便于归档和二次查询，因此只用于进一步沟通使用，如果用户没有通过邮件或 GitHub 创建问题，核心开发者可能并不会通过微信直接反馈。
 
 贡献社区的方式有很多，包括但不限于分享（演讲、文章）、回答问题、参与讨论、调查 issue、网站设计、文档更新、文章文档翻译、代码提交、社区运营&推广等。代码提交只是众多贡献方式的一种，热烈欢迎愿意参与社区的同学以多元化的方式贡献社区，提升自身的价值。
 
diff --git a/docs/blog/content/material/engine.cn.md b/docs/blog/content/material/engine.cn.md
index 961cf83bfba..b2ae533d065 100644
--- a/docs/blog/content/material/engine.cn.md
+++ b/docs/blog/content/material/engine.cn.md
@@ -4,21 +4,21 @@ weight = 4
 chapter = true
 +++
 
-今天「剖析Sharding-Sphere系列文章」为大家带来对Sharding-Sphere自动化执行引擎模块的相关介绍。鉴于老板比较喜欢正经的技术文章，所以妹子我尽量用正经又不失肃穆的叙述风格，为大家带来《Sharding-Sphere自动化执行引擎模块》的分享。
+今天「剖析 Sharding-Sphere 系列文章」为大家带来对 Sharding-Sphere 自动化执行引擎模块的相关介绍。鉴于老板比较喜欢正经的技术文章，所以妹子我尽量用正经又不失肃穆的叙述风格，为大家带来《Sharding-Sphere 自动化执行引擎模块》的分享。
 
-传说鱼的记忆只有7秒钟。前段时间刚把这个模块的代码抒写整理完，趁着我还没有失忆之前，先为大家叙述一二，愿对各位看官有所帮助。
+传说鱼的记忆只有 7 秒钟。前段时间刚把这个模块的代码抒写整理完，趁着我还没有失忆之前，先为大家叙述一二，愿对各位看官有所帮助。
 
-「剖析Sharding-Sphere系列文章」是由Sharding-Sphere的核心开发成员亲自操刀向大家介绍和剖析Sharding-Sphere的核心模块、所使用的前沿技术、有价值的经验总结等。这一系列的文章将带您走进Sharding-Sphere的内核世界，获得新知、激发灵感。更希望您关注我们，共同交流切磋，一同前行。
+「剖析 Sharding-Sphere 系列文章」是由 Sharding-Sphere 的核心开发成员亲自操刀向大家介绍和剖析 Sharding-Sphere 的核心模块、所使用的前沿技术、有价值的经验总结等。这一系列的文章将带您走进 Sharding-Sphere 的内核世界，获得新知、激发灵感。更希望您关注我们，共同交流切磋，一同前行。
 
 ### 作者介绍
 
-潘娟，京东金融运维DBA，主要负责京东金融生产数据库运维及数据库平台、中间件开发工作。多次参与京东金融6.18、11.11大促活动的护航工作。曾负责京东金融数据库自动化平台设计与开发项目，现专注于Sharding-Sphere分布式数据库中间件开发。乐于在数据库、自动化、分布式、中间件等相关领域进行学习和探索。
+潘娟，京东金融运维DBA，主要负责京东金融生产数据库运维及数据库平台、中间件开发工作。多次参与京东金融6.18、11.11大促活动的护航工作。曾负责京东金融数据库自动化平台设计与开发项目，现专注于 Sharding-Sphere 分布式数据库中间件开发。乐于在数据库、自动化、分布式、中间件等相关领域进行学习和探索。
 
 ### 概念介绍
 
 Q: 什么叫"自动化执行引擎"？  
 
-A: 一条SQL的生命周期是：从客户端发起、经过Sharding-Sphere处理、再到底层数据库执行消化。而在Sharding-Sphere里过程则是：SQL解析-->SQL优化-->SQL路由-->SQL改写-->SQL执行-->结果归并。自动化执行引擎是为了处理SQL执行问题的，即将路由改写后的真实SQL如何有控制且高效地传送到底层数据库执行。那么直接通过JDBC发送SQL至数据库执行难道行不通吗？还有其他需要考虑吗？答案是：肯定有其他考虑，否则我就不用写这篇文章了。这就体现在它的"自动化"上了。所谓"自动化"，其实是为了平衡数据库连接创建与结果归并模式选择问题，为了平衡资源控制与执行效率问题。
+A: 一条SQL的生命周期是：从客户端发起、经过 Sharding-Sphere 处理、再到底层数据库执行消化。而在 Sharding-Sphere 里过程则是：SQL解析-->SQL优化-->SQL路由-->SQL改写-->SQL执行-->结果归并。自动化执行引擎是为了处理SQL执行问题的，即将路由改写后的真实SQL如何有控制且高效地传送到底层数据库执行。那么直接通过JDBC发送SQL至数据库执行难道行不通吗？还有其他需要考虑吗？答案是：肯定有其他考虑，否则我就不用写这篇文章了。这就体现在它的"自动化"上了。所谓"自动化"，其实是为了平衡数据库连接创建与结果归并模式选择问题，为了平衡资源控制与执行效率问题。
 
 ### 需求场景
 
@@ -28,11 +28,11 @@ A: 在概念介绍部分，我们介绍了主角-自动化执行引擎。也谈
 
 1.数据库连接创建
 
-作为一位混娱乐圈的DBA出身的Java coder, 多少还是会从DBA角度考虑问题。比如从资源控制的角度看，业务方访问数据库的连接数量应当有所限制，这能够有效地防止某一业务操作过多地占用资源，从而将数据库连接的资源耗尽，以致于影响其他业务的正常访问。特别是在一个数据库实例中存在较多分表的情况下，一条不包含分片键的逻辑SQL将产生落在同库不同表的大量真实SQL，如果每条真实SQL都占用一个独立的连接，那么一次查询肯定将会占用过多的资源。Sharding-Sphere作为数据库中间层，如果没有控制好数据库连接数量而导致连接暴增、数据库压力过大的话，极有可能被强行背锅。
+作为一位混娱乐圈的 DBA 出身的 Java coder, 多少还是会从 DBA 角度考虑问题。比如从资源控制的角度看，业务方访问数据库的连接数量应当有所限制，这能够有效地防止某一业务操作过多地占用资源，从而将数据库连接的资源耗尽，以致于影响其他业务的正常访问。特别是在一个数据库实例中存在较多分表的情况下，一条不包含分片键的逻辑 SQL 将产生落在同库不同表的大量真实 SQL，如果每条真实 SQL 都占用一个独立的连接，那么一次查询肯定将会占用过多的资源。Sharding-Sphere 作为数据库中间层，如果没有控制好数据库连接数量而导致连接暴增、数据库压力过大的话，极有可能被强行背锅。
 
 2.结果归并模式选择
 
-但是从执行效率的角度看，为每个分片查询维持一个独立的数据库连接，可以更加有效地利用多线程来提升执行效率。为每个数据库连接开启独立的线程，可以并行化IO所产生的消耗。独立的数据库连接，能够保持查询结果集的引用以及游标位置，在需要获取相应数据时移动游标即可，避免了过早将查询结果数据加载至内存。这就涉及到了结果归并模式的选择问题。通过上一篇文章《剖析Sharding-Sphere系列——结果归并》介绍，我们知道当前有两种结果归并的模式，分别是：
+但是从执行效率的角度看，为每个分片查询维持一个独立的数据库连接，可以更加有效地利用多线程来提升执行效率。为每个数据库连接开启独立的线程，可以并行化IO所产生的消耗。独立的数据库连接，能够保持查询结果集的引用以及游标位置，在需要获取相应数据时移动游标即可，避免了过早将查询结果数据加载至内存。这就涉及到了结果归并模式的选择问题。通过上一篇文章《剖析 Sharding-Sphere 系列——结果归并》介绍，我们知道当前有两种结果归并的模式，分别是：
 
 流式归并：以结果集游标下移进行结果归并的方式，称之为流式归并，它无需将结果数据全数加载至内存，可以有效地节省内存资源，进而减少垃圾回收的频次。
 
@@ -40,40 +40,40 @@ A: 在概念介绍部分，我们介绍了主角-自动化执行引擎。也谈
 
 相信只要是智商在线的朋友，一定会选择流式归并来处理结果集。可是，如果无法保证每个分片查询持有一个独立数据库连接的话，那么就需要在复用该数据库连接、获取下一张分表的查询结果集之前，将当前的查询结果集全数加载至内存。因此，即使可以采用流式归并，在此场景下也不得不退化为内存归并。
 
-一方面是对数据库连接资源的控制保护，一方面是采用更优的归并模式达到内存资源节省的目的，如何处理好两者之间的关系，是Sharding-Sphere执行引擎需求解决的问题。具体来说，如果一条SQL在经过Sharding-Sphere的分片后，需要操作某数据库实例下的200张表，那么，是选择创建200个连接并行执行，还是选择创建一个连接串行执行呢？效率与资源控制又应该如何抉择呢？
+一方面是对数据库连接资源的控制保护，一方面是采用更优的归并模式达到内存资源节省的目的，如何处理好两者之间的关系，是 Sharding-Sphere执行引擎需求解决的问题。具体来说，如果一条 SQL 在经过 Sharding-Sphere 的分片后，需要操作某数据库实例下的 200 张表，那么，是选择创建 200 个连接并行执行，还是选择创建一个连接串行执行呢？效率与资源控制又应该如何抉择呢？
 
 ### 进化论
 
-针对上述的场景，Sharding-Sphere在3.0.0.M4之前提供了一种解决思路，即提出了连接模式（Connection Mode）的概念，并划分了两种模式：内存限制模式（MEMORY\_STRICTLY）和连接限制模式（CONNECTION\_STRICTLY）这两种类型。
+针对上述的场景，Sharding-Sphere 在3.0.0.M4之前提供了一种解决思路，即提出了连接模式（Connection Mode）的概念，并划分了两种模式：内存限制模式（MEMORY\_STRICTLY）和连接限制模式（CONNECTION\_STRICTLY）这两种类型。
 
 - 内存限制模式。使用此模式的前提是数据库对其一次操作所耗费的连接数量不做限制。如果实际执行的SQL需要对某数据库实例中的200张表做操作，则对每张表创建一个新的数据库连接，并通过多线程的方式并发处理，以达成执行效率最大化。并且在SQL满足条件情况下，优先选择流式归并，以防止出现内存溢出或避免频繁垃圾回收情况。
     
 
-- 连接限制模式。使用此模式的前提是数据库严格控制对其一次操作所耗费的连接数量。如果实际执行的SQL需要对某数据库实例中的200张表做操作，那么只会创建唯一的数据库连接，并对其200张表串行处理。如果分片在不同的数据库，仍然是多线程处理不同库，但每个库的每次操作仍然只创建一个唯一的数据库连接。这样即可以防止对一次请求对数据库连接占用过多所带来的问题。该模式始终选择内存归并。
+- 连接限制模式。使用此模式的前提是数据库严格控制对其一次操作所耗费的连接数量。如果实际执行的 SQL 需要对某数据库实例中的200张表做操作，那么只会创建唯一的数据库连接，并对其 200 张表串行处理。如果分片在不同的数据库，仍然是多线程处理不同库，但每个库的每次操作仍然只创建一个唯一的数据库连接。这样即可以防止对一次请求对数据库连接占用过多所带来的问题。该模式始终选择内存归并。
     
 
   
 
-内存限制模式适用于OLAP操作，可以通过放宽对数据库连接的限制提升系统吞吐量；连接限制模式适用于OLTP操作，OLTP通常带有分片键，会路由到单一的分片，因此严格控制数据库连接，以保证在线系统数据库资源能够被更多的应用所使用，是明智的选择。
+内存限制模式适用于 OLAP 操作，可以通过放宽对数据库连接的限制提升系统吞吐量；连接限制模式适用于 OLTP 操作，OLTP 通常带有分片键，会路由到单一的分片，因此严格控制数据库连接，以保证在线系统数据库资源能够被更多的应用所使用，是明智的选择。
 
   
 
-而Sharding-Sphere最终使用何种模式的决定权就交由用户。Sharding-Sphere提供对连接模式的配置，让开发者依据自己业务的实际场景需求选择使用内存限制模式或连接限制模式。
+而 Sharding-Sphere 最终使用何种模式的决定权就交由用户。Sharding-Sphere 提供对连接模式的配置，让开发者依据自己业务的实际场景需求选择使用内存限制模式或连接限制模式。
 
   
 
-可是，将两难的选择的决定权甩锅给用户，使得用户必须要了解这两种模式的利弊，并依据业务场景需求进行选择。这显然增加了用户对Sharding-Sphere的学习和使用的成本，这并不是一种最优的解决方案。
+可是，将两难的选择的决定权甩锅给用户，使得用户必须要了解这两种模式的利弊，并依据业务场景需求进行选择。这显然增加了用户对Sharding-Sphere 的学习和使用的成本，这并不是一种最优的解决方案。
 
   
 
-此外，这种一分为二的处理方案，将两种模式的切换交由静态的初始化配置，缺乏灵活应性。在实际的使用场景中，面对不同SQL以及占位符参数，每次的路由结果是不同的。这就意味着某些操作可能需要使用内存归并，而某些操作则可能选择流式归并更优，它们不应该由用户在Sharding-Sphere启动之前配置好，而更应该根据SQL和占位符参数的场景，来动态的决定连接模式。
+此外，这种一分为二的处理方案，将两种模式的切换交由静态的初始化配置，缺乏灵活应性。在实际的使用场景中，面对不同 SQL 以及占位符参数，每次的路由结果是不同的。这就意味着某些操作可能需要使用内存归并，而某些操作则可能选择流式归并更优，它们不应该由用户在Sharding-Sphere 启动之前配置好，而更应该根据SQL和占位符参数的场景，来动态的决定连接模式。
 
-像Sharding-Sphere这样，总是站在用户角度考虑问题并且不断优化精进的七道杠青年是一定要进行相关优化调整的，于是自动化执行引擎就进化出来了。
+像 Sharding-Sphere 这样，总是站在用户角度考虑问题并且不断优化精进的七道杠青年是一定要进行相关优化调整的，于是自动化执行引擎就进化出来了。
 
 
-为了降低用户的使用成本以及连接模式动态化这两个问题，Sharding-Sphere提炼出自动化执行引擎的思路，在其内部消化了连接模式的概念。用户无需了解所谓的内存限制模式和连接限制模式是什么，而是交由执行引擎根据当前场景自动选择最优的执行方案。  
+为了降低用户的使用成本以及连接模式动态化这两个问题，Sharding-Sphere 提炼出自动化执行引擎的思路，在其内部消化了连接模式的概念。用户无需了解所谓的内存限制模式和连接限制模式是什么，而是交由执行引擎根据当前场景自动选择最优的执行方案。  
 
-同时，自动化执行引擎将连接模式的选择粒度细化至每一次SQL的操作。针对每次SQL请求，自动化执行引擎都将根据其路由结果，进行实时的演算和权衡，并自主地采用恰当的连接模式执行，以达到资源控制和效率的最优平衡。针对自动化的执行引擎，用户只需配置maxConnectionSizePerQuery即可，该参数表示一次查询时每个数据库所允许使用的最大连接数，剩余的处理逻辑将由自动化执行引擎为您负责。
+同时，自动化执行引擎将连接模式的选择粒度细化至每一次 SQL 的操作。针对每次 SQL 请求，自动化执行引擎都将根据其路由结果，进行实时的演算和权衡，并自主地采用恰当的连接模式执行，以达到资源控制和效率的最优平衡。针对自动化的执行引擎，用户只需配置maxConnectionSizePerQuery 即可，该参数表示一次查询时每个数据库所允许使用的最大连接数，剩余的处理逻辑将由自动化执行引擎为您负责。
 
 ### 实现解析
 
@@ -97,17 +97,17 @@ A: 在概念介绍部分，我们介绍了主角-自动化执行引擎。也谈
 
  a. 结果集分组
 
-该步骤是实现内化连接模式概念的关键。执行引擎根据maxConnectionSizePerQuery配置项，结合当前路由结果，自动选择恰当的连接模式。具体步骤如下：
+该步骤是实现内化连接模式概念的关键。执行引擎根据 maxConnectionSizePerQuery 配置项，结合当前路由结果，自动选择恰当的连接模式。具体步骤如下：
 
   
 
 - 将SQL的路由结果按照数据库的名称进行分组。
 
-- 通过下图的公式获得每个数据库实例在maxConnectionSizePerQuery的允许范围内，每个数据库连接需要执行的SQL路由结果组，并演算出本次请求最优的连接模式。
+- 通过下图的公式获得每个数据库实例在 maxConnectionSizePerQuery 的允许范围内，每个数据库连接需要执行的SQL路由结果组，并演算出本次请求最优的连接模式。
 
 ![](https://shardingsphere.apache.org/blog/img/engine3.jpg)
 
-在maxConnectionSizePerQuery允许的范围内，当一个连接需要执行的请求数量大于1时，意味着当前的数据库连接无法持有相应的数据结果集，则必须采用内存归并；反之，当一个连接需要执行的请求数量等于1时，意味着当前的数据库连接可以持有相应的数据结果集，则可以采用流式归并。
+在 maxConnectionSizePerQuery 允许的范围内，当一个连接需要执行的请求数量大于1时，意味着当前的数据库连接无法持有相应的数据结果集，则必须采用内存归并；反之，当一个连接需要执行的请求数量等于1时，意味着当前的数据库连接可以持有相应的数据结果集，则可以采用流式归并。
 
   
 
@@ -125,11 +125,11 @@ A: 在概念介绍部分，我们介绍了主角-自动化执行引擎。也谈
 
   
 
-举个栗子，假设一次查询需要在某一数据库上获取2个数据库连接，用于路由至一库的2个分表查询。有可能出现查询A已获取到该数据库的1个数据库连接，并等待获取另一个数据库连接；而查询B则也已经获得了该数据库上的1个数据库连接，并同样等待另一个数据库连接的获取。如果数据库连接池的允许最大连接数是2，那么这2个查询请求将永远孤独地等待着彼此，图绘版的解释可能会更便于大家理解：
+举个栗子，假设一次查询需要在某一数据库上获取 2 个数据库连接，用于路由至一库的 2 个分表查询。有可能出现查询 A 已获取到该数据库的1个数据库连接，并等待获取另一个数据库连接；而查询B则也已经获得了该数据库上的 1 个数据库连接，并同样等待另一个数据库连接的获取。如果数据库连接池的允许最大连接数是 2 ，那么这 2 个查询请求将永远孤独地等待着彼此，图绘版的解释可能会更便于大家理解：
 
 ![](https://shardingsphere.apache.org/blog/img/engine4.jpg)
 
-为了避免死锁的出现，Sharding-Sphere在获取数据库连接时进行了同步处理。它在创建执行单元时，以原子性的方式一次性获取本次SQL请求所需的全部数据库连接，杜绝了每次查询请求获取到部分资源的可能。这种加锁做法确实可以解决死锁问题，只是，同时会带来一定程度并发性能的损失。为了展示我们不一样！有啥不一样呢？
+为了避免死锁的出现，Sharding-Sphere 在获取数据库连接时进行了同步处理。它在创建执行单元时，以原子性的方式一次性获取本次 SQL 请求所需的全部数据库连接，杜绝了每次查询请求获取到部分资源的可能。这种加锁做法确实可以解决死锁问题，只是，同时会带来一定程度并发性能的损失。为了展示我们不一样！有啥不一样呢？
 
 我们针对此问题还进行了以下两方面优化：
 
@@ -145,15 +145,15 @@ A: 在概念介绍部分，我们介绍了主角-自动化执行引擎。也谈
     
   
 
-该阶段用于真正的执行SQL，它分为分组执行和归并结果集生成两个步骤。
+该阶段用于真正的执行 SQL ，它分为分组执行和归并结果集生成两个步骤。
 
  a. 分组执行
 
-该步骤将准备执行阶段生成的执行单元分组下发至底层并发执行引擎，并针对执行过程中的每个关键步骤发送事件。如：执行开始事件、执行成功事件以及执行失败事件。执行引擎仅关注事件的发送，它并不关心事件的订阅者。Sharding-Sphere的其他模块，如：分布式事务、调用链路追踪等，会订阅感兴趣的事件，并进行相应的处理。
+该步骤将准备执行阶段生成的执行单元分组下发至底层并发执行引擎，并针对执行过程中的每个关键步骤发送事件。如：执行开始事件、执行成功事件以及执行失败事件。执行引擎仅关注事件的发送，它并不关心事件的订阅者。Sharding-Sphere 的其他模块，如：分布式事务、调用链路追踪等，会订阅感兴趣的事件，并进行相应的处理。
 
  b. 归并结果集生成
 
-Sharding-Sphere通过在执行准备阶段的获取的连接模式，生成内存归并结果集或流式归并结果集，并将其传递至结果归并引擎，以进行下一步的工作。内存归并结果集或流式归并结果集的核心区别是：流式归并结果集会通过游标方式获取结果集的数据，而内存归并结果集则是从内存里获取数据。这也是内存归并和流式归并的数据基础。
+Sharding-Sphere 通过在执行准备阶段的获取的连接模式，生成内存归并结果集或流式归并结果集，并将其传递至结果归并引擎，以进行下一步的工作。内存归并结果集或流式归并结果集的核心区别是：流式归并结果集会通过游标方式获取结果集的数据，而内存归并结果集则是从内存里获取数据。这也是内存归并和流式归并的数据基础。
 
   
 
@@ -161,7 +161,7 @@ Sharding-Sphere通过在执行准备阶段的获取的连接模式，生成内
 
   
 
-看官一杯茶的时间，是妹子我反复修改数次的结果。妹子无法被打赏，只愿正在阅读的你能有所收获，这也是我们coding、writing的意义所在。以后还会有「剖析Sharding-Sphere系列文章」其他文章与大家见面，敬请关注~
+看官一杯茶的时间，是妹子我反复修改数次的结果。妹子无法被打赏，只愿正在阅读的你能有所收获，这也是我们 coding、writing 的意义所在。以后还会有「剖析 Sharding-Sphere 系列文章」其他文章与大家见面，敬请关注~
 
 
 
