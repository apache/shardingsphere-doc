<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规则配置 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/</link>
    <description>Recent content in 规则配置 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/sharding/</guid>
      <description>背景信息 数据分片 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
参数解释 命名空间：http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.2.0.xsd
&amp;lt;sharding:rule /&amp;gt;
   名称 类型 说明     id 属性 Spring Bean Id   table-rules (?) 标签 分片表规则配置   auto-table-rules (?) 标签 自动分片表规则配置   binding-table-rules (?) 标签 绑定表规则配置   broadcast-table-rules (?) 标签 广播表规则配置   default-database-strategy-ref (?) 属性 默认分库策略名称   default-table-strategy-ref (?) 属性 默认分表策略名称   default-key-generate-strategy-ref (?</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/readwrite-splitting/</guid>
      <description>背景信息 读写分离 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
参数解释 命名空间：http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.2.0.xsd
&amp;lt;readwrite-splitting:rule /&amp;gt;
   名称 类型 说明     id 属性 Spring Bean Id   data-source-rule (+) 标签 读写分离数据源规则配置    &amp;lt;readwrite-splitting:data-source-rule /&amp;gt;
   名称 类型 说明     id 属性 读写分离数据源规则名称   static-strategy 标签 静态读写分离类型   dynamic-strategy 标签 动态读写分离类型   load-balance-algorithm-ref 属性 负载均衡算法名称    &amp;lt;readwrite-splitting:static-strategy /&amp;gt;</description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/encrypt/</guid>
      <description>背景信息 数据加密 Spring 命名空间的配置方式，适用于传统的 Spring 项目，通过命名空间 xml 配置文件的方式配置分片规则和属性，由 Spring 完成 ShardingSphereDataSource 对象的创建和管理，避免额外的编码工作。
参数解释 命名空间：http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.2.0.xsd
&amp;lt;encrypt:rule /&amp;gt;
   名称 类型 说明 默认值     id 属性 Spring Bean Id    table (+) 标签 加密表配置     &amp;lt;encrypt:table /&amp;gt;
   名称 类型 说明     name 属性 加密表名称   column (+) 标签 加密列配置   query-with-cipher-column(?) 属性 该表是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询    &amp;lt;encrypt:column /&amp;gt;</description>
    </item>
    
    <item>
      <title>影子库</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/shadow/</guid>
      <description>背景信息 如果您只想使用 XML 配置文件方式配置使用 ShardingSphere 影子库功能请参考以下配置。
参数解释 配置入口 &amp;lt;shadow:rule /&amp;gt; 可配置属性：    名称 类型 说明     id 属性 Spring Bean Id   data-source(?) 标签 影子库数据源映射配置   shadow-table(?) 标签 影子表配置   shadow-algorithm(?) 标签 影子表配置   default-shadow-algorithm-name(?) 标签 默认影子算法名称    影子数据源配置： &amp;lt;shadow:data-source /&amp;gt;    名称 类型 说明     id 属性 Spring Bean Id   production-data-source-name 属性 生产数据源名称   shadow-data-source-name 属性 影子数据源名称    影子表配置： &amp;lt;shadow:shadow-table /&amp;gt;    名称 类型 说明     name 属性 影子表名称   data-sources 属性 影子表关联影子数据源名称列表（多个值用&amp;rdquo;,&amp;ldquo;隔开）   algorithm (?</description>
    </item>
    
    <item>
      <title>SQL解析</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/sql-parser/</guid>
      <description>背景信息 Spring 命名空间的配置方式，适用于传统的 Spring 项目，它通过命名空间 xml 配置文件的方式配置SQL 解析规则和属性。
参数解释 命名空间：http://shardingsphere.apache.org/schema/shardingsphere/sql-parser/sql-parser-5.2.0.xsd
&amp;lt;sql-parser:rule /&amp;gt;
   名称 类型 说明     id 属性 Spring Bean Id   sql-comment-parse-enable 属性 是否解析 SQL 注释   parse-tree-cache-ref 属性 解析树本地缓存名称   sql-statement-cache-ref 属性 SQL 语句本地缓存名称    &amp;lt;sql-parser:cache-option /&amp;gt;
   名称 类型 说明     id 属性 本地缓存配置项名称   initial-capacity 属性 本地缓存初始容量   maximum-size 属性 本地缓存最大容量    操作步骤  设置本地缓存配置 设置解析配置 使用解析引擎解析 SQL  配置示例 &amp;lt;sql-parser:rule id=&amp;#34;sqlParseRule&amp;#34; sql-comment-parse-enable=&amp;#34;true&amp;#34; parse-tree-cache-ref=&amp;#34;parseTreeCache&amp;#34; sql-statement-cache-ref=&amp;#34;sqlStatementCache&amp;#34; /&amp;gt; &amp;lt;sql-parser:cache-option id=&amp;#34;sqlStatementCache&amp;#34; initial-capacity=&amp;#34;1024&amp;#34; maximum-size=&amp;#34;1024&amp;#34;/&amp;gt; &amp;lt;sql-parser:cache-option id=&amp;#34;parseTreeCache&amp;#34; initial-capacity=&amp;#34;1024&amp;#34; maximum-size=&amp;#34;1024&amp;#34;/&amp;gt; 相关参考  JAVA API：SQL 解析 YAML 配置：SQL 解析 Spring Boot Starter：SQL 解析  </description>
    </item>
    
    <item>
      <title>混合规则</title>
      <link>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.2.0/cn/user-manual/shardingsphere-jdbc/spring-namespace/rules/mix/</guid>
      <description>背景信息 ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、数据脱敏等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 Spring 命名空间 配置示例。
配置示例 &amp;lt;!-- 分片配置 --&amp;gt; &amp;lt;sharding:standard-strategy id=&amp;#34;databaseStrategy&amp;#34; sharding-column=&amp;#34;user_id&amp;#34; algorithm-ref=&amp;#34;inlineStrategyShardingAlgorithm&amp;#34; /&amp;gt; &amp;lt;sharding:sharding-algorithm id=&amp;#34;inlineStrategyShardingAlgorithm&amp;#34; type=&amp;#34;INLINE&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;algorithm-expression&amp;#34;&amp;gt;replica_ds_${user_id % 2}&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/sharding:sharding-algorithm&amp;gt; &amp;lt;sharding:key-generate-algorithm id=&amp;#34;snowflakeAlgorithm&amp;#34; type=&amp;#34;SNOWFLAKE&amp;#34;&amp;gt; &amp;lt;/sharding:key-generate-algorithm&amp;gt; &amp;lt;sharding:key-generate-strategy id=&amp;#34;orderKeyGenerator&amp;#34; column=&amp;#34;order_id&amp;#34; algorithm-ref=&amp;#34;snowflakeAlgorithm&amp;#34; /&amp;gt; &amp;lt;sharding:rule id=&amp;#34;shardingRule&amp;#34;&amp;gt; &amp;lt;sharding:table-rules&amp;gt; &amp;lt;sharding:table-rule logic-table=&amp;#34;t_order&amp;#34; database-strategy-ref=&amp;#34;databaseStrategy&amp;#34; key-generate-strategy-ref=&amp;#34;orderKeyGenerator&amp;#34; /&amp;gt; &amp;lt;/sharding:table-rules&amp;gt; &amp;lt;/sharding:rule&amp;gt; &amp;lt;!-- 动态读写分离配置 --&amp;gt; &amp;lt;readwrite-splitting:rule id=&amp;#34;readWriteSplittingRule&amp;#34;&amp;gt; &amp;lt;readwrite-splitting:data-source-rule id=&amp;#34;replica_ds_0&amp;#34;&amp;gt; &amp;lt;readwrite-splitting:dynamic-strategy id=&amp;#34;dynamicStrategy&amp;#34; auto-aware-data-source-name=&amp;#34;readwrite_ds_0&amp;#34; /&amp;gt; &amp;lt;/readwrite-splitting:data-source-rule&amp;gt; &amp;lt;readwrite-splitting:data-source-rule id=&amp;#34;replica_ds_1&amp;#34;&amp;gt; &amp;lt;readwrite-splitting:dynamic-strategy id=&amp;#34;dynamicStrategy&amp;#34; auto-aware-data-source-name=&amp;#34;readwrite_ds_1&amp;#34; /&amp;gt; &amp;lt;/readwrite-splitting:data-source-rule&amp;gt; &amp;lt;/readwrite-splitting:rule&amp;gt; &amp;lt;!-- 数据库发现配置 --&amp;gt; &amp;lt;database-discovery:rule id=&amp;#34;mgrDatabaseDiscoveryRule&amp;#34;&amp;gt; &amp;lt;database-discovery:data-source-rule id=&amp;#34;readwrite_ds_0&amp;#34; data-source-names=&amp;#34;ds_0,ds_1,ds_2&amp;#34; discovery-heartbeat-name=&amp;#34;mgr-heartbeat&amp;#34; discovery-type-name=&amp;#34;mgr&amp;#34; /&amp;gt; &amp;lt;database-discovery:data-source-rule id=&amp;#34;readwrite_ds_1&amp;#34; data-source-names=&amp;#34;ds_3,ds_4,ds_5&amp;#34; discovery-heartbeat-name=&amp;#34;mgr-heartbeat&amp;#34; discovery-type-name=&amp;#34;mgr&amp;#34; /&amp;gt; &amp;lt;database-discovery:discovery-heartbeat id=&amp;#34;mgr-heartbeat&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;keep-alive-cron&amp;#34; &amp;gt;0/5 * * * * ?</description>
    </item>
    
  </channel>
</rss>