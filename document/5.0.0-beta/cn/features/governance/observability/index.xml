<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可观察性 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/</link>
    <description>Recent content in 可观察性 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>应用性能监控集成</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/apm-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/apm-integration/</guid>
      <description>背景 APM 是应用性能监控的缩写。目前 APM 的主要功能着眼于分布式系统的性能诊断，其主要功能包括调用链展示，应用拓扑分析等。
Apache ShardingSphere 并不负责如何采集、存储以及展示应用性能监控的相关数据，而是将 SQL 解析与 SQL 执行这两块数据分片的最核心的相关信息发送至应用性能监控系统，并交由其处理。 换句话说，Apache ShardingSphere 仅负责产生具有价值的数据，并通过标准协议递交至相关系统。Apache ShardingSphere 可以通过两种方式对接应用性能监控系统。
第一种方式是使用 OpenTracing API 发送性能追踪数据。面向 OpenTracing 协议的 APM 产品都可以与 Apache ShardingSphere 自动对接，比如 SkyWalking，Zipkin 和 Jaeger。 使用这种方式只需要在启动时配置 OpenTracing 协议的实现者即可。 它的优点是可以兼容所有的与 OpenTracing 协议兼容的产品作为 APM 的展现系统，如果采用公司愿意实现自己的 APM 系统，也只需要实现 OpenTracing 协议，即可自动展示 Apache ShardingSphere 的链路追踪信息。 缺点是 OpenTracing 协议发展并不稳定，较新的版本实现者较少，且协议本身过于中立，对于个性化的相关产品的实现不如原生支持强大。
第二种方式是使用 SkyWalking 的自动探针。 Apache ShardingSphere 团队与Apache SkyWalking 团队共同合作，在 SkyWalking 中实现了 Apache ShardingSphere 自动探针，可以将相关的应用性能数据自动发送到 SkyWalking 中。
使用方法 使用 OpenTracing 协议  方法1：通过读取系统参数注入APM系统提供的 Tracer 实现类  启动时添加参数</description>
    </item>
    
    <item>
      <title>Agent集成</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/agnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/observability/agnet/</guid>
      <description>背景 ShardingSphere-Agent 是独立自主设计，基于Bytebuddy字节码增加的项目，基于插件化的设计，可以无缝隙的与ShardingSphere集成，
目前有提供 Log, metrics, APM 等可观测性功能。
使用方法 本地构建  &amp;gt; cd shardingsphere/shardingsphere-agent&amp;gt; mvn clean install远程下载(暂未发布)  &amp;gt; weget http://xxxxx/shardingsphere-agent.tar.gz&amp;gt; tar -zxvcf shardingsphere-agent.tar.gz启动时添加参数
-javaagent: \absolute path\shardingsphere-agent.jarAgent配置 在本地打包目录和解压缩目录下找到: agent.yaml
applicationName: shardingsphere-agent # 应用名称 ignoredPluginNames: #忽略的插件集合，表示集合里面的插件不生效 - Opentracing - Jaeger - Zipkin - Prometheus - Logging plugins: Prometheus: host: &amp;#34;localhost&amp;#34; #prometheus暴露的host port: 9090 #prometheus暴露的端口 props: JVM_INFORMATION_COLLECTOR_ENABLED : &amp;#34;true&amp;#34; Jaeger: host: &amp;#34;localhost&amp;#34; #jaeger服务的host port: 5775 #jaeger服务的端口 props: SERVICE_NAME: &amp;#34;shardingsphere-agent&amp;#34; JAEGER_SAMPLER_TYPE: &amp;#34;const&amp;#34; JAEGER_SAMPLER_PARAM: &amp;#34;1&amp;#34; JAEGER_REPORTER_LOG_SPANS: &amp;#34;true&amp;#34; JAEGER_REPORTER_FLUSH_INTERVAL: &amp;#34;1&amp;#34; Zipkin: host: &amp;#34;localhost&amp;#34; #zipkin服务的host port: 9411 #zipkin服务的prot props: SERVICE_NAME: &amp;#34;shardingsphere-agent&amp;#34; URL_VERSION: &amp;#34;/api/v2/spans&amp;#34; #zipkin服务的抓取span的uri Logging: props: LEVEL: &amp;#34;INFO&amp;#34; #打印的日志级别 `` 以上为agent的所有配置，注意：当配置 ignoredPluginNames时候，表示集合里面的插件会被忽略！</description>
    </item>
    
  </channel>
</rss>