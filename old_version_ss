commit 93b3af9b7b6884236252731ed579b38e3784c5b7
Author: Ling Hengqian <linghengqian@outlook.com>
Date:   Fri Sep 13 15:46:03 2024 +0800

    Restructures known implementations  documentation for JDBC Driver (#32837)

diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.cn.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.cn.md
index 85dd493a0cc..649f2dacab0 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.cn.md
@@ -62,7 +62,9 @@ chapter = true
 1. 当对应的动态占位符的值不存在时，此 YAML 属性的值将被设置为`::`右侧的默认值。
 2. 当对应的动态占位符的值和`::`右侧的默认值均不存在时，此属性将被设置为空。
 
-#### none
+#### 单个动态占位符
+
+##### none
 
 配置文件为 `xxx.yaml`，配置文件格式与 [YAML 配置](../../../yaml-config) 一致。
 
@@ -73,7 +75,7 @@ chapter = true
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=none`
 
-#### environment
+##### environment
 
 加载包含环境变量的配置文件时，需将 `placeholder-type`置为`environment`，这常用于 Docker Image 的部署场景。
 配置文件为 `xxx.yaml`，配置文件格式与 [YAML 配置](../../../yaml-config) 基本一致。
@@ -110,7 +112,7 @@ ds_1:
 - `jdbc:shardingsphere:classpath:config.yaml?placeholder-type=environment`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=environment`
 
-#### system_props
+##### system_props
 
 加载包含系统属性的配置文件时，需将 `placeholder-type`置为`system_props`。
 配置文件为 `xxx.yaml`，配置文件格式与 [YAML 配置](../../../yaml-config) 基本一致。
@@ -175,8 +177,9 @@ public class ExampleUtils {
 - `jdbc:shardingsphere:classpath:config.yaml?placeholder-type=system_props`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=system_props`
 
-### 多个动态占位符
+#### 多个动态占位符
 
+在单个动态占位符的基础上，用户可以在单行 YAML 使用多个动态占位符。
 在配置 YAML 属性值的时候，如果 YAML 属性值的部分需要动态替换，可以通过配置多个动态占位符的方式来实现
 
 假设存在以下一组环境变量或系统属性，
diff --git a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.en.md b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.en.md
index 71f45f804f5..b2e7b9bab9b 100644
--- a/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.en.md
+++ b/docs/document/content/user-manual/shardingsphere-jdbc/yaml-config/jdbc-driver/known-implementation/_index.en.md
@@ -76,7 +76,9 @@ Discuss two situations,
 2. When neither the corresponding dynamic placeholder value nor the default value on the right side of `::` exists, 
    this attribute will be set to empty.
 
-#### none
+#### Single dynamic placeholder
+
+##### none
 
 The configuration file is `xxx.yaml`, and the configuration file format is consistent
 with [YAML configuration](../../../yaml-config).
@@ -88,7 +90,7 @@ Example：
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=none`
 
-#### environment
+##### environment
 
 When loading a configuration file containing environment variables,
 users need to set `placeholder-type` to `environment`, which is commonly used in Docker Image deployment scenarios.
@@ -126,7 +128,7 @@ Example:
 - `jdbc:shardingsphere:classpath:config.yaml?placeholder-type=environment`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=environment`
 
-#### system_props
+##### system_props
 
 When loading a configuration file containing system properties, users need to set `placeholder-type` to `system_props`.
 The configuration file is `xxx.yaml`, and the configuration file format is basically the same as [YAML configuration](../../../yaml-config).
@@ -193,8 +195,9 @@ Example:
 - `jdbc:shardingsphere:classpath:config.yaml?placeholder-type=system_props`
 - `jdbc:shardingsphere:absolutepath:/path/to/config.yaml?placeholder-type=system_props`
 
-### multiple dynamic placeholders
+#### multiple dynamic placeholders
 
+On top of a single dynamic placeholder, users can use multiple dynamic placeholders in a single line of YAML.
 When configuring the value of a YAML attribute, if part of the value of the YAML attribute needs to be replaced dynamically, you can implement this by configuring multiple dynamic placeholders.
 
 Assume the following set of environment variables or system properties exists,
