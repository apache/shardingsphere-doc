commit 485e242a9eabaab6be07a69545a58e291e824c4f
Author: 孙念君 Nianjun Sun <sunnianjun@apache.org>
Date:   Wed Sep 18 11:15:23 2024 +0800

    Refactor : refactor the dead link (#32916)

diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
index e7f8a1a1c13..f2f12789569 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.cn.md
@@ -31,14 +31,14 @@ services:
 
 ## 前提条件
 
-1. 根据 https://www.graalvm.org/downloads/ 要求安装和配置 JDK 22 对应的 `GraalVM Community Edition`
+1. 根据 https://www.graalvm.org/downloads/ 要求安装和配置 JDK 23 对应的 `GraalVM Community Edition`
    或 `GraalVM Community Edition` 的下游发行版。若使用 `SDKMAN!`，
 
 ```shell
-sdk install java 22.0.2-graalce
+sdk install java 23-graalce
 ```
 
-2. 根据 https://www.graalvm.org/jdk22/reference-manual/native-image/#prerequisites 的要求安装本地工具链。
+2. 根据 https://www.graalvm.org/jdk23/reference-manual/native-image/#prerequisites 的要求安装本地工具链。
 
 3. 如果需要构建 Docker Image， 确保 `docker-ce` 已安装。
 
@@ -113,7 +113,7 @@ services:
 
 - 如果你不对 Git Source 做任何更改， 上文提及的命令将使用 `oraclelinux:9-slim` 作为 Base Docker Image。
   但如果你希望使用 `busybox:glic`，`gcr.io/distroless/base` 或 `scratch` 等更小体积的 Docker Image 作为 Base Docker
-  Image，你需要根据 https://www.graalvm.org/jdk22/reference-manual/native-image/guides/build-static-executables/ 的要求，
+  Image，你需要根据 https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/ 的要求，
   做为 `pom.xml`的 `native profile` 添加 `-H:+StaticExecutableWithDynamicLibC` 的 `jvmArgs` 等操作。
   另请注意，某些第三方依赖将需要在 `Dockerfile` 安装更多系统库，例如 `libdl`。
   因此请确保根据你的使用情况调整 `distribution/proxy-native` 下的 `pom.xml` 和 `Dockerfile` 的内容。
@@ -123,7 +123,7 @@ services:
 针对 GraalVM Native Image 形态的 ShardingSphere Proxy，其提供的可观察性的能力与
 [可观察性](/cn/user-manual/shardingsphere-proxy/observability) 并不一致。
 
-你可以使用 https://www.graalvm.org/jdk22/tools/ 提供的一系列命令行工具或可视化工具观察 GraalVM Native Image 的内部行为，
+你可以使用 https://www.graalvm.org/jdk23/tools/ 提供的一系列命令行工具或可视化工具观察 GraalVM Native Image 的内部行为，
 并根据其要求使用 VSCode 完成调试工作。如果你正在使用 IntelliJ IDEA 并且希望调试生成的 GraalVM Native Image，你可以关注
 https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java
 及其后继。如果你使用的不是 Linux，则无法对 GraalVM Native Image 进行 Debug，请关注尚未关闭的
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
index 5726c1edab8..2ce594e5f8b 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/startup/graalvm-native-image.en.md
@@ -33,14 +33,14 @@ services:
 
 ## Premise
 
-1. Install and configure `GraalVM Community Edition` or a downstream distribution of `GraalVM Community Edition` for 
-JDK 22 according to https://www.graalvm.org/downloads/. If `SDKMAN!` is used,
+1. Install and configure `GraalVM Community Edition` or a downstream distribution of `GraalVM Community Edition` for
+JDK 23 according to https://www.graalvm.org/downloads/. If `SDKMAN!` is used,
 
 ```shell
-sdk install java 22.0.2-graalce
+sdk install java 23-graalce
 ```
 
-2. Install the local toolchain as required by https://www.graalvm.org/jdk22/reference-manual/native-image/#prerequisites.
+2. Install the local toolchain as required by https://www.graalvm.org/jdk23/reference-manual/native-image/#prerequisites.
 
 3. If you need to build a Docker Image, make sure `docker-ce` is installed.
 
@@ -120,7 +120,7 @@ services:
 - If you don't make any changes to the Git Source, the commands mentioned above will use `oraclelinux:9-slim` as the
   Base Docker Image. But if you want to use a smaller Docker Image like `busybox:glic`, `gcr.io/distroless/base` or
   `scratch` as the Base Docker Image, you need according
-  to https://www.graalvm.org/jdk22/reference-manual/native-image/guides/build-static-executables/,
+  to https://www.graalvm.org/jdk23/reference-manual/native-image/guides/build-static-executables/,
   add operations such as `-H:+StaticExecutableWithDynamicLibC` to `jvmArgs` as the `native profile` of `pom.xml`.
   Also note that some 3rd-party dependencies will require more system libraries such as `libdl` to be installed in
   the `Dockerfile`. So make sure to tune `distribution/proxy-native` according to your usage `pom.xml` and `Dockerfile`
@@ -132,7 +132,7 @@ ShardingSphere for GraalVM Native Image form Proxy, which provides observability
 with [Observability](/en/user-manual/shardingsphere-proxy/observability) not consistent.
 
 You can observe GraalVM Native Image using a series of command line tools or visualization tools available
-at https://www.graalvm.org/jdk22/tools/, and use VSCode to debug it according to its requirements.
+at https://www.graalvm.org/jdk23/tools/, and use VSCode to debug it according to its requirements.
 If you are using IntelliJ IDEA and want to debug the generated GraalVM Native Image, You can follow
 https://blog.jetbrains.com/idea/2022/06/intellij-idea-2022-2-eap-5/#Experimental_GraalVM_Native_Debugger_for_Java
 and its successors. If you are not using Linux, you cannot debug GraalVM Native Image, please pay attention
