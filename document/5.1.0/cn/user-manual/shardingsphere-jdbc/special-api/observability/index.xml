<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>可观察性 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/</link>
    <description>Recent content in 可观察性 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用探针</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/agent/</guid>
      <description>如何获取 本地构建  &amp;gt; cd shardingsphere/shardingsphere-agent&amp;gt; mvn clean install远程下载(暂未发布)  &amp;gt; weget http://xxxxx/shardingsphere-agent.tar.gz&amp;gt; tar -zxvcf shardingsphere-agent.tar.gz配置 找到 agent.yaml 文件：
applicationName: shardingsphere-agent ignoredPluginNames: # 忽略的插件集合 - Opentracing - Jaeger - Zipkin - Prometheus - OpenTelemetry - Logging plugins: Prometheus: host: &amp;#34;localhost&amp;#34; port: 9090 props: JVM_INFORMATION_COLLECTOR_ENABLED : &amp;#34;true&amp;#34; Jaeger: host: &amp;#34;localhost&amp;#34; port: 5775 props: SERVICE_NAME: &amp;#34;shardingsphere-agent&amp;#34; JAEGER_SAMPLER_TYPE: &amp;#34;const&amp;#34; JAEGER_SAMPLER_PARAM: &amp;#34;1&amp;#34; JAEGER_REPORTER_LOG_SPANS: &amp;#34;true&amp;#34; JAEGER_REPORTER_FLUSH_INTERVAL: &amp;#34;1&amp;#34; Zipkin: host: &amp;#34;localhost&amp;#34; port: 9411 props: SERVICE_NAME: &amp;#34;shardingsphere-agent&amp;#34; URL_VERSION: &amp;#34;/api/v2/spans&amp;#34; Opentracing: props: OPENTRACING_TRACER_CLASS_NAME: &amp;#34;org.</description>
    </item>
    
    <item>
      <title>应用性能监控集成</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/cn/user-manual/shardingsphere-jdbc/special-api/observability/apm-integration/</guid>
      <description>使用方法 使用 OpenTracing 协议  方法1：通过读取系统参数注入APM系统提供的 Tracer 实现类  启动时添加参数
-Dorg.apache.shardingsphere.tracing.opentracing.tracer.class=org.apache.skywalking.apm.toolkit.opentracing.SkywalkingTracer调用初始化方法
ShardingTracer.init();  方法2：通过参数注入 APM 系统提供的 Tracer 实现类。  ShardingTracer.init(new SkywalkingTracer()); 注意：使用 SkyWalking 的 OpenTracing 探针时，不能同时使用 Apache ShardingSphere Agent 的 OpenTracing 插件，以防止两种插件互相冲突。
使用 SkyWalking 自动探针 请参考 SkyWalking 部署手册。
使用 OpenTelemetry 在agent.yaml中填写好配置即可，例如将 Traces 数据导出到 Zipkin。
OpenTelemetry: props: otel.resource.attributes: &amp;#34;service.name=shardingsphere-agent&amp;#34; otel.traces.exporter: &amp;#34;zipkin&amp;#34; otel.exporter.zipkin.endpoint: &amp;#34;http://127.0.0.1:9411/api/v2/spans&amp;#34; 效果展示 无论使用哪种方式，都可以方便的将APM信息展示在对接的系统中，以下以 SkyWalking 为例。
应用架构 使用 ShardingSphere-Proxy 访问两个数据库 192.168.0.1:3306 和 192.168.0.2:3306，且每个数据库中有两个分表。
拓扑图展示 从图中看，用户访问 18 次 ShardingSphere-Proxy 应用，每次每个数据库访问了两次。这是由于每次访问涉及到每个库中的两个分表，所以每次访问了四张表。</description>
    </item>
    
  </channel>
</rss>