<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>作业 API on ElasticJob</title>
    <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/</link>
    <description>Recent content in 作业 API on ElasticJob</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>作业开发</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/job-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/job-interface/</guid>
      <description>ElasticJob 的作业分类基于 class 和 type 两种类型。 基于 class 的作业需要开发者自行通过实现接口的方式织入业务逻辑； 基于 type 的作业则无需编码，只需要提供相应配置即可。
基于 class 的作业接口的方法参数 shardingContext 包含作业配置、片和运行时信息。 可通过 getShardingTotalCount(), getShardingItem() 等方法分别获取分片总数，运行在本作业服务器的分片序列号等。
ElasticJob 目前提供 Simple、Dataflow 这两种基于 class 的作业类型，并提供 Script、HTTP 这两种基于 type 的作业类型，用户可通过实现 SPI 接口自行扩展作业类型。
简单作业 意为简单实现，未经任何封装的类型。需实现 SimpleJob 接口。 该接口仅提供单一方法用于覆盖，此方法将定时执行。 与Quartz原生接口相似，但提供了弹性扩缩容和分片等功能。
public class MyElasticJob implements SimpleJob { @Override public void execute(ShardingContext context) { switch (context.getShardingItem()) { case 0: // do something by sharding item 0  break; case 1: // do something by sharding item 1  break; case 2: // do something by sharding item 2  break; // case n: .</description>
    </item>
    
    <item>
      <title>使用 Java API</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/java-api/</guid>
      <description>作业配置 ElasticJob 采用构建器模式创建作业配置对象。 代码示例如下：
JobConfiguration jobConfig = JobConfiguration.newBuilder(&amp;#34;myJob&amp;#34;, 3).cron(&amp;#34;0/5 * * * * ?&amp;#34;).shardingItemParameters(&amp;#34;0=Beijing,1=Shanghai,2=Guangzhou&amp;#34;).build(); 作业启动 ElasticJob 调度器分为定时调度和一次性调度两种类型。 每种调度器启动时均需要注册中心配置、作业对象（或作业类型）以及作业配置这 3 个参数。
定时调度 public class JobDemo { public static void main(String[] args) { // 调度基于 class 类型的作业  new ScheduleJobBootstrap(createRegistryCenter(), new MyJob(), createJobConfiguration()).schedule(); // 调度基于 type 类型的作业  new ScheduleJobBootstrap(createRegistryCenter(), &amp;#34;MY_TYPE&amp;#34;, createJobConfiguration()).schedule(); } private static CoordinatorRegistryCenter createRegistryCenter() { CoordinatorRegistryCenter regCenter = new ZookeeperRegistryCenter(new ZookeeperConfiguration(&amp;#34;zk_host:2181&amp;#34;, &amp;#34;elastic-job-demo&amp;#34;)); regCenter.init(); return regCenter; } private static JobConfiguration createJobConfiguration() { // 创建作业配置  .</description>
    </item>
    
    <item>
      <title>使用 Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/spring-boot-starter/</guid>
      <description>ElasticJob 提供自定义的 Spring Boot Starter，可以与 Spring Boot 配合使用。 基于 ElasticJob Spring Boot Starter 使用 ElasticJob ，用户无需手动创建 CoordinatorRegistryCenter、JobBootstrap 等实例， 只需实现核心作业逻辑并辅以少量配置，即可利用轻量、无中心化的 ElasticJob 解决分布式调度问题。
以下内容仅通过 Spring Boot 3 作为演示。 相关内容在 Spring Boot 2 上仍可能有效，但由于 Spring Boot 2 已经结束维护，不对 Spring Boot 2 做任何可用性假设。
作业配置 实现作业逻辑 作业逻辑实现与 ElasticJob 的其他使用方式并没有较大的区别，只需将当前作业注册为 Spring 容器中的 bean。
线程安全问题
Bean 默认是单例的，如果该作业实现会在同一个进程内被创建出多个 JobBootstrap 的实例， 可以考虑设置 Scope 为 prototype。
@Component public class SpringBootDataflowJob implements DataflowJob&amp;lt;Foo&amp;gt; { @Override public List&amp;lt;Foo&amp;gt; fetchData(final ShardingContext shardingContext) { // 获取数据  } @Override public void processData(final ShardingContext shardingContext, final List&amp;lt;Foo&amp;gt; data) { // 处理数据  } } 配置协调服务与作业 在配置文件中指定 ElasticJob 所使用的 Zookeeper。配置前缀为 elasticjob.</description>
    </item>
    
    <item>
      <title>使用 Spring 命名空间</title>
      <link>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/elasticjob/current/cn/user-manual/usage/job-api/spring-namespace/</guid>
      <description>ElasticJob 提供自定义的 Spring 命名空间，可以与 Spring 容器配合使用。 开发者能够便捷的在作业中通过依赖注入使用 Spring 容器管理的数据源等对象，并使用占位符从属性文件中取值。
作业配置 &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:elasticjob=&amp;#34;http://shardingsphere.apache.org/schema/elasticjob&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/elasticjob http://shardingsphere.apache.org/schema/elasticjob/elasticjob.xsd &amp;#34;&amp;gt; &amp;lt;!--配置作业注册中心 --&amp;gt; &amp;lt;elasticjob:zookeeper id=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;yourhost:2181&amp;#34; namespace=&amp;#34;my-job&amp;#34; base-sleep-time-milliseconds=&amp;#34;1000&amp;#34; max-sleep-time-milliseconds=&amp;#34;3000&amp;#34; max-retries=&amp;#34;3&amp;#34; /&amp;gt; &amp;lt;!-- 配置作业 Bean --&amp;gt; &amp;lt;bean id=&amp;#34;myJob&amp;#34; class=&amp;#34;xxx.MyJob&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;fooService&amp;#34; ref=&amp;#34;xxx.FooService&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!-- 配置基于 class 的作业调度 --&amp;gt; &amp;lt;elasticjob:job id=&amp;#34;${myJob.id}&amp;#34; job-ref=&amp;#34;myJob&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; sharding-total-count=&amp;#34;${myJob.shardingTotalCount}&amp;#34; cron=&amp;#34;${myJob.cron}&amp;#34; /&amp;gt; &amp;lt;!-- 配置基于 type 的作业调度 --&amp;gt; &amp;lt;elasticjob:job id=&amp;#34;${myScriptJob.id}&amp;#34; job-type=&amp;#34;SCRIPT&amp;#34; registry-center-ref=&amp;#34;regCenter&amp;#34; sharding-total-count=&amp;#34;${myScriptJob.shardingTotalCount}&amp;#34; cron=&amp;#34;${myScriptJob.cron}&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;script.command.line&amp;#34;&amp;gt;${myScriptJob.scriptCommandLine}&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/elasticjob:job&amp;gt; &amp;lt;/beans&amp;gt; 作业启动 定时调度 将配置 Spring 命名空间的 xml 通过 Spring 启动，作业将自动加载。</description>
    </item>
    
  </channel>
</rss>
