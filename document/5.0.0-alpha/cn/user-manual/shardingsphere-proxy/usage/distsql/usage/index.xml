<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>使用 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/</link>
    <description>Recent content in 使用 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/sharding-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/sharding-rule/</guid>
      <description>使用实战 前置工作  启动 MySQL 服务 创建 MySQL 数据库(参考 ShardingSphere-Proxy 数据源配置规则) 为 ShardingSphere-Proxy 创建一个拥有创建权限的角色或者用户 启动 Zookeeper 服务 (为了持久化配置)  启动 ShardingSphere-Proxy  添加 mode 和 authentication 配置参数到 server.yaml (请参考相关 example 案例) 启动 ShardingSphere-Proxy (相关介绍)  创建分布式数据库和分片表  连接到 ShardingSphere-Proxy 创建分布式数据库  CREATE DATABASE sharding_db; 使用新创建的数据库  USE sharding_db; 配置数据源信息  ADD RESOURCE ds_0 ( HOST=127.0.0.1, PORT=3306, DB=ds_1, USER=root, PASSWORD=root ); ADD RESOURCE ds_1 ( HOST=127.0.0.1, PORT=3306, DB=ds_2, USER=root, PASSWORD=root ); 创建分片规则  CREATE SHARDING TABLE RULE t_order( RESOURCES(ds_0,ds_1), SHARDING_COLUMN=order_id, TYPE(NAME=hash_mod,PROPERTIES(&amp;#34;sharding-count&amp;#34;=4)), GENERATED_KEY(COLUMN=order_id,TYPE(NAME=snowflake,PROPERTIES(&amp;#34;worker-id&amp;#34;=123))) ); 创建切分表  CREATE TABLE `t_order` ( `order_id` int NOT NULL, `user_id` int NOT NULL, `status` varchar(45) DEFAULT NULL, PRIMARY KEY (`order_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 删除切分表  DROP TABLE t_order; 删除分片规则  DROP SHARDING TABLE RULE t_order; 删除数据源  DROP RESOURCE ds_0, ds_1; 删除分布式数据库  DROP DATABASE sharding_db; 注意事项  当前, DROP DATABASE 只会移除 逻辑的分布式数据库，不会删除用户真实的数据库。 DROP TABLE 会将逻辑分片表和数据库中真实的表全部删除。 CREATE DATABASE 只会创建 逻辑的分布式数据库，所以需要用户提前创建好真实的数据库。 自动分片算法 会持续增加，从而覆盖用户各大分片场景。  </description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/readwirte-splitting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/readwirte-splitting-rule/</guid>
      <description>使用实战 前置工作  启动 MySQL 服务 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则) 为 ShardingProxy 创建一个拥有创建权限的角色或者用户 启动 Zookeeper 服务 (为了持久化配置)  启动 ShardingProxy  添加 mode 和 authentication 配置参数到 server.yaml (请参考相关 example 案例) 启动 ShardingProxy (相关介绍)  创建分布式数据库和分片表  连接到 ShardingProxy 创建分布式数据库  CREATE DATABASE readwrite_splitting_db; 使用新创建的数据库  USE readwrite_splitting_db; 配置数据源信息  ADD RESOURCE write_ds ( HOST=127.0.0.1, PORT=3306, DB=ds_0, USER=root, PASSWORD=root ),read_ds ( HOST=127.0.0.1, PORT=3307, DB=ds_0, USER=root, PASSWORD=root ); 创建读写分离规则  CREATE READWRITE_SPLITTING RULE group_0 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds), TYPE(NAME=random) ); 修改读写分离规则  ALTER READWRITE_SPLITTING RULE group_0 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds), TYPE(NAME=random,PROPERTIES(read_weight=&amp;#39;2:0&amp;#39;)) ) 删除读写分离规则  DROP READWRITE_SPLITTING RULE group_0; 删除数据源  DROP RESOURCE write_ds,read_ds; 删除分布式数据库  DROP DATABASE readwrite_splitting_db; 注意事项  当前, DROP DATABASE 只会移除逻辑的分布式数据库，不会删除用户真实的数据库。 DROP TABLE 会将逻辑分片表和数据库中真实的表全部删除。 CREATE DATABASE 只会创建逻辑的分布式数据库，所以需要用户提前创建好真实的数据库。  </description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/encrypt-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/encrypt-rule/</guid>
      <description>使用实战 前置工作  启动 MySQL 服务 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则) 为 ShardingProxy 创建一个拥有创建权限的角色或者用户 启动 Zookeeper 服务 (为了持久化配置)  启动 ShardingProxy  添加 mode 和 authentication 配置参数到 server.yaml (请参考相关 example 案例) 启动 ShardingProxy (相关介绍)  创建分布式数据库和分片表  连接到 ShardingProxy 创建分布式数据库  CREATE DATABASE encrypt_db; 使用新创建的数据库  USE encrypt_db; 配置数据源信息  ADD RESOURCE ds_0 ( HOST=127.0.0.1, PORT=3306, DB=ds_0, USER=root, PASSWORD=root ); 创建加密表  CREATE TABLE `t_encrypt` ( `order_id` int NOT NULL, `user_plain` varchar(45) DEFAULT NULL, `user_cipher` varchar(45) DEFAULT NULL, PRIMARY KEY (`order_id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 创建加密规则  CREATE ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=&amp;#39;123456abc&amp;#39;))), (NAME=order_id, CIPHER =order_cipher,TYPE(NAME=MD5)) )); 修改加密规则  CREATE ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=&amp;#39;123456abc&amp;#39;))), )); 删除加密规则  DROP ENCRYPT RULE t_encrypt; 删除数据源  DROP RESOURCE ds_0; 删除分布式数据库  DROP DATABASE encrypt_db; 注意事项  当前, DROP DATABASE 只会移除逻辑的分布式数据库，不会删除用户真实的数据库。 DROP TABLE 会将逻辑分片表和数据库中真实的表全部删除。 CREATE DATABASE 只会创建逻辑的分布式数据库，所以需要用户提前创建好真实的数据库。  </description>
    </item>
    
    <item>
      <title>影子库压测</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/shadow-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/shadow-rule/</guid>
      <description>使用实战 前置工作  启动 MySQL 服务 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则) 为 ShardingProxy 创建一个拥有创建权限的角色或者用户 启动 Zookeeper 服务 (为了持久化配置)  启动 ShardingProxy  添加 mode 和 authentication 配置参数到 server.yaml (请参考相关 example 案例) 启动 ShardingProxy (相关介绍)  创建分布式数据库和分片表  连接到 ShardingProxy 创建分布式数据库  CREATE DATABASE shadow_db; 使用新创建的数据库  USE shadow_db; 配置数据源信息  ADD RESOURCE ds_0 ( HOST=127.0.0.1, PORT=3306, DB=ds_0, USER=root, PASSWORD=root ),ds_1 ( HOST=127.0.0.1, PORT=3306, DB=ds_1, USER=root, PASSWORD=root ),ds_2 ( HOST=127.0.0.1, PORT=3306, DB=ds_2, USER=root, PASSWORD=root ); 创建影子库压测规则  CREATE SHADOW RULE group_0( SOURCE=ds_0, SHADOW=ds_1, t_order((simple_note_algorithm, TYPE(NAME=SIMPLE_NOTE, PROPERTIES(&amp;#34;shadow&amp;#34;=&amp;#34;true&amp;#34;, foo=&amp;#34;bar&amp;#34;))),(TYPE(NAME=COLUMN_REGEX_MATCH, PROPERTIES(&amp;#34;operation&amp;#34;=&amp;#34;insert&amp;#34;,&amp;#34;column&amp;#34;=&amp;#34;user_id&amp;#34;, &amp;#34;regex&amp;#34;=&amp;#39;[1]&amp;#39;)))), t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES(&amp;#34;shadow&amp;#34;=&amp;#34;true&amp;#34;, &amp;#34;foo&amp;#34;=&amp;#34;bar&amp;#34;))))); 修改影子库压测规则  ALTER SHADOW RULE group_0( SOURCE=ds_0, SHADOW=ds_2, t_order_item((TYPE(NAME=SIMPLE_NOTE, PROPERTIES(&amp;#34;shadow&amp;#34;=&amp;#34;true&amp;#34;, &amp;#34;foo&amp;#34;=&amp;#34;bar&amp;#34;))))); 删除影子库压测规则  DROP SHADOW RULE group_0; 删除数据源  DROP RESOURCE ds_0,ds_1,ds_2; 删除分布式数据库  DROP DATABASE shadow_db; 注意事项  当前, DROP DATABASE 只会移除逻辑的分布式数据库，不会删除用户真实的数据库。 DROP TABLE 会将逻辑分片表和数据库中真实的表全部删除。 CREATE DATABASE 只会创建逻辑的分布式数据库，所以需要用户提前创建好真实的数据库。  </description>
    </item>
    
    <item>
      <title>数据库发现</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/db-discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/cn/user-manual/shardingsphere-proxy/usage/distsql/usage/db-discovery/</guid>
      <description>使用实战 前置工作  启动 MySQL 服务 创建 MySQL 数据库(参考 ShardingProxy 数据源配置规则) 为 ShardingProxy 创建一个拥有创建权限的角色或者用户 启动 Zookeeper 服务 (为了持久化配置)  启动 ShardingProxy  添加 mode 和 authentication 配置参数到 server.yaml (请参考相关 example 案例) 启动 ShardingProxy (相关介绍)  创建分布式数据库和分片表  连接到 ShardingProxy 创建分布式数据库  CREATE DATABASE discovery_db; 使用新创建的数据库  USE discovery_db; 配置数据源信息  ADD RESOURCE ds_0 ( HOST=127.0.0.1, PORT=3306, DB=ds_0, USER=root, PASSWORD=root ),ds_1 ( HOST=127.0.0.1, PORT=3306, DB=ds_1, USER=root, PASSWORD=root ),ds_2 ( HOST=127.0.0.1, PORT=3306, DB=ds_2, USER=root, PASSWORD=root ); 创建数据库发现规则  CREATE DB_DISCOVERY RULE group_0 ( RESOURCES(ds_0,ds_1), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39;,keepAliveCron=&amp;#39;&amp;#39;)) ); 修改数据库发现规则  ALTER DB_DISCOVERY RULE group_0 ( RESOURCES(ds_0,ds_1,ds_2), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39; ,keepAliveCron=&amp;#39;&amp;#39;)) ); 删除数据库发现规则  DROP DB_DISCOVERY RULE group_0; 删除数据源  DROP RESOURCE ds_0,ds_1,ds_2; 删除分布式数据库  DROP DATABASE discovery_db; 注意事项  当前, DROP DATABASE 只会移除逻辑的分布式数据库，不会删除用户真实的数据库。 DROP TABLE 会将逻辑分片表和数据库中真实的表全部删除。 CREATE DATABASE 只会创建逻辑的分布式数据库，所以需要用户提前创建好真实的数据库。  </description>
    </item>
    
  </channel>
</rss>