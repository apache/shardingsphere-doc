<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Core Concept on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/</link>
    <description>Recent content in Core Concept on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Table</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/table/</guid>
      <description>Table is the core concept of data sharding transparently. There are diversified tables provided for different data sharding requirements by Apache ShardingSphere.
Logic Table The logical name of the horizontal sharding databases (tables) with the same schema, it is the logical table identification in SQL. For instance, the data of order is divided into 10 tables according to the last number of the primary key, and they are from t_order_0 to t_order_9, whose logic name is t_order.</description>
    </item>
    
    <item>
      <title>Data Node</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/datanode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/datanode/</guid>
      <description>As the atomic unit of sharding, it consists of data source name and actual table name, e.g. ds_0.t_order_0.
Mapping relationship between logic tables and actual tables and can be divided into two kinds: uniform topology and user-defined topology.
Uniform topology It means that tables are evenly distributed in each data source, for example:
db0├── t_order0└── t_order1db1├── t_order0└── t_order1The data node configurations will be as follows:</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/sharding/</guid>
      <description>Sharding Key Column used to determine database (table) sharding. For example, in last number modulo of order ID sharding, order ID is taken as the sharding key. The full route executed when there is no sharding column in SQL has a poor performance. Besides single sharding column, Apache ShardingSphere also supports multiple sharding columns.
Sharding Algorithm Data sharding can be achieved by sharding algorithms through =, &amp;gt;=, &amp;lt;=, &amp;gt;, &amp;lt;, BETWEEN and IN.</description>
    </item>
    
    <item>
      <title>Inline Expression</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/inline-expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/inline-expression/</guid>
      <description>Motivation Configuration simplicity and unity are two main problems that inline expression intends to solve.
In complex sharding rules, with more data nodes, a large number of configuration repetitions make configurations difficult to maintain. Inline expressions can simplify data node configuration work.
Java codes are not helpful in the unified management of common configurations. Writing sharding algorithms with inline expressions, users can store rules together, making them easier to be browsed and stored.</description>
    </item>
    
    <item>
      <title>Distributed Primary Key</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/key-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/key-generator/</guid>
      <description>Motivation In the development of traditional database software, the automatic sequence generation technology is a basic requirement. All kinds of databases have provided corresponding support for this requirement, such as MySQL auto-increment key, Oracle auto-increment sequence and so on. It is a tricky problem that there is only one sequence generated by different data nodes after sharding. Auto-increment keys in different physical tables in the same logic table can not perceive each other and thereby generate repeated sequences.</description>
    </item>
    
    <item>
      <title>Hint Sharding Route</title>
      <link>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/hint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.1.0/en/features/sharding/concept/hint/</guid>
      <description>Motivation Apache ShardingSphere can be compatible with SQL in way of parsing SQL statements and extracting columns and values to shard. If SQL does not have sharding conditions, it is impossible to shard without full data node route.
In some applications, sharding conditions are not in SQL but in external business logic. So it requires to designate sharding result externally, which is referred to as Hint in ShardingSphere.
Mechanism Apache ShardingSphere uses ThreadLocal to manage sharding key values.</description>
    </item>
    
  </channel>
</rss>