commit 9b3a8cccbe26d50be6e561dee9695dc5b6f6876b
Author: Zhengqiang Duan <duanzhengqiang@apache.org>
Date:   Sun Oct 6 09:37:25 2024 +0800

    Fix wrong typo sharing in sharding feature related class and document (#33132)

diff --git a/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md b/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
index 5d07f2f5efa..652113e63f8 100644
--- a/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
+++ b/docs/blog/content/material/2022_04_06_A_Holistic_Pluggable_Platform_for_Data_Sharding_ICDE_2022_Understanding_Apache_ShardingSphere.en.md
@@ -84,7 +84,7 @@ Vertical sharding alters the table structure, and therefore the structure has to
 
 Combining Figure 1 and Figure 4, let’s explain some data sharding concepts: the `uid` in Figure 1 is used to determine the database sharding field, known as the sharding key. `uid%2` in Figure 1 is used to distribute data to different tables, which is the sharding algorithm. ShardingSphere has over ten built-in sharding algorithms, and also allows clients to customize algorithms through interfaces.
 
-ShardingSphere provides different types of tables for different data sharding demands. For example in Figure 4, `t_user` is a schema, while `t_user_h0` and `t_user_h1` are physical tables. The actual tables stored in the database are the physical tables, but the tables seen by application developers are un-sharded schemas. Data sharing operation is transparent to application developers.
+ShardingSphere provides different types of tables for different data sharding demands. For example in Figure 4, `t_user` is a schema, while `t_user_h0` and `t_user_h1` are physical tables. The actual tables stored in the database are the physical tables, but the tables seen by application developers are un-sharded schemas. Data sharding operation is transparent to application developers.
 
 In Figure 4, if `t_user` and `t_order` share the same sharding algorithm, data source and sharding key, they are binding tables with each other, which is very helpful in related queries. In addition, we use data nodes to map schema to physical tables. It is the smallest unit of sharding, consisting of a data source name and an actual table name, such as `DSO.t_user_h1`.
 
diff --git a/docs/blog/content/material/Feb_18_Apache_ShardingSphere_5.1.0_Now_Avaliable.en.md b/docs/blog/content/material/Feb_18_Apache_ShardingSphere_5.1.0_Now_Avaliable.en.md
index 7e032a5c976..5c5c07366a4 100644
--- a/docs/blog/content/material/Feb_18_Apache_ShardingSphere_5.1.0_Now_Avaliable.en.md
+++ b/docs/blog/content/material/Feb_18_Apache_ShardingSphere_5.1.0_Now_Avaliable.en.md
@@ -187,7 +187,7 @@ Read/write-splitting supports static and dynamic configuration
 
 18. Support to use `instance_id` to perform operations when `enable/disable` a proxy instance
 
-19. Support auto creative algorithm when `CREATE SHARING TABLE RULE`, reducing the steps of creating rule
+19. Support auto creative algorithm when `CREATE SHARDING TABLE RULE`, reducing the steps of creating rule
 
 20. Support specifying an existing KeyGenerator when `CREATE SHARDING TABLE RULE`
 
diff --git a/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md b/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
index 0d934533881..522b6d2c2be 100644
--- a/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
+++ b/docs/blog/content/material/Jan_28_Blog_Apache_ShardingSphere_Enterprise_Applications.en.md
@@ -24,7 +24,7 @@ Keep engineers expressed great interest in Apache ShardingSphere 5.0. At the eve
 
 ## Database Plus: Freeing DBAs and Developers
 
-Database Plus is a design concept of the distributed database system. By building a standard layer and ecosystem for use and interaction above fragmented heterogeneous databases, and by multiplying and expanding computing capabilities (e.g. data sharing, data encryption and decryption), all the interaction between applications and databases is oriented to the standard layer built by Database Plus. This results in shielding the differentiated impact of database fragmentation on upper layer transactions.
+Database Plus is a design concept of the distributed database system. By building a standard layer and ecosystem for use and interaction above fragmented heterogeneous databases, and by multiplying and expanding computing capabilities (e.g. data sharding, data encryption and decryption), all the interaction between applications and databases is oriented to the standard layer built by Database Plus. This results in shielding the differentiated impact of database fragmentation on upper layer transactions.
 
 Pan believes that the global database industry has boomed thanks in large to the following two reasons:
 
diff --git a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
index 4c1e7bae245..04c0ce3844e 100644
--- a/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
+++ b/docs/document/content/user-manual/common-config/builtin-algorithm/sharding.en.md
@@ -119,7 +119,7 @@ Type: COMPLEX_INLINE
 
 | *Name*                                     | *DataType* | *Description*                                                                                            | *Default Value* |
 |--------------------------------------------|------------|----------------------------------------------------------------------------------------------------------|-----------------|
-| sharding-columns (?)                       | String     | sharing column names                                                                                     | -               |
+| sharding-columns (?)                       | String     | sharding column names                                                                                    | -               |
 | algorithm-expression                       | String     | Inline expression sharding algorithm                                                                     | -               |
 | allow-range-query-with-inline-sharding (?) | boolean    | Whether range query is allowed. Note: range query will ignore sharding strategy and conduct full routing | false           |
 
diff --git a/docs/document/content/user-manual/error-code/sql-error-code.cn.md b/docs/document/content/user-manual/error-code/sql-error-code.cn.md
index e83b60ba036..c0811a31ea4 100644
--- a/docs/document/content/user-manual/error-code/sql-error-code.cn.md
+++ b/docs/document/content/user-manual/error-code/sql-error-code.cn.md
@@ -178,7 +178,7 @@ SQL 错误码以标准的 SQL State，Vendor Code 和详细错误信息提供，
 | 20050       | HY000     | Sharding algorithm class '%s' should be implement '%s'.                                                                             |
 | 20051       | HY000     | Routed target '%s' does not exist, available targets are '%s'.                                                                      |
 | 20052       | 44000     | Inline sharding algorithms expression '%s' and sharding column '%s' do not match.                                                   |
-| 20053       | 44000     | Complex inline algorithm need %d sharing columns, but only found %d.                                                                |
+| 20053       | 44000     | Complex inline algorithm need %d sharding columns, but only found %d.                                                               |
 | 20054       | 44000     | No sharding database route info.                                                                                                    |
 | 20055       | 44000     | Some routed data sources do not belong to configured data sources. routed data sources '%s', configured data sources '%s'.          |
 | 20056       | 44000     | Please check your sharding conditions '%s' to avoid same record in table '%s' routing to multiple data nodes.                       |
diff --git a/docs/document/content/user-manual/error-code/sql-error-code.en.md b/docs/document/content/user-manual/error-code/sql-error-code.en.md
index 88f2cca1754..3fef9100249 100644
--- a/docs/document/content/user-manual/error-code/sql-error-code.en.md
+++ b/docs/document/content/user-manual/error-code/sql-error-code.en.md
@@ -178,7 +178,7 @@ SQL error codes provide by standard `SQL State`, `Vendor Code` and `Reason`, whi
 | 20050       | HY000     | Sharding algorithm class '%s' should be implement '%s'.                                                                             |
 | 20051       | HY000     | Routed target '%s' does not exist, available targets are '%s'.                                                                      |
 | 20052       | 44000     | Inline sharding algorithms expression '%s' and sharding column '%s' do not match.                                                   |
-| 20053       | 44000     | Complex inline algorithm need %d sharing columns, but only found %d.                                                                |
+| 20053       | 44000     | Complex inline algorithm need %d sharding columns, but only found %d.                                                               |
 | 20054       | 44000     | No sharding database route info.                                                                                                    |
 | 20055       | 44000     | Some routed data sources do not belong to configured data sources. routed data sources '%s', configured data sources '%s'.          |
 | 20056       | 44000     | Please check your sharding conditions '%s' to avoid same record in table '%s' routing to multiple data nodes.                       |
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.cn.md b/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.cn.md
index 37e37791adc..43c32bca50c 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.cn.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.cn.md
@@ -12,7 +12,7 @@ ShardingSphere CDC 分为两个部分，一个是 CDC Server，另一个是 CDC
 ## 约束条件
 
 - 纯 JAVA 开发，JDK 建议 1.8 或以上版本。
-- CDC Server 要求 SharingSphere-Proxy 使用集群模式，目前支持 ZooKeeper 作为注册中心。
+- CDC Server 要求 ShardingSphere-Proxy 使用集群模式，目前支持 ZooKeeper 作为注册中心。
 - CDC 只同步数据，不会同步表结构，目前也不支持 DDL 的语句同步。
 - CDC 增量阶段会按照分库事务的维度输出数据， 如果要开启 XA 事务的兼容，则 openGauss 和 ShardingSphere-Proxy 都需要 GLT 模块
 
diff --git a/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.en.md b/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.en.md
index 1f1bfd618ab..fad1e594aa5 100644
--- a/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.en.md
+++ b/docs/document/content/user-manual/shardingsphere-proxy/cdc/build.en.md
@@ -12,7 +12,7 @@ Users can introduce the CDC Client into their own projects to implement data con
 ## Constraints
 
 - Pure JAVA development, JDK recommended 1.8 or above.
-- CDC Server requires SharingSphere-Proxy to use cluster mode, currently supports ZooKeeper as the registry center.
+- CDC Server requires ShardingSphere-Proxy to use cluster mode, currently supports ZooKeeper as the registry center.
 - CDC only synchronizes data, does not synchronize table structure, and currently does not support DDL statement synchronization.
 - CDC incremental task will not split transaction data of the database shards. If you want to enable XA transaction compatibility, both openGauss and ShardingSphere-Proxy need the GLT module.
 
