<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>规则配置 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/</link>
    <description>Recent content in 规则配置 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>数据分片</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding/</guid>
      <description>背景信息 数据分片 YAML 配置方式具有非凡的可读性，通过 YAML 格式，能够快速地理解分片规则之间的依赖关系，ShardingSphere 会根据 YAML 配置，自动完成 ShardingSphereDataSource 对象的创建，减少用户不必要的编码工作。
参数解释 rules: - !SHARDING tables: # 数据分片规则配置 &amp;lt;logic_table_name&amp;gt; (+): # 逻辑表名称 actualDataNodes (?): # 由数据源名 + 表名组成（参考 Inline 语法规则） databaseStrategy (?): # 分库策略，缺省表示使用默认分库策略，以下的分片策略只能选其一 standard: # 用于单分片键的标准分片场景 shardingColumn: # 分片列名称 shardingAlgorithmName: # 分片算法名称 complex: # 用于多分片键的复合分片场景 shardingColumns: # 分片列名称，多个列以逗号分隔 shardingAlgorithmName: # 分片算法名称 hint: # Hint 分片策略 shardingAlgorithmName: # 分片算法名称 none: # 不分片 tableStrategy: # 分表策略，同分库策略 keyGenerateStrategy: # 分布式序列策略 column: # 自增列名称，缺省表示不使用自增主键生成器 keyGeneratorName: # 分布式序列算法名称 auditStrategy: # 分片审计策略 auditorNames: # 分片审计算法名称 - &amp;lt;auditor_name&amp;gt; - &amp;lt;auditor_name&amp;gt; allowHintDisable: true # 是否禁用分片审计hint autoTables: # 自动分片表规则配置 t_order_auto: # 逻辑表名称 actualDataSources (?</description>
    </item>
    
    <item>
      <title>读写分离</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/readwrite-splitting/</guid>
      <description>背景信息 读写分离 YAML 配置方式可读性高，通过 YAML 格式，能够快速地理解读写分片规则之间的依赖关系，ShardingSphere 会根据 YAML 配置，自动完成 ShardingSphereDataSource 对象的创建，减少用户不必要的编码工作。
参数解释 静态读写分离 rules: - !READWRITE_SPLITTING dataSources: &amp;lt;data_source_name&amp;gt; (+): # 读写分离逻辑数据源名称 static_strategy: # 读写分离类型 write_data_source_name: # 写库数据源名称 read_data_source_names: # 读库数据源名称，多个从数据源用逗号分隔 loadBalancerName: # 负载均衡算法名称 # 负载均衡算法配置 loadBalancers: &amp;lt;load_balancer_name&amp;gt; (+): # 负载均衡算法名称 type: # 负载均衡算法类型 props: # 负载均衡算法属性配置 # ... 动态读写分离 rules: - !READWRITE_SPLITTING dataSources: &amp;lt;data_source_name&amp;gt; (+): # 读写分离逻辑数据源名称 dynamic_strategy: # 读写分离类型 auto_aware_data_source_name: # 数据库发现逻辑数据源名称 write_data_source_query_enabled: # 从库全部下线，主库是否承担读流量 loadBalancerName: # 负载均衡算法名称 # 负载均衡算法配置 loadBalancers: &amp;lt;load_balancer_name&amp;gt; (+): # 负载均衡算法名称 type: # 负载均衡算法类型 props: # 负载均衡算法属性配置 # .</description>
    </item>
    
    <item>
      <title>分布式事务</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/transaction/</guid>
      <description>背景信息 ShardingSphere 提供了三种模式的分布式事务 LOCAL, XA, BASE。
参数解释 rules: - !TRANSACTION defaultType: # 事务模式，可选值 LOCAL/XA/BASE providerType: # 指定模式下的具体实现 操作步骤 使用 LOCAL 模式 server.yaml 配置文件内容如下：
rules: - !TRANSACTION defaultType: LOCAL 使用 XA 模式 server.yaml 配置文件内容如下：
rules: - !TRANSACTION defaultType: XA providerType: Narayana/Atomikos 手动添加 Narayana 相关依赖：
jta-5.12.4.Final.jar arjuna-5.12.4.Final.jar common-5.12.4.Final.jar jboss-connector-api_1.7_spec-1.0.0.Final.jar jboss-logging-3.2.1.Final.jar jboss-transaction-api_1.2_spec-1.0.0.Alpha3.jar jboss-transaction-spi-7.6.0.Final.jar narayana-jts-integration-5.12.4.Final.jar shardingsphere-transaction-xa-narayana-x.x.x-SNAPSHOT.jar 使用 BASE 模式 server.yaml 配置文件内容如下：
rules: - !TRANSACTION defaultType: BASE providerType: Seata 搭建 Seata Server，添加相关配置文件，和 Seata 依赖，具体步骤参考 ShardingSphere 集成 Seata 柔性事务</description>
    </item>
    
    <item>
      <title>高可用</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/ha/</guid>
      <description>背景信息 通过 YAML 格式，ShardingSphere 会根据 YAML 配置，自动完成 ShardingSphereDataSource 对象的创建，减少用户不必要的编码工作。
参数解释 rules: - !READWRITE_SPLITTING dataSources: replica_ds: dynamicStrategy: Dynamic # 动态读写分离 autoAwareDataSourceName: # 高可用规则逻辑数据源名称 - !DB_DISCOVERY dataSources: &amp;lt;data_source_name&amp;gt; (+): # 逻辑数据源名称 dataSourceNames: # 数据源名称列表 - &amp;lt;data_source&amp;gt; - &amp;lt;data_source&amp;gt; discoveryHeartbeatName: # 检测心跳名称 discoveryTypeName: # 数据库发现类型名称 # 心跳检测配置 discoveryHeartbeats: &amp;lt;discovery_heartbeat_name&amp;gt; (+): # 心跳名称 props: keep-alive-cron: # cron 表达式，如：&amp;#39;0/5 * * * * ?&amp;#39; # 数据库发现类型配置 discoveryTypes: &amp;lt;discovery_type_name&amp;gt; (+): # 数据库发现类型名称 type: # 数据库发现类型，如：MySQL.MGR，MySQL.NORMAL_REPLICATION，openGauss.NORMAL_REPLICATION  props (?</description>
    </item>
    
    <item>
      <title>数据加密</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/encrypt/</guid>
      <description>背景信息 数据加密 YAML 配置方式具有非凡的可读性，通过 YAML 格式，能够快速地理解加密规则之间的依赖关系，ShardingSphere 会根据 YAML 配置，自动完成 ShardingSphereDataSource 对象的创建，减少用户不必要的编码工作。
参数解释 rules: - !ENCRYPT tables: &amp;lt;table_name&amp;gt; (+): # 加密表名称 columns: &amp;lt;column_name&amp;gt; (+): # 加密列名称 plainColumn (?): # 原文列名称 cipherColumn: # 密文列名称 encryptorName: # 密文列加密算法名称 assistedQueryColumn (?): # 查询辅助列名称 assistedQueryEncryptorName: # 查询辅助列加密算法名称 likeQueryColumn (?): # 模糊查询列名称 likeQueryEncryptorName: # 模糊查询列加密算法名称 queryWithCipherColumn(?): # 该表是否使用加密列进行查询 # 加密算法配置 encryptors: &amp;lt;encrypt_algorithm_name&amp;gt; (+): # 加解密算法名称 type: # 加解密算法类型 props: # 加解密算法属性配置 # ... queryWithCipherColumn: # 是否使用加密列进行查询。在有原文列的情况下，可以使用原文列进行查询 算法类型的详情，请参见内置加密算法列表。</description>
    </item>
    
    <item>
      <title>影子库</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/shadow/</guid>
      <description>背景信息 如果您想在 ShardingSphere-Proxy 中使用 ShardingSphere 影子库功能请参考以下配置。
参数解释 rules: - !SHADOW dataSources: shadowDataSource: productionDataSourceName: # 生产数据源名称 shadowDataSourceName: # 影子数据源名称 tables: &amp;lt;table_name&amp;gt;: dataSourceNames: # 影子表关联影子数据源名称列表 - &amp;lt;shadow_data_source&amp;gt; shadowAlgorithmNames: # 影子表关联影子算法名称列表 - &amp;lt;shadow_algorithm_name&amp;gt; defaultShadowAlgorithmName: # 默认影子算法名称（选配项） shadowAlgorithms: &amp;lt;shadow_algorithm_name&amp;gt; (+): # 影子算法名称 type: # 影子算法类型 props: # 影子算法属性配置 详情请参见内置影子算法列表
操作步骤  在 YAML 文件中配置影子库规则，包含数据源、影子库规则、全局属性等配置项； 调用 YamlShardingSphereDataSourceFactory 对象的 createDataSource 方法，根据 YAML 文件中的配置信息创建 ShardingSphereDataSource。  配置示例 dataSources: ds: url: jdbc:mysql://127.0.0.1:3306/ds?serverTimezone=UTC&amp;amp;useSSL=false username: root password: connectionTimeoutMilliseconds: 30000 idleTimeoutMilliseconds: 60000 maxLifetimeMilliseconds: 1800000 maxPoolSize: 50 minPoolSize: 1 shadow_ds: url: jdbc:mysql://127.</description>
    </item>
    
    <item>
      <title>SQL 解析</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-parser/</guid>
      <description>背景信息 SQL 解析 YAML 配置方式具有可读性高，使用简单的特点。通过 YAML 文件的方式，用户可以将代码与配置分离，并且根据需要方便地修改配置文件。
参数解释 rules: - !SQL_PARSER sqlCommentParseEnabled: # 是否解析 SQL 注释 sqlStatementCache: # SQL 语句本地缓存配置项 initialCapacity: # 本地缓存初始容量 maximumSize: # 本地缓存最大容量 parseTreeCache: # 解析树本地缓存配置项 initialCapacity: # 本地缓存初始容量 maximumSize: # 本地缓存最大容量 操作步骤  设置本地缓存配置 设置解析配置 使用解析引擎解析 SQL  配置示例 rules: - !SQL_PARSER sqlCommentParseEnabled: true sqlStatementCache: initialCapacity: 2000 maximumSize: 65535 parseTreeCache: initialCapacity: 128 maximumSize: 1024 相关参考  JAVA API：SQL 解析  </description>
    </item>
    
    <item>
      <title>SQL 翻译</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-translator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sql-translator/</guid>
      <description>配置项说明 rules: - !SQL_TRANSLATOR type: # SQL 翻译器类型 useOriginalSQLWhenTranslatingFailed: # SQL 翻译失败是否使用原始 SQL 继续执行 </description>
    </item>
    
    <item>
      <title>混合规则</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/mix/</guid>
      <description>背景信息 ShardingSphere 涵盖了很多功能，例如，分库分片、读写分离、高可用、数据加密等。这些功能用户可以单独进行使用，也可以配合一起使用，下面是基于 YAML 的参数解释和配置示例。
参数解释 rules: - !SHARDING tables: &amp;lt;logic_table_name&amp;gt;: # 逻辑表名称: actualDataNodes: # 由逻辑数据源名 + 表名组成（参考 Inline 语法规则） tableStrategy: # 分表策略，同分库策略 standard: shardingColumn: # 分片列名称 shardingAlgorithmName: # 分片算法名称 keyGenerateStrategy: column: # 自增列名称，缺省表示不使用自增主键生成器 keyGeneratorName: # 分布式序列算法名称 defaultDatabaseStrategy: standard: shardingColumn: # 分片列名称 shardingAlgorithmName: # 分片算法名称 shardingAlgorithms: &amp;lt;sharding_algorithm_name&amp;gt;: # 分片算法名称 type: INLINE props: algorithm-expression: # INLINE 表达式 t_order_inline: type: INLINE props: algorithm-expression: # INLINE 表达式 keyGenerators: &amp;lt;key_generate_algorithm_name&amp;gt; (+): # 分布式序列算法名称 type: # 分布式序列算法类型 props: # 分布式序列算法属性配置 - !</description>
    </item>
    
    <item>
      <title>数据分片路由缓存</title>
      <link>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding-cache/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/cn/user-manual/shardingsphere-jdbc/yaml-config/rules/sharding-cache/</guid>
      <description>背景信息 该项功能为实验性功能，需要与数据分片功能同时使用。 数据分片路由缓存会将逻辑 SQL、分片键实际参数值、路由结果放入缓存中，以空间换时间，减少路由逻辑对 CPU 的使用。
建议仅在满足以下条件的情况下启用：
 纯 OLTP 场景 ShardingSphere 进程所在机器 CPU 已达到瓶颈 CPU 开销主要在于 ShardingSphere 路由逻辑 所有 SQL 已经最优且每次 SQL 执行都能命中单一分片  在不满足以上条件的情况下使用，可能对 SQL 的执行延时不会有明显改善，同时会增加内存的压力。
参数解释 rules: - !SHARDING_CACHE allowedMaxSqlLength: 512 # 允许缓存的 SQL 长度限制 routeCache: initialCapacity: 65536 # 缓存初始容量 maximumSize: 262144 # 缓存最大容量 softValues: true # 是否软引用缓存值 相关参考  核心特性：数据分片  </description>
    </item>
    
  </channel>
</rss>