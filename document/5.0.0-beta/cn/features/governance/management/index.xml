<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>治理 on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/</link>
    <description>Recent content in 治理 on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>注册中心</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/registry-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/registry-center/</guid>
      <description>实现动机   配置集中化：越来越多的运行时实例，使得散落的配置难于管理，配置不同步导致的问题十分严重。将配置集中于配置中心，可以更加有效进行管理。
  配置动态化：配置修改后的分发，是配置中心可以提供的另一个重要能力。它可支持数据源和规则的动态切换。
  存放运行时的动态/临时状态数据，比如可用的 ShardingSphere 的实例，需要禁用或熔断的数据源等。
  提供熔断数据库访问程序对数据库的访问和禁用从库的访问的编排治理能力。治理模块仍然有大量未完成的功能（比如流控等）。
  注册中心数据结构 在定义的命名空间下， rules 、 props 和 metadata 节点以 YAML 格式存储配置，可通过修改节点来实现对于配置的动态管理。 states 存储数据库访问对象运行节点，用于区分不同数据库访问实例。
namespace├──rules # 全局规则配置├──props # 属性配置├──metadata # Metadata 配置├ ├──${schema_1} # Schema 名称1├ ├ ├──dataSources # 数据源配置├ ├ ├──rules # 规则配置├ ├ ├──schema # 表结构配置├ ├──${schema_2} # Schema 名称2├ ├ ├──dataSources # 数据源配置├ ├ ├──rules # 规则配置├ ├ ├──schema # 表结构配置├──states├ ├──proxynodes├ ├ ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID}├ ├ ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID}├ ├ ├──.</description>
    </item>
    
    <item>
      <title>第三方组件依赖</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/dependency/</guid>
      <description>Apache ShardingSphere 在数据库治理模块使用 SPI 方式载入数据到配置中心和注册中心，进行实例熔断和数据库禁用。 目前，Apache ShardingSphere 内部支持 ZooKeeper，Etcd等常用的配置中心/注册中心。 此外，开发者可以使用其他第三方组件，并通过 SPI 的方式注入到 Apache ShardingSphere，从而使用该配置中心和注册中心，实现数据库治理功能。
    实现驱动 版本 配置中心 注册中心     Zookeeper Apache Curator 3.6.x 支持 支持   Etcd jetcd v3 支持 支持    </description>
    </item>
    
    <item>
      <title>变更历史</title>
      <link>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/change-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0-beta/cn/features/governance/management/change-history/</guid>
      <description>5.0.0-alpha 配置中心 配置中心数据结构 namespace ├──users # 权限配置 ├──props # 属性配置 ├──schemas # Schema 配置 ├ ├──${schema_1} # Schema 名称1 ├ ├ ├──datasource # 数据源配置 ├ ├ ├──rule # 规则配置 ├ ├ ├──table # 表结构配置 ├ ├──${schema_2} # Schema 名称2 ├ ├ ├──datasource # 数据源配置 ├ ├ ├──rule # 规则配置 ├ ├ ├──table # 表结构配置 注册中心 注册中心数据结构 namespace ├──states ├ ├──proxynodes ├ ├ ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID} ├ ├ ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID} ├ ├ ├──.... ├ ├──datanodes ├ ├ ├──${schema_1} ├ ├ ├ ├──${ds_0} ├ ├ ├ ├──${ds_1} ├ ├ ├──${schema_2} ├ ├ ├ ├──${ds_0} ├ ├ ├ ├──${ds_1} ├ ├ ├──.</description>
    </item>
    
  </channel>
</rss>