<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.0.0/en/</link>
    <description>Recent content on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/5.0.0/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>APM Integration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/observability/apm-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/observability/apm-integration/</guid>
      <description>Background APM is the abbreviation for application performance monitoring. Currently, main APM functions lie in the performance diagnosis of distributed systems, including chain demonstration, application topology analysis and so on.
Apache ShardingSphere is not responsible for gathering, storing and demonstrating APM data, but sends the core information of SQL parsing and enforcement to APM to process. In other words, Apache ShardingSphere is only responsible for generating valuable data and submitting it to relevant systems through standard protocol.</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-scaling/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-scaling/build/</guid>
      <description>Build&amp;amp;Deployment  Execute the following command to compile and generate the ShardingSphere-Proxy binary package:  git clone --depth 1 https://github.com/apache/shardingsphere.gitcd shardingspheremvn clean install -Dmaven.javadoc.skip=true -Dcheckstyle.skip=true -Drat.skip=true -Djacoco.skip=true -DskipITs -DskipTests -PreleaseThe binary packages:
 /shardingsphere-distribution/shardingsphere-proxy-distribution/target/apache-shardingsphere-${latest.release.version}-shardingsphere-proxy-bin.tar.gz  Or get binary package from download page.
Unzip the proxy distribution package, modify the configuration file conf/server.yaml, enable scaling and mode:  scaling: blockQueueSize: 10000 workerThread: 40 clusterAutoSwitchAlgorithm: type: IDLE props: incremental-task-idle-minute-threshold: 30 dataConsistencyCheckAlgorithm: type: DEFAULT mode: type: Cluster repository: type: ZooKeeper props: namespace: governance_ds server-lists: localhost:2181 retryIntervalMilliseconds: 500 timeToLiveSeconds: 60 maxRetries: 3 operationTimeoutMilliseconds: 500 overwrite: false Enable clusterAutoSwitchAlgorithm indicate system will detect when scaling job is finished and switch cluster configuration automatically.</description>
    </item>
    
    <item>
      <title>Core Concept</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/encrypt/concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/encrypt/concept/</guid>
      <description>Logic Column Column name used to encryption, it is the logical column identification in SQL. It includes cipher column(required), query assistant column(optional) and plain column(optional).
Cipher Column Encrypted data column.
Query Assistant Column Column used to assistant for query. For non-idempotent encryption algorithms with higher security level, irreversible idempotent columns provided for query.
Plain Column Column used to persist plain column, for service provided during data encrypting. Should remove them after data clean.</description>
    </item>
    
    <item>
      <title>Core Concept</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/readwrite-splitting/concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/readwrite-splitting/concept/</guid>
      <description>Primary Database It refers to the database used in data insertion, update and deletion. It only supports single primary database for now.
Replica Database It refers to the database used in data query. It supports multiple replica databases.
Primary Replica Replication It refers to the operation to asynchronously replicate data from the primary database to the replica database. Because of the asynchrony of primary-replica synchronization, there may be short-time data inconsistency between them.</description>
    </item>
    
    <item>
      <title>Core Concept</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/scaling/concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/scaling/concept/</guid>
      <description>Scaling Job It refers one complete process of scaling data from old rule to new rule.
Inventory Data It refers all existing data stored in data nodes before the scaling job started.
Incremental Data It refers the new data generated by application during scaling job.</description>
    </item>
    
    <item>
      <title>Core Concept</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/shadow/concept/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/shadow/concept/</guid>
      <description>Shadow DB Switch Shadow DB switch.
Pressure testing is a requirement for a specific period of time, turned on when needed.
Production DB The database used for production data.
Shadow DB The Shadow database for Pressure testing data isolation.
Shadow Table Pressure testing data related tables.
The shadow table has the same table structure in the production DB and shadow DB.
Shadow Algorithm Provides 2 types of shadow algorithms.
Since the shadow algorithm is closely related to business, no default shadow algorithm provided.</description>
    </item>
    
    <item>
      <title>Data Source</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-resource/</guid>
      <description>Definition ADD RESOURCE dataSource [, dataSource] ... ALTER RESOURCE dataSource [, dataSource] ... dataSource: simpleSource | urlSource simpleSource: dataSourceName(HOST=hostName,PORT=port,DB=dbName,USER=user [,PASSWORD=password] [,PROPERTIES(poolProperty [,poolProperty] ...)]) urlSource: dataSourceName(URL=url,USER=user [,PASSWORD=password] [,PROPERTIES(poolProperty [,poolProperty]) ...]) poolProperty: &amp;#34;key&amp;#34;= (&amp;#34;value&amp;#34; | value) DROP RESOURCE dataSourceName [, dataSourceName] ... [ignore single tables]  Before adding resources, please confirm that a distributed database has been created, and execute the use command to successfully select a database Confirm that the added resource can be connected normally, otherwise it will not be added successfully Duplicate dataSourceName is not allowed to be added In the definition of a dataSource, the syntax of simpleSource and urlSource cannot be mixed poolProperty is used to customize connection pool properties, key must be the same as the connection pool property name, value supports int and String types ALTER RESOURCE will switch the connection pool.</description>
    </item>
    
    <item>
      <title>Data Source</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-resource/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-resource/</guid>
      <description>Definition SHOW SCHEMA RESOURCES [FROM schemaName] Description    Column Description     name Data source name   type Data source type   host Data source host   port Data source port   db Database name   attribute Data source parameter    Example mysql&amp;gt; show schema resources; +------+-------+-----------+------+------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | name | type | host | port | db | attribute | +------+-------+-----------+------+------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+ | ds_0 | MySQL | 127.</description>
    </item>
    
    <item>
      <title>Data Source Configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/data-source/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/data-source/</guid>
      <description>Configuration Item Explanation schemaName: # Logic schema name dataSources: # Data sources configuration, multiple &amp;lt;data-source-name&amp;gt; available &amp;lt;data-source-name&amp;gt;: # Different from ShardingSphere-JDBC configuration, it does not need to be configured with database connection pool url: # Database URL, starts with jdbc:mysql, jdbc:postgresql, jdbc:opengauss username: # Database username password: # Database password connectionTimeoutMilliseconds: #Connection timeout milliseconds idleTimeoutMilliseconds: #Idle timeout milliseconds maxLifetimeMilliseconds: #Maximum life milliseconds maxPoolSize: 50 #Maximum connection count in the pool minPoolSize: 1 #Minimum connection count in the pool  rules: # Keep consist with ShardingSphere-JDBC configuration # .</description>
    </item>
    
    <item>
      <title>Local Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/local-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/local-transaction/</guid>
      <description>Supported  Support none-cross-database transactions. For example, sharding table or sharding database with its route result in same database; Support cross-database transactions caused by logic exceptions. For example, update two databases in transaction with exception thrown, data can rollback in both databases.  Unsupported  Do not support the cross-database transactions caused by network or hardware crash. For example, when update two databases in transaction, if one database crashes before commit, then only the data of the other database can commit.</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/mysql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/mysql/</guid>
      <description>The unsupported SQL list for MySQL are as follows:
   SQL     FLUSH PRIVILEGES   CLONE LOCAL DATA DIRECTORY = &amp;lsquo;clone_dir&amp;rsquo;   INSTALL COMPONENT &amp;lsquo;file://component1&amp;rsquo;, &amp;lsquo;file://component2&amp;rsquo;   UNINSTALL COMPONENT &amp;lsquo;file://component1&amp;rsquo;, &amp;lsquo;file://component2&amp;rsquo;   SHOW CREATE USER user   REPAIR TABLE t_order   OPTIMIZE TABLE t_order   CHECKSUM TABLE t_order   CHECK TABLE t_order   SET RESOURCE GROUP group_name   DROP RESOURCE GROUP group_name   CREATE RESOURCE GROUP group_name TYPE = SYSTEM   ALTER RESOURCE GROUP rg1 VCPU = 0-63    </description>
    </item>
    
    <item>
      <title>Parse Engine</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/parse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/parse/</guid>
      <description>Compared to other programming languages, SQL is relatively simple, but it is still a complete set of programming language, so there is no essential difference between parsing SQL grammar and parsing other languages (Java, C and Go, etc.).
Abstract Syntax Tree The parsing process can be divided into lexical parsing and syntactic parsing. Lexical parser is used to divide SQL into indivisible atomic signs, i.e., Token. According to the dictionary provided by different database dialect, it is categorized into keyword, expression, literal value and operator.</description>
    </item>
    
    <item>
      <title>Performance Test with Sysbench</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/performance-test/sysbench-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/performance-test/sysbench-test/</guid>
      <description>Target The performance of ShardingSphere-JDBC, ShardingSphere-Proxy and MySQL would be compared here. INSERT &amp;amp; UPDATE &amp;amp; DELETE which regarded as a set of associated operation and SELECT which focus on sharding optimization are used to evaluate performance for the basic scenarios (single route, readwrite-splitting &amp;amp; encrypt &amp;amp; sharding, full route). While another set of associated operation, INSERT &amp;amp; SELECT &amp;amp; DELETE, is used to evaluate performance for readwrite-splitting. To achieve the result better, these tests are performed with jmeter which based on a certain amount of data with 20 concurrent threads for 30 minutes, and one MySQL has been deployed on one machine, while the scenario of MySQL used for comparison is deployed on one machine with one instance.</description>
    </item>
    
    <item>
      <title>Proxy Startup</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/startup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/startup/</guid>
      <description>Startup Steps  Download the latest version of ShardingSphere-Proxy. If users use docker, they can execute docker pull shardingsphere/shardingsphere-proxy to get the image. Please refer to Docker Image for more details. After the decompression, revise conf/server.yaml and documents begin with config- prefix, conf/config-xxx.yaml for example, to configure sharding rules and readwrite-splitting rules. Please refer to Configuration Manual for the configuration method. Please run bin/start.sh for Linux operating system; run bin/start.bat for Windows operating system to start ShardingSphere-Proxy.</description>
    </item>
    
    <item>
      <title>RAL</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/ral/ral/</guid>
      <description>Definition RAL (Resource &amp;amp; Rule Administration Language) responsible for the added-on feature of hint, transaction type switch, scaling, sharding execute planning and so on.
Usage Hint    Statement Function Example     set readwrite_splitting hint source = [auto / write] For current connection, set readwrite splitting routing strategy (automatic or forced to write data source) set readwrite_splitting hint source = write   set sharding hint database_value = yy For current connection, set sharding value for database sharding only, yy: sharding value set sharding hint database_value = 100   add sharding hint database_value xx= yy For current connection, add sharding value for table, xx: logic table, yy: database sharding value add sharding hint database_value t_order= 100   add sharding hint table_value xx = yy For current connection, add sharding value for table, xx: logic table, yy: table sharding value add sharding hint table_value t_order = 100   clear hint For current connection, clear all hint settings clear hint   clear [sharding hint / readwrite_splitting hint] For current connection, clear hint settings of sharding or readwrite splitting clear readwrite_splitting hint   show [sharding / readwrite_splitting] hint status For current connection, query hint settings of sharding or readwrite splitting show readwrite_splitting hint status    Scaling    Statement Function Example     show scaling list Query running list show scaling list   show scaling status xx Query scaling status, xx：jobId show scaling status 1234   start scaling xx Start scaling, xx：jobId start scaling 1234   stop scaling xx Stop scaling, xx：jobId stop scaling 1234   drop scaling xx Drop scaling, xx：jobId drop scaling 1234   reset scaling xx reset progress, xx：jobId reset scaling 1234   check scaling xx Data consistency check with algorithm in server.</description>
    </item>
    
    <item>
      <title>Registry Center</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/registry-center/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/registry-center/</guid>
      <description>Motivation   Centralized configuration: more and more running examples have made it hard to manage separate configurations and asynchronized configurations can cause serious problems. Concentrating them in the configuration center can make the management more effective.
  Dynamic configuration: distribution after configuration modification is another important capability of configuration center. It can support dynamic switch between data sources and rule configurations.
  Hold all ephemeral status data dynamically generated in runtime(such as available proxy instances, disabled datasource instances etc).</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/sharding/</guid>
      <description>Root Configuration Class name: org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
Attributes:
   Name DataType Description Default Value     tables (+) Collection&amp;lt;ShardingTableRuleConfiguration&amp;gt; Sharding table rules -   autoTables (+) Collection&amp;lt;ShardingAutoTableRuleConfiguration&amp;gt; Sharding automatic table rules -   bindingTableGroups (*) Collection&amp;lt;String&amp;gt; Binding table rules Empty   broadcastTables (*) Collection&amp;lt;String&amp;gt; Broadcast table rules Empty   defaultDatabaseShardingStrategy (?) ShardingStrategyConfiguration Default database sharding strategy Not sharding   defaultTableShardingStrategy (?) ShardingStrategyConfiguration Default table sharding strategy Not sharding   defaultKeyGenerateStrategy (?</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/sharding/</guid>
      <description>Configuration Item Explanation spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage# Standard sharding table configurationspring.shardingsphere.rules.sharding.tables.&amp;lt;table-name&amp;gt;.actual-data-nodes= # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only.# Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.# For single sharding column scenariospring.</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/sharding/</guid>
      <description>Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd
&amp;lt;sharding:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   table-rules (?) Tag Sharding table rule configuration   auto-table-rules (?) Tag Automatic sharding table rule configuration   binding-table-rules (?) Tag Binding table rule configuration   broadcast-table-rules (?) Tag Broadcast table rule configuration   default-database-strategy-ref (?) Attribute Default database strategy name   default-table-strategy-ref (?</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/sharding/</guid>
      <description>Configuration Item Explanation dataSources: # Omit the data source configuration, please refer to the usage rules: - !SHARDING tables: # Sharding table configuration &amp;lt;logic-table-name&amp;gt; (+): # Logic table name actualDataNodes (?): # Describe data source names and actual tables (refer to Inline syntax rules) databaseStrategy (?): # Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one. standard: # For single sharding column scenario shardingColumn: # Sharding column name shardingAlgorithmName: # Sharding algorithm name complex: # For multiple sharding columns scenario shardingColumns: # Sharding column names, multiple columns separated with comma shardingAlgorithmName: # Sharding algorithm name hint: # Sharding by hint shardingAlgorithmName: # Sharding algorithm name none: # Do not sharding tableStrategy: # Tables sharding strategy, same as database sharding strategy keyGenerateStrategy: # Key generator strategy column: # Column name of key generator keyGeneratorName: # Key generator name autoTables: # Auto Sharding table configuration t_order_auto: # Logic table name actualDataSources (?</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/sharding-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/sharding-rule/</guid>
      <description>Usage Pre-work  Start the MySQL service Create MySQL database (refer to ShardingSphere-Proxy data source configuration rules) Create a role or user with creation permission for ShardingSphere-Proxy Start Zookeeper service (for persistent configuration)  Start ShardingSphere-Proxy  Add mode and authentication configurations to server.yaml (please refer to the example of ShardingSphere-Proxy) Start ShardingSphere-Proxy (Related introduction)  Create a distributed database and sharding tables  Connect to ShardingSphere-Proxy Create a distributed database  CREATE DATABASE sharding_db; Use newly created database  USE sharding_db; Configure data source information  ADD RESOURCE ds_0 ( HOST=127.</description>
    </item>
    
    <item>
      <title>Sharding Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/sharding/</guid>
      <description>Auto Sharding Algorithm Modulo Sharding Algorithm Type: MOD
Attributes:
   Name DataType Description     sharding-count int Sharding count    Hash Modulo Sharding Algorithm Type: HASH_MOD
Attributes:
   Name DataType Description     sharding-count int Sharding count    Volume Based Range Sharding Algorithm Type: VOLUME_RANGE
Attributes:
   Name DataType Description     range-lower long Range lower bound, throw exception if lower than bound   range-upper long Range upper bound, throw exception if upper than bound   sharding-volume long Sharding volume    Boundary Based Range Sharding Algorithm Type: BOUNDARY_RANGE</description>
    </item>
    
    <item>
      <title>ShardingSphere-JDBC</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-jdbc-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-jdbc-quick-start/</guid>
      <description>1. Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${latest.release.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  Notice: Please change ${latest.release.version} to the actual version.
 2. Rules Configuration ShardingSphere-JDBC can be configured by four methods, Java, YAML, Spring namespace and Spring boot starter. Developers can choose the suitable method according to different situations. Please refer to Configuration Manual for more details.
3. Create Data Source Use ShardingSphereDataSourceFactory and rule configurations to create ShardingSphereDataSource, which implements DataSource interface of JDBC.</description>
    </item>
    
    <item>
      <title>SQL</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/use-norms/sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/use-norms/sql/</guid>
      <description>SQL Supporting Status Compatible with all regular SQL when routing to single data node; The SQL routing to multiple data nodes is pretty complex, it divides the scenarios as totally supported, experimental supported and unsupported.
Totally Supported Fully support DML, DDL, DCL, TCL and most regular DAL. Support complex query with pagination, DISTINCT, ORDER BY, GROUP BY, aggregation and table JOIN.
Regular Query  SELECT Clause  SELECT select_expr [, select_expr .</description>
    </item>
    
    <item>
      <title>SQL Parser</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sql-parser/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sql-parser/</guid>
      <description>DatabaseTypedSQLParserFacade    SPI Name Description     DatabaseTypedSQLParserFacade SQL parser facade for lexer and parser       Implementation Class Description     MySQLParserFacade SQL parser facade for MySQL   PostgreSQLParserFacade SQL parser facade for PostgreSQL   SQLServerParserFacade SQL parser facade for SQLServer   OracleParserFacade SQL parser facade for Oracle   SQL92ParserFacade SQL parser facade for SQL92    SQLVisitorFacade    SPI Name Description     SQLVisitorFacade SQL AST visitor facade       Implementation Class Description     MySQLStatementSQLVisitorFacade SQL visitor of statement extracted facade for MySQL   PostgreSQLStatementSQLVisitorFacade SQL visitor of statement extracted facade for PostgreSQL   SQLServerStatementSQLVisitorFacade SQL visitor of statement extracted facade for SQLServer   OracleStatementSQLVisitorFacade SQL visitor of statement extracted facade for Oracle   SQL92StatementSQLVisitorFacade SQL visitor of statement extracted facade for SQL92    </description>
    </item>
    
    <item>
      <title>SQL Parser Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/module-test/parser-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/module-test/parser-test/</guid>
      <description>Prepare Data Not like Integration test, SQL parse test does not need a specific database environment, just define the sql to parse, and the assert data:
SQL Data As mentioned sql-case-id in Integration test，test-case-id could be shared in different module to test, and the file is at shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/sql/supported/${SQL-TYPE}/*.xml
Assert Data The assert data is at shardingsphere-sql-parser/shardingsphere-sql-parser-test/src/main/resources/case/${SQL-TYPE}/*.xml in that xml file, it could assert against the table name, token or sql condition and so on.</description>
    </item>
    
    <item>
      <title>Table</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/table/</guid>
      <description>Table is the core concept of data sharding transparently. There are diversified tables provided for different data sharding requirements by Apache ShardingSphere.
Logic Table The logical name of the horizontal sharding databases (tables) with the same schema, it is the logical table identification in SQL. For instance, the data of order is divided into 10 tables according to the last number of the primary key, and they are from t_order_0 to t_order_9, whose logic name is t_order.</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/java-api/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using ZooKeeper --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-zookeeper-curator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using Etcd --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-etcd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Using ZooKeeper as config center and registry center for example.
// Omit configure data sources and rule configurations // ...  // Configure ClusterPersistRepositoryConfig ClusterPersistRepositoryConfiguration registryCenterConfig = new ClusterPersistRepositoryConfiguration(&amp;#34;Zookeeper&amp;#34;, &amp;#34;governance-sharding-data-source&amp;#34;, &amp;#34;localhost:2181&amp;#34;, new Properties()); // Configure Cluster Config ModeConfiguration modeConfig = new ModeConfiguration(&amp;#34;Cluster&amp;#34;, registryCenterConfig, true); // Create ShardingSphereDataSource DataSource dataSource = ShardingSphereDataSourceFactory.</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/java-api/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule ShardingSphere-JDBC Java API consists of data sources, rules and properties configuration. The following example is the configuration of 2 databases and 2 tables, whose databases take module and split according to order_id, tables take module and split according to order_id .
Note: The example database connection pool is HikariCP, which can be replaced with other mainstream database connection pools according to business scenarios.</description>
    </item>
    
    <item>
      <title>Use Java API</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/java-api/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using XA transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using BASE transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-base-seata-at&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Use Distributed Transaction TransactionTypeHolder.set(TransactionType.XA); // Support TransactionType.LOCAL, TransactionType.XA, TransactionType.BASE try (Connection conn = dataSource.getConnection()) { // Use ShardingSphereDataSource  conn.setAutoCommit(false); PreparedStatement ps = conn.prepareStatement(&amp;#34;INSERT INTO t_order (user_id, status) VALUES (?, ?)&amp;#34;); ps.setObject(1, 1000); ps.setObject(2, &amp;#34;init&amp;#34;); ps.executeUpdate(); conn.commit(); } </description>
    </item>
    
    <item>
      <title>XA</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/concept/xa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/concept/xa/</guid>
      <description>2PC transaction submit uses the DTP Model defined by X/OPEN, in which created AP (Application Program), TM (Transaction Manager) and RM (Resource Manager) can guarantee a high transaction consistency. TM and RM use XA protocol for bidirectional streaming. Compared with traditional local transactions, XA transactions have a prepared phase, where the database cannot only passively receive commands, but also notify the submitter whether the transaction can be accepted. TM can collect all the prepared results of branch transactions before submitting all of them together, which has guaranteed the distributed consistency.</description>
    </item>
    
    <item>
      <title>XA Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/transaction/2pc-xa-transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/transaction/2pc-xa-transaction/</guid>
      <description>XAShardingSphereTransactionManager is XA transaction manager of Apache ShardingSphere. Its main responsibility is manage and adapt multiple data sources, and sent corresponding transactions to concrete XA transaction manager.
Transaction Begin When receiving set autoCommit=0 from client, XAShardingSphereTransactionManager will use XA transaction managers to start overall XA transactions, which is marked by XID.
Execute actual sharding SQL After XAShardingSphereTransactionManager register the corresponding XAResource to the current XA transaction, transaction manager will send XAResource.</description>
    </item>
    
    <item>
      <title>YAML configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/yaml-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/yaml-configuration/</guid>
      <description>5.0.0-alpha Data Sharding Configuration Item Explanation dataSources: # Omit the data source configuration, please refer to the usage rules: - !SHARDING tables: # Sharding table configuration &amp;lt;logic-table-name&amp;gt; (+): # Logic table name actualDataNodes (?): # Describe data source names and actual tables (refer to Inline syntax rules) databaseStrategy (?): # Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one. standard: # For single sharding column scenario shardingColumn: # Sharding column name shardingAlgorithmName: # Sharding algorithm name complex: # For multiple sharding columns scenario shardingColumns: # Sharding column names, multiple columns separated with comma shardingAlgorithmName: # Sharding algorithm name hint: # Sharding by hint shardingAlgorithmName: # Sharding algorithm name none: # Do not sharding tableStrategy: # Tables sharding strategy, same as database sharding strategy keyGenerateStrategy: # Key generator strategy column: # Column name of key generator keyGeneratorName: # Key generator name autoTables: # Auto Sharding table configuration t_order_auto: # Logic table name actualDataSources (?</description>
    </item>
    
    <item>
      <title>Agent Integration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/observability/agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/observability/agent/</guid>
      <description>Background ShardingSphere-Agent is an independent and independently designed project based on ByteBuddy bytecode increase. Based on plugin design, it can integrate seamlessly with ShardingSphere. There are currently Log, metrics, APM and other observability capabilities available.
Usage Local build  &amp;gt; cd shardingsphere/shardingsphere-agent&amp;gt; mvn clean installRemote download（No release）  &amp;gt; weget http://xxxxx/shardingsphere-agent.tar.gz&amp;gt; tar -zxvcf shardingsphere-agent.tar.gzAdd startup arguments
-javaagent:\absolute path\shardingsphere-agent.jarAgent Configuration It is found under the local package directory and unzip directory : agent.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/authentication/</guid>
      <description>It is used to verify the authentication to log in ShardingSphere-Proxy, which must use correct user name and password after the configuration of them.
rules: - !AUTHORITY users: - root@localhost:root # &amp;lt;username&amp;gt;@&amp;lt;hostname&amp;gt;:&amp;lt;password&amp;gt; - sharding@:sharding provider: type: ALL_PRIVILEGES_PERMITTED If the hostname is % or empty, it means no restrict to the user&amp;rsquo;s host.
The type of the provider must be explicitly specified. Refer to 6.11 Proxy for more implementations.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/configuration/</guid>
      <description>RuleBuilder    SPI Name Description     RuleBuilder Used to convert user configurations to rule objects       Implementation Class Description     AlgorithmProvidedReadwriteSplittingRuleBuilder Used to convert algorithm-based read-write separation user configuration into read-write separation rule objects   AlgorithmProvidedDatabaseDiscoveryRuleBuilder Used to convert algorithm-based database discovery user configuration into database discovery rule objects   AlgorithmProvidedShardingRuleBuilder Used to convert algorithm-based sharding user configuration into sharding rule objects   AlgorithmProvidedEncryptRuleBuilder Used to convert algorithm-based encryption user configuration into encryption rule objects   AlgorithmProvidedShadowRuleBuilder Used to convert algorithm-based shadow database user configuration into shadow database rule objects   ReadwriteSplittingRuleBuilder Used to convert read-write separation user configuration into read-write separation rule objects   DatabaseDiscoveryRuleBuilder Used to convert database discovery user configuration into database discovery rule objects   SingleTableRuleBuilder Used to convert single-table user configuration into a single-table rule objects   AuthorityRuleBuilder Used to convert permission user configuration into permission rule objects   ShardingRuleBuilder Used to convert sharding user configuration into sharding rule objects   EncryptRuleBuilder Used to convert encrypted user configuration into encryption rule objects   ShadowRuleBuilder Used to convert shadow database user configuration into shadow database rule objects   TransactionRuleBuilder Used to convert transaction user configuration into transaction rule objects    YamlRuleConfigurationSwapper    SPI Name Description     YamlRuleConfigurationSwapper Used to convert YAML configuration to standard user configuration       Implementation Class Description     ReadwriteSplittingRuleAlgorithmProviderConfigurationYamlSwapper Used to convert algorithm-based read-write separation configuration into read-write separation standard configuration   DatabaseDiscoveryRuleAlgorithmProviderConfigurationYamlSwapper Used to convert algorithm-based database discovery configuration into database discovery standard configuration   ShardingRuleAlgorithmProviderConfigurationYamlSwapper Used to convert algorithm-based sharding configuration into sharding standard configuration   EncryptRuleAlgorithmProviderConfigurationYamlSwapper Used to convert algorithm-based encryption configuration into encryption standard configuration    ShadowRuleAlgorithmProviderConfigurationYamlSwapper Used to convert algorithm-based shadow database configuration into shadow database standard configuration   ReadwriteSplittingRuleConfigurationYamlSwapper Used to convert the YAML configuration of read-write separation into the standard configuration of read-write separation   DatabaseDiscoveryRuleConfigurationYamlSwapper Used to convert the YAML configuration of database discovery into the standard configuration of database discovery   AuthorityRuleConfigurationYamlSwapper Used to convert the YAML configuration of permission rules into standard configuration of permission rules   ShardingRuleConfigurationYamlSwapper Used to convert the YAML configuration of the shard into the standard configuration of the shard   EncryptRuleConfigurationYamlSwapper Used to convert encrypted YAML configuration into encrypted standard configuration   ShadowRuleConfigurationYamlSwapper Used to convert the YAML configuration of the shadow database into the standard configuration of the shadow database   TransactionRuleConfigurationYamlSwapper Used to convert the YAML configuration of the transaction into the standard configuration of the transaction    ShardingSphereYamlConstruct    SPI Name Description     ShardingSphereYamlConstruct Used to convert customized objects and YAML to each other       Implementation Class Description     NoneShardingStrategyConfigurationYamlConstruct Used to convert non sharding strategy and YAML to each other    </description>
    </item>
    
    <item>
      <title>Data Node</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/datanode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/datanode/</guid>
      <description>As the atomic unit of sharding, it consists of data source name and actual table name, e.g. ds_0.t_order_0.
Mapping relationship between logic tables and actual tables and can be divided into two kinds: uniform topology and user-defined topology.
Uniform topology It means that tables are evenly distributed in each data source, for example:
db0├── t_order0└── t_order1db1├── t_order0└── t_order1The data node configurations will be as follows:</description>
    </item>
    
    <item>
      <title>Governance</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/governance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/governance/</guid>
      <description>ShardingSphere-Proxy use SPI to support Governance, realize the unified management of configurations and metadata, as well as instance disabling and replica disabling.
Zookeeper ShardingSphere-Proxy has provided the solution of Zookeeper in default, which implements the functions of config center, registry center. Configuration Rules consistent with ShardingSphere-JDBC YAML.
Other Third Party Components Refer to Supported Third Party Components for details.
 Use SPI methods in logic coding and put the generated jar package to the lib folder of ShardingSphere-Proxy.</description>
    </item>
    
    <item>
      <title>Java API</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/java-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/java-api/</guid>
      <description>5.0.0-beta Sharding Root Configuration Class name: org.apache.shardingsphere.sharding.api.config.ShardingRuleConfiguration
Attributes:
   Name DataType Description Default Value     tables (+) Collection&amp;lt;ShardingTableRuleConfiguration&amp;gt; Sharding table rules -   autoTables (+) Collection&amp;lt;ShardingAutoTableRuleConfiguration&amp;gt; Sharding automatic table rules -   bindingTableGroups (*) Collection&amp;lt;String&amp;gt; Binding table rules Empty   broadcastTables (*) Collection&amp;lt;String&amp;gt; Broadcast table rules Empty   defaultDatabaseShardingStrategy (?) ShardingStrategyConfiguration Default database sharding strategy Not sharding   defaultTableShardingStrategy (?) ShardingStrategyConfiguration Default table sharding strategy Not sharding   defaultKeyGenerateStrategy (?</description>
    </item>
    
    <item>
      <title>Key Generate Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/keygen/</guid>
      <description>Snowflake Type: SNOWFLAKE
Attributes:
   Name DataType Description Default Value     worker-id (?) long The unique ID for working machine 0   max-tolerate-time-difference-milliseconds (?) long The max tolerate time for different server&amp;rsquo;s time difference in milliseconds 10 milliseconds   max-vibration-offset (?) int The max upper limit value of vibrate number, range [0, 4096). Notice: To use the generated value of this algorithm as sharding value, it is recommended to configure this property.</description>
    </item>
    
    <item>
      <title>Manual</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-scaling/usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-scaling/usage/</guid>
      <description>Manual Environment JAVA，JDK 1.8+.
The migration scene we support:
   Source Target     MySQL(5.1.15 ~ 5.7.x) MySQL   PostgreSQL(9.4 ~ ) PostgreSQL   openGauss(2.1.0) openGauss    Attention:
If the backend database is MySQL, please download mysql-connector-java-5.1.47.jar and put it into ${shardingsphere-proxy}/lib directory.
Privileges We need to enable binlog for MySQL. Privileges of users scaling used should include Replication privileges.
+-----------------------------------------+---------------------------------------+| Variable_name | Value |+-----------------------------------------+---------------------------------------+| log_bin | ON || binlog_format | ROW || binlog_row_image | FULL |+-----------------------------------------+---------------------------------------++------------------------------------------------------------------------------+|Grants for ${username}@${host} |+------------------------------------------------------------------------------+|GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.</description>
    </item>
    
    <item>
      <title>Pagination</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/use-norms/pagination/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/use-norms/pagination/</guid>
      <description>Totally support pagination queries of MySQL, PostgreSQL and Oracle; partly support SQLServer pagination query due to its complexity.
Pagination Performance Performance Bottleneck Pagination with query offset too high can lead to a low data accessibility, take MySQL as an example:
SELECT * FROM t_order ORDER BY id LIMIT 1000000, 10 This SQL will make MySQL acquire another 10 records after skipping 1,000,000 records when it is not able to use indexes.</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/postgresql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/postgresql/</guid>
      <description>The unsupported SQL list for PostgreSQL are as follows:
TODO</description>
    </item>
    
    <item>
      <title>Readwrite splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/readwrite-splitting/</guid>
      <description>Configuration Item Explanation spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usagespring.shardingsphere.rules.readwrite-splitting.data-sources.&amp;lt;readwrite-splitting-data-source-name&amp;gt;.primary-data-source-name= # Write data source namespring.shardingsphere.rules.readwrite-splitting.data-sources.&amp;lt;readwrite-splitting-data-source-name&amp;gt;.replica-data-source-names= # Read data source names, multiple data source names separated with commaspring.shardingsphere.rules.readwrite-splitting.data-sources.&amp;lt;readwrite-splitting-data-source-name&amp;gt;.load-balancer-name= # Load balance algorithm name# Load balance algorithm configurationspring.shardingsphere.rules.readwrite-splitting.load-balancers.&amp;lt;load-balance-algorithm-name&amp;gt;.type= # Load balance algorithm typespring.shardingsphere.rules.readwrite-splitting.load-balancers.&amp;lt;load-balance-algorithm-name&amp;gt;.props.xxx= # Load balance algorithm propertiesPlease refer to Built-in Load Balance Algorithm List for more details about type of algorithm.</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/readwrite-splitting/</guid>
      <description>Root Configuration Class name: ReadwriteSplittingRuleConfiguration
Attributes:
   Name DataType Description     dataSources (+) Collection&amp;lt;ReadwriteSplittingDataSourceRuleConfiguration&amp;gt; Data sources of write and reads   loadBalancers (*) Map&amp;lt;String, ShardingSphereAlgorithmConfiguration&amp;gt; Load balance algorithm name and configurations of replica data sources    Readwrite-splitting Data Source Configuration Class name: ReadwriteSplittingDataSourceRuleConfiguration
Attributes:
   Name DataType Description Default Value     name String Readwrite-splitting data source name -   writeDataSourceName String Write sources source name -   readDataSourceNames (+) Collection&amp;lt;String&amp;gt; Read sources source name list -   loadBalancerName (?</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/readwrite-splitting/</guid>
      <description>Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting-5.0.0.xsd
&amp;lt;readwrite-splitting:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   data-source-rule (+) Tag Readwrite-splitting data source rule configuration    &amp;lt;readwrite-splitting:data-source-rule /&amp;gt;
   Name Type Description     id Attribute Readwrite-splitting data source rule name   write-data-source-name Attribute Write data source name   read-data-source-names Attribute Read data source names, multiple data source names separated with comma   load-balance-algorithm-ref Attribute Load balance algorithm name    &amp;lt;readwrite-splitting:load-balance-algorithm /&amp;gt;</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/readwrite-splitting/</guid>
      <description>Configuration Item Explanation dataSource: # Omit the data source configuration, please refer to the usage rules: - !READWRITE_SPLITTING dataSources: &amp;lt;data-source-name&amp;gt; (+): # Logic data source name of readwrite-splitting writeDataSourceName: # Write data source name readDataSourceNames: - &amp;lt;read-data-source-name&amp;gt; (+) # Read data source name loadBalancerName: # Load balance algorithm name # Load balance algorithm configuration loadBalancers: &amp;lt;load-balancer-name&amp;gt; (+): # Load balance algorithm name type: # Load balance algorithm type props: # Load balance algorithm properties # .</description>
    </item>
    
    <item>
      <title>readwrite_splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/readwirte-splitting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/readwirte-splitting-rule/</guid>
      <description>Usage Pre-work  Start the MySQL service Create MySQL database (refer to ShardingProxy data source configuration rules) Create a role or user with creation permission for ShardingProxy Start Zookeeper service (for persistent configuration)  Start ShardingProxy  Add mode and authentication configurations to server.yaml (please refer to the example of ShardingProxy) Start ShardingProxy (Related introduction)  Create a distributed database and sharding tables  Connect to ShardingProxy Create a distributed database  CREATE DATABASE readwrite_splitting_db; Use newly created database  USE readwrite_splitting_db; Configure data source information  ADD RESOURCE write_ds ( HOST=127.</description>
    </item>
    
    <item>
      <title>Route Engine</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/route/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/route/</guid>
      <description>It refers to the sharding strategy that matches databases and tables according to the parsing context and generates route path. SQL with sharding keys can be divided into single-sharding route (equal mark as the operator of sharding key), multiple-sharding route (IN as the operator of sharding key) and range sharding route (BETWEEN as the operator of sharding key). SQL without sharding key adopts broadcast route.
Sharding strategies can usually be set in the database or by users.</description>
    </item>
    
    <item>
      <title>Seata BASE transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/transaction/base-transaction-seata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/transaction/base-transaction-seata/</guid>
      <description>When integrating Seata AT transaction, we need to integrate TM, RM and TC component into ShardingSphere transaction manager. Seata have proxied DataSource interface in order to RPC with TC. Similarly, Apache ShardingSphere faced to DataSource interface to aggregate data sources too. After Seata DataSource encapsulation, it is easy to put Seata AT transaction into Apache ShardingSphere sharding ecosystem.
Init Seata Engine When an application containing ShardingSphereTransactionBaseSeataAT startup, the user-configured DataSource will be wrapped into seata DataSourceProxy through seata.</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-sharding-rule/</guid>
      <description>Definition Sharding Table Rule CREATE SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ... CREATE DEFAULT SHARDING shardingScope STRATEGY (shardingStrategy) ALTER SHARDING TABLE RULE shardingTableRuleDefinition [, shardingTableRuleDefinition] ... DROP SHARDING TABLE RULE tableName [, tableName] ... CREATE SHARDING ALGORITHM shardingAlgorithmDefinition [, shardingAlgorithmDefinition] ... DROP SHARDING ALGORITHM algorithmName [, algorithmName] ... shardingTableRuleDefinition: shardingAutoTableRule | shardingTableRule shardingAutoTableRule: tableName(resources (COMMA shardingColumn)? (COMMA algorithmDefinition)? (COMMA keyGenerateStrategy)?) shardingTableRule: tableName(dataNodes (COMMA databaseStrategy)? (COMMA tableStrategy)? (COMMA keyGenerateStrategy)?) resources: RESOURCES(resource [, resource] .</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-sharding-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-sharding-rule/</guid>
      <description>Definition Sharding Table Rule SHOW SHARDING TABLE tableRule | RULES [FROM schemaName] SHOW SHARDING ALGORITHMS [FROM schemaName] tableRule: RULE tableName  Support query all data fragmentation rules and specified table query Support query all sharding algorithms  Sharding Binding Table Rule SHOW SHARDING BINDING TABLE RULES [FROM schemaName] Sharding Broadcast Table Rule SHOW SHARDING BROADCAST TABLE RULES [FROM schemaName] Description Sharding Table Rule    Column Description     table Logical table name   actual_data_nodes Actual data node   actual_data_sources Actual data source（Displayed when creating rules by RDL）   database_strategy_type Database sharding strategy type   database_sharding_column Database sharding column   database_sharding_algorithm_type Database sharding algorithm type   database_sharding_algorithm_props Database sharding algorithm parameter   table_strategy_type Table sharding strategy type   table_sharding_column Table sharding column   table_sharding_algorithm_type Database sharding algorithm type   table_sharding_algorithm_props Database sharding algorithm parameter   key_generate_column Distributed primary key generation column   key_generator_type Distributed primary key generation type   key_generator_props Distributed primary key generation parameter    Sharding Algorithms    Column Description     name Sharding algorithm name   type Sharding algorithm type   props Sharding algorithm parameters    Sharding Binding Table Rule    Column Description     sharding_binding_tables sharding Binding Table list    Sharding Broadcast Table Rule    Column Description     sharding_broadcast_tables sharding Broadcast Table list    Example Sharding Table Rule SHOW SHARDING TABLE RULES</description>
    </item>
    
    <item>
      <title>ShardingSphere-Proxy</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-proxy-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-proxy-quick-start/</guid>
      <description>1. Rule Configuration Edit %SHARDINGSPHERE_PROXY_HOME%/conf/config-xxx.yaml. Please refer to Configuration Manual for more details.
Edit %SHARDINGSPHERE_PROXY_HOME%/conf/server.yaml. Please refer to Configuration Manual for more details.
 %SHARDINGSPHERE_PROXY_HOME% is the shardingsphere proxy extract path. for example: /Users/ss/shardingsphere-proxy-bin/
 2. Import Dependencies If the backend database is PostgreSQL, there&amp;rsquo;s no need for additional dependencies.
If the backend database is MySQL, please download mysql-connector-java-5.1.47.jar or mysql-connector-java-8.0.11.jar and put it into %SHARDINGSPHERE_PROXY_HOME%/lib directory.
3. Start Server  Use default configuration to start  sh %SHARDINGSPHERE_PROXY_HOME%/bin/start.</description>
    </item>
    
    <item>
      <title>SQL Rewrite Test</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/module-test/rewrite-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/test/module-test/rewrite-test/</guid>
      <description>Target Facing logic databases and tables cannot be executed directly in actual databases. SQL rewrite is used to rewrite logic SQL into rightly executable ones in actual databases, including two parts, correctness rewrite and optimization rewrite. rewrite tests are for these targets.
Test The rewrite tests are in the test folder under sharding-core/sharding-core-rewrite . Followings are the main part for rewrite tests:
 test engine environment configuration assert data  Test engine is the entrance of rewrite tests, just like other test engines, through Junit Parameterized, read every and each data in the xml file under the target test type in test\resources, and then assert by the engine one by one</description>
    </item>
    
    <item>
      <title>Third-party Components</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/dependency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/dependency/</guid>
      <description>Apache ShardingSphere uses SPI to load data to the config center and registry center and disable instances and databases. Currently, Apache ShardingSphere supports frequently used registry centers, Zookeeper, Etcd, Apollo and Nacos. In addition, by injecting them to ShardingSphere with SPI, users can use other third-party config and registry centers to enable databases governance.
    Driver Version Config Center Registry Center     Zookeeper Apache Curator 3.</description>
    </item>
    
    <item>
      <title>Use Norms</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/encrypt/use-norms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/encrypt/use-norms/</guid>
      <description>Supported  Encrypt/decrypt one or more columns in the database table; Compatible with all regular SQL.  Unsupported  Need to process original inventory data before encryption; The value of encryption columns cannot support comparison, such as: &amp;gt;, &amp;lt;, ORDER BY, BETWEEN, LIKE, etc; The value of encryption columns cannot support calculation, such as AVG, SUM, and calculation expressions.  </description>
    </item>
    
    <item>
      <title>Use Norms</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/readwrite-splitting/use-norms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/readwrite-splitting/use-norms/</guid>
      <description>Supported  Provide the readwrite-splitting configuration of one primary database with multiple replica databases, which can be used alone or with sharding table and database; Primary nodes need to be used for both reading and writing in the transaction; Forcible primary database route based on SQL Hint;  Unsupported  Data replication between the primary and the replica databases; Data inconsistency caused by replication delay between databases; Double or multiple primary databases to provide write operation; The data for transaction across primary and replica nodes are inconsistent; In the readwrite-splitting model, primary nodes need to be used for both reading and writing in the transaction.</description>
    </item>
    
    <item>
      <title>Use Norms</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/shadow/use-norms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/shadow/use-norms/</guid>
      <description>Shadow database Supported  The database is MySQL, Oracle, PostgreSQL, SQLServer;  Unsupported  NoSQL database;  Shadow algorithm Supported  The note shadow algorithm supports MDL and DDL statements; The column shadow algorithm basically supports commonly used MDL statements;  Unsupported  Column shadow algorithm does not support DDL statements； The column shadow algorithm does not support range value matching operations, for example: subQuery, BETWEEN, GROUP BY &amp;hellip; HAVING&amp;hellip;; Use shadow library function + sub-library sub-table function, some special SQL is not supported, please refer toSQL Usage Specification  Column shadow algorithm DML statement support list  INSERT statement  Judge the inserted column and inserted value of INSERT operation</description>
    </item>
    
    <item>
      <title>Use Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/spring-boot-starter/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using XA transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using BASE transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-base-seata-at&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Transaction Manager @Configuration @EnableTransactionManagement public class TransactionConfiguration { @Bean public PlatformTransactionManager txManager(final DataSource dataSource) { return new DataSourceTransactionManager(dataSource); } @Bean public JdbcTemplate jdbcTemplate(final DataSource dataSource) { return new JdbcTemplate(dataSource); } } Use Distributed Transaction @Transactional @ShardingSphereTransactionType(TransactionType.XA) // Support TransactionType.</description>
    </item>
    
    <item>
      <title>Use YAML</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/yaml/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using ZooKeeper --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-zookeeper-curator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using Etcd --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-etcd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Using ZooKeeper as config center and registry center for example.
mode: type: Cluster repository: type: ZooKeeper props: namespace: governance_ds server-lists: localhost:2181 overwrite: true // Create ShardingSphereDataSource DataSource dataSource = YamlShardingSphereDataSourceFactory.createDataSource(yamlFile); Use ShardingSphereDataSource The ShardingSphereDataSource created by YamlShardingSphereDataSourceFactory implements the standard JDBC DataSource interface.</description>
    </item>
    
    <item>
      <title>Use YAML</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/yaml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/yaml/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule ShardingSphere-JDBC YAML file consists of data sources, rules and properties configuration. The following example is the configuration of 2 databases and 2 tables, whose databases take module and split according to order_id, tables take module and split according to order_id.
Note: The example database connection pool is HikariCP, which can be replaced with other mainstream database connection pools according to business scenarios.</description>
    </item>
    
    <item>
      <title>User Norms</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/scaling/use-norms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/scaling/use-norms/</guid>
      <description>Supported  Migrate data outside into databases which managed by Apache ShardingSphere; Scale out data between data nodes of Apache ShardingSphere.  Unsupported  Scale table without primary key, primary key can not be composite; Scale table with composite primary key; Do not support scale on in used databases, need to prepare a new database cluster for target.  </description>
    </item>
    
    <item>
      <title>XA</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/xa/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/xa/</guid>
      <description>Supported  Support cross-database transactions after sharding; Operation atomicity and high data consistency in 2PC transactions; When service is down and restarted, commit and rollback transactions can be recovered automatically; Support use XA and non-XA connection pool together.  Unsupported  Recover committing and rolling back in other machines after the service is down.  </description>
    </item>
    
    <item>
      <title>BASE</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/concept/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/concept/base/</guid>
      <description>A paper published in 2008 first mentioned on BASE transaction, it advocates the use of eventual consistency to instead of consistency when improve concurrency of transaction processing.
TCC and Sage are two regular implementations. They use reverse operation implemented by developers themselves to ensure the eventual consistency when data rollback. SEATA implements SQL reverse operation automatically, so that BASE transaction can be used without the intervention of developers.
Apache ShardingSphere integrates SEATA as solution of BASE transaction.</description>
    </item>
    
    <item>
      <title>BASE</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/transaction/use-norms/base/</guid>
      <description>Supported  Support cross-database transactions after sharding; Support RC isolation level; Rollback transaction according to undo log; Support recovery committing transaction automatically after the service is down.  Unsupported  Do not support other isolation level except RC.  To Be Optimized  SQL parsed twice by Apache ShardingSphere and SEATA.  </description>
    </item>
    
    <item>
      <title>Change History</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/change-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/governance/management/change-history/</guid>
      <description>5.0.0-alpha Config Center Structure in Configuration Center namespace ├──users # Users configuration ├──props # Properties configuration ├──schemas # Schema configuration ├ ├──${schema_1} # Schema name 1 ├ ├ ├──datasource # Datasource configuration ├ ├ ├──rule # Rule configuration ├ ├ ├──table # Table configuration ├ ├──${schema_2} # Schema name 2 ├ ├ ├──datasource # Datasource configuration ├ ├ ├──rule # Rule configuration ├ ├ ├──table # Table configuration Registry Center Data Structure in Registry Center namespace ├──states ├ ├──proxynodes ├ ├ ├──${your_instance_ip_a}@${your_instance_pid_x}@${UUID} ├ ├ ├──${your_instance_ip_b}@${your_instance_pid_y}@${UUID} ├ ├ ├──.</description>
    </item>
    
    <item>
      <title>Distributed Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/transaction/</guid>
      <description>ShardingSphere-Proxy supports LOCAL, XA, BASE transactions, LOCAL transaction is default value, it is original transaction of relational database.
XA transaction Default XA transaction manager of ShardingSphere is Atomikos. Users can customize Atomikos configuration items through adding jta.properties in conf catalog of ShardingSphere-Proxy. Please refer to Official Documents of Atomikos for detailed configurations.
 Use Narayana XA Transaction Manager。   Copy the jar file required by Narayana to conf/lib. The reference package is as follows:  &amp;lt;properties&amp;gt; &amp;lt;narayana.</description>
    </item>
    
    <item>
      <title>Docker Image</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/docker/</guid>
      <description>Pull Official Docker Image docker pull apache/shardingsphere-proxy Build Docker Image Manually (Optional) git clone https://github.com/apache/shardingsphere mvn clean install cd shardingsphere-distribution/shardingsphere-proxy-distribution mvn clean package -Prelease,docker Configure ShardingSphere-Proxy Create server.yaml and config-xxx.yaml to configure sharding rules and server rule in /${your_work_dir}/conf/. Please refer to Configuration Manual. Please refer to Example.
Run Docker docker run -d -v /${your_work_dir}/conf:/opt/shardingsphere-proxy/conf -e PORT=3308 -p13308:3308 apache/shardingsphere-proxy:latest Notice
 You can define port 3308 and 13308 by yourself. 3308 refers to docker port; 13308 refers to the host port.</description>
    </item>
    
    <item>
      <title>Encrypt</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/encrypt-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/encrypt-rule/</guid>
      <description>Usage Pre-work  Start the MySQL service Create MySQL database (refer to ShardingProxy data source configuration rules) Create a role or user with creation permission for ShardingProxy Start Zookeeper service (for persistent configuration)  Start ShardingProxy  Add mode and authentication configurations to server.yaml (please refer to the example of ShardingProxy) Start ShardingProxy (Related introduction)  Create a distributed database and sharding tables  Connect to ShardingProxy Create a distributed database  CREATE DATABASE encrypt_db; Use newly created database  USE encrypt_db; Configure data source information  ADD RESOURCE ds_0 ( HOST=127.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/encrypt/</guid>
      <description>Root Configuration Class name: org.apache.shardingsphere.encrypt.api.config.EncryptRuleConfiguration
Attributes:
   Name DataType Description Default Value     tables (+) Collection&amp;lt;EncryptTableRuleConfiguration&amp;gt; Encrypt table rule configurations    encryptors (+) Map&amp;lt;String, ShardingSphereAlgorithmConfiguration&amp;gt; Encrypt algorithm name and configurations    queryWithCipherColumn (?) boolean Whether query with cipher column for data encrypt. User you can use plaintext to query if have true    Encrypt Table Rule Configuration Class name: org.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/encrypt/</guid>
      <description>Configuration Item Explanation spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usagespring.shardingsphere.rules.encrypt.tables.&amp;lt;table-name&amp;gt;.query-with-cipher-column= # Whether the table uses cipher columns for queryspring.shardingsphere.rules.encrypt.tables.&amp;lt;table-name&amp;gt;.columns.&amp;lt;column-name&amp;gt;.cipher-column= # Cipher column namespring.shardingsphere.rules.encrypt.tables.&amp;lt;table-name&amp;gt;.columns.&amp;lt;column-name&amp;gt;.assisted-query-column= # Assisted query column namespring.shardingsphere.rules.encrypt.tables.&amp;lt;table-name&amp;gt;.columns.&amp;lt;column-name&amp;gt;.plain-column= # Plain column namespring.shardingsphere.rules.encrypt.tables.&amp;lt;table-name&amp;gt;.columns.&amp;lt;column-name&amp;gt;.encryptor-name= # Encrypt algorithm name# Encrypt algorithm configurationspring.shardingsphere.rules.encrypt.encryptors.&amp;lt;encrypt-algorithm-name&amp;gt;.type= # Encrypt algorithm typespring.shardingsphere.rules.encrypt.encryptors.&amp;lt;encrypt-algorithm-name&amp;gt;.props.xxx= # Encrypt algorithm propertiesspring.shardingsphere.rules.encrypt.queryWithCipherColumn= # Whether query with cipher column for data encrypt. User you can use plaintext to query if havePlease refer to Built-in Encrypt Algorithm List for more details about type of algorithm.</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/encrypt/</guid>
      <description>Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt-5.0.0.xsd
&amp;lt;encrypt:rule /&amp;gt;
   Name Type Description Default Value     id Attribute Spring Bean Id    queryWithCipherColumn (?) Attribute Whether query with cipher column for data encrypt. User you can use plaintext to query if have true   table (+) Tag Encrypt table configuration     &amp;lt;encrypt:table /&amp;gt;
   Name Type Description     name Attribute Encrypt table name   column (+) Tag Encrypt column configuration   query-with-cipher-column(?</description>
    </item>
    
    <item>
      <title>Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/encrypt/</guid>
      <description>Configuration Item Explanation dataSources: # Omit the data source configuration, please refer to the usage rules: - !ENCRYPT tables: &amp;lt;table-name&amp;gt; (+): # Encrypt table name columns: &amp;lt;column-name&amp;gt; (+): # Encrypt logic column name cipherColumn: # Cipher column name assistedQueryColumn (?): # Assisted query column name plainColumn (?): # Plain column name encryptorName: # Encrypt algorithm name # Encrypt algorithm configuration encryptors: &amp;lt;encrypt-algorithm-name&amp;gt; (+): # Encrypt algorithm name type: # Encrypt algorithm type props: # Encrypt algorithm properties # .</description>
    </item>
    
    <item>
      <title>Kernel</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/kernel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/kernel/</guid>
      <description>DatabaseType    SPI Name Description     DatabaseType Supported database type       Implementation Class Description     SQL92DatabaseType SQL92 database type   MySQLDatabaseType MySQL database   MariaDBDatabaseType MariaDB database   PostgreSQLDatabaseType PostgreSQL database   OracleDatabaseType Oracle database   SQLServerDatabaseType SQLServer database   H2DatabaseType H2 database   OpenGaussDatabaseType OpenGauss database    DialectTableMetaDataLoader    SPI Name Description     DialectTableMetaDataLoader Use SQL dialect to load meta data rapidly       Implementation Class Description     MySQLTableMetaDataLoader Use MySQL dialect to load meta data   OracleTableMetaDataLoader Use Oracle dialect to load meta data   PostgreSQLTableMetaDataLoader Use PostgreSQL dialect to load meta data   SQLServerTableMetaDataLoader Use SQLServer dialect to load meta data   H2TableMetaDataLoader Use H2 dialect to load meta data   OpenGaussTableMetaDataLoader Use OpenGauss dialect to load meta data    SQLRouter    SPI Name Description     SQLRouter Used to process routing results       Implementation Class Description     ReadwriteSplittingSQLRouter Used to process read-write separation routing results   DatabaseDiscoverySQLRouter Used to process database discovery routing results   SingleTableSQLRouter Used to process single-table routing results   ShardingSQLRouter Used to process sharding routing results   ShadowSQLRouter Used to process shadow database routing results    SQLRewriteContextDecorator    SPI Name Description     SQLRewriteContextDecorator Used to process SQL rewrite results       SPI Name Description     ShardingSQLRewriteContextDecorator Used to process sharding SQL rewrite results   EncryptSQLRewriteContextDecorator Used to process encryption SQL rewrite results   ShadowSQLRewriteContextDecorator Used to process shadow SQL rewrite results    SQLExecutionHook    SPI Name Description     SQLExecutionHook Hook of SQL execution       Implementation Class Description     TransactionalSQLExecutionHook Transaction hook of SQL execution    ResultProcessEngine    SPI Name Description     ResultProcessEngine Used by merge engine to process result set       Implementation Class Description     ShardingResultMergerEngine Used by merge engine to process sharding result set   EncryptResultDecoratorEngine Used by merge engine to process encryption result set    StoragePrivilegeHandler    SPI Name Description     StoragePrivilegeHandler Use SQL dialect to process privilege metadata       Implementation Class Description     PostgreSQLPrivilegeHandler Use PostgreSQL dialect to process privilege metadata   SQLServerPrivilegeHandler Use SQLServer dialect to process privilege metadata   OraclePrivilegeHandler Use Oracle dialect to process privilege metadata   MySQLPrivilegeHandler Use MySQL dialect to process privilege metadata    </description>
    </item>
    
    <item>
      <title>Load Balance Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/load-balance/</guid>
      <description>Round Robin Algorithm Type: ROUND_ROBIN
Attributes: None
Random Algorithm Type: RANDOM
Attributes: None</description>
    </item>
    
    <item>
      <title>Properties Configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/props/</guid>
      <description>Introduction Apache ShardingSphere provides the way of property configuration to configure system level configuration.
Configuration Item Explanation    Name Data Type Description Default Value Whether to support dynamic modification     sql-show (?) boolean Whether show SQL or not in log. Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result. Enable this property will log into log topic ShardingSphere-SQL, log level is INFO.</description>
    </item>
    
    <item>
      <title>Readwrite-Splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-readwrite-splitting-rule/</guid>
      <description>Definition CREATE READWRITE_SPLITTING RULE readwriteSplittingRuleDefinition [, readwriteSplittingRuleDefinition] ... ALTER READWRITE_SPLITTING RULE readwriteSplittingRuleDefinition [, readwriteSplittingRuleDefinition] ... DROP READWRITE_SPLITTING RULE ruleName [, ruleName] ... readwriteSplittingRuleDefinition: ruleName ([staticReadwriteSplittingRuleDefinition | dynamicReadwriteSplittingRuleDefinition] [, loadBanlancerDefinition]) staticReadwriteSplittingRuleDefinition: WRITE_RESOURCE=writeResourceName, READ_RESOURCES(resourceName [, resourceName] ... ) dynamicReadwriteSplittingRuleDefinition: AUTO_AWARE_RESOURCE=resourceName loadBanlancerDefinition: TYPE(NAME=loadBanlancerType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  Support the creation of static readwrite-splitting rules and dynamic readwrite-splitting rules Dynamic readwrite-splitting rules rely on database discovery rules loadBanlancerType specifies the load balancing algorithm type, please refer to Load Balance Algorithm Duplicate ruleName will not be created  Example // Static CREATE READWRITE_SPLITTING RULE ms_group_0 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds_0,read_ds_1), TYPE(NAME=random) ); // Dynamic CREATE READWRITE_SPLITTING RULE ms_group_1 ( AUTO_AWARE_RESOURCE=group_0, TYPE(NAME=random,PROPERTIES(read_weight=&amp;#39;2:1&amp;#39;)) ); ALTER READWRITE_SPLITTING RULE ms_group_1 ( WRITE_RESOURCE=write_ds, READ_RESOURCES(read_ds_0,read_ds_1,read_ds_2), TYPE(NAME=random,PROPERTIES(read_weight=&amp;#39;2:0&amp;#39;)) ); DROP READWRITE_SPLITTING RULE ms_group_1; </description>
    </item>
    
    <item>
      <title>Readwrite-Splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-readwrite-splitting-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-readwrite-splitting-rule/</guid>
      <description>Definition SHOW READWRITE_SPLITTING RULES [FROM schemaName] Description    Column Description     name Rule name   auto_aware_data_source_name Auto-Aware discovery data source name（Display configuration dynamic readwrite splitting rules）   write_data_source_name Write data source name   read_data_source_names Read data source name list   load_balancer_type Load balance algorithm type   load_balancer_props Load balance algorithm parameter    Example Static Readwrite Splitting Rules
mysql&amp;gt; show readwrite_splitting rules; +------------+-----------------------------+------------------------+------------------------+--------------------+---------------------+ | name | auto_aware_data_source_name | write_data_source_name | read_data_source_names | load_balancer_type | load_balancer_props | +------------+-----------------------------+------------------------+------------------------+--------------------+---------------------+ | ms_group_0 | NULL | ds_primary | ds_slave_0, ds_slave_1 | random | | +------------+-----------------------------+------------------------+------------------------+--------------------+---------------------+ 1 row in set (0.</description>
    </item>
    
    <item>
      <title>Rewrite Engine</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/rewrite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/rewrite/</guid>
      <description>The SQL written by engineers facing logic databases and tables cannot be executed directly in actual databases. SQL rewrite is used to rewrite logic SQL into rightly executable ones in actual databases, including two parts, correctness rewrite and optimization rewrite.
Correctness Rewrite In situation with sharding tables, it requires to rewrite logic table names in sharding settings into actual table names acquired after routing. Database sharding does not require to rewrite table names.</description>
    </item>
    
    <item>
      <title>Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/sharding/</guid>
      <description>Sharding Key Column used to determine database (table) sharding. For example, in last number modulo of order ID sharding, order ID is taken as the sharding key. The full route executed when there is no sharding column in SQL has a poor performance. Besides single sharding column, Apache ShardingSphere also supports multiple sharding columns.
Sharding Algorithm Data sharding can be achieved by sharding algorithms through =, &amp;gt;=, &amp;lt;=, &amp;gt;, &amp;lt;, BETWEEN and IN.</description>
    </item>
    
    <item>
      <title>ShardingSphere-Scaling (Experimental)</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-scaling-quick-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/quick-start/shardingsphere-scaling-quick-start/</guid>
      <description>1. Rule Configuration Edit %SHARDINGSPHERE_PROXY_HOME%/conf/server.yaml. Please refer to Build Manual for more details.
 %SHARDINGSPHERE_PROXY_HOME% is the shardingsphere proxy extract path. for example: /Users/ss/shardingsphere-proxy-bin/
 2. Import Dependencies If the backend database is PostgreSQL, there&amp;rsquo;s no need for additional dependencies.
If the backend database is MySQL, please download mysql-connector-java-5.1.47.jar and put it into %SHARDINGSPHERE_PROXY_HOME%/lib directory.
3. Start Server sh %SHARDINGSPHERE_PROXY_HOME%/bin/start.sh 4. Create Migration Job Use DistSQL interface to manage the migration jobs.</description>
    </item>
    
    <item>
      <title>Spring namespace configuration change history</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/spring-namespace-configuration/</guid>
      <description>ShardingSphere-5.0.0-beta Sharding Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding-5.0.0.xsd
&amp;lt;sharding:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   table-rules (?) Tag Sharding table rule configuration   auto-table-rules (?) Tag Automatic sharding table rule configuration   binding-table-rules (?) Tag Binding table rule configuration   broadcast-table-rules (?) Tag Broadcast table rule configuration   default-database-strategy-ref (?) Attribute Default database strategy name   default-table-strategy-ref (?</description>
    </item>
    
    <item>
      <title>SQLServer</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/sqlserver/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/sqlserver/</guid>
      <description>The unsupported SQL list for SQLServer are as follows:
TODO</description>
    </item>
    
    <item>
      <title>Unsupported Items</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/unsupported-items/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/unsupported-items/</guid>
      <description>DataSource Interface  Do not support timeout related operations  Connection Interface  Do not support operations of stored procedure, function and cursor Do not support native SQL Do not support savepoint related operations Do not support Schema/Catalog operation Do not support self-defined type mapping  Statement and PreparedStatement Interface  Do not support statements that return multiple result sets (stored procedures, multiple pieces of non-SELECT data) Do not support the operation of international characters  ResultSet Interface  Do not support getting result set pointer position Do not support changing result pointer position through none-next method Do not support revising the content of result set Do not support acquiring international characters Do not support getting Array  JDBC 4.</description>
    </item>
    
    <item>
      <title>Use Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/spring-boot-starter/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using ZooKeeper --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-zookeeper-curator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using Etcd --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-etcd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule spring.shardingsphere.mode.type=Clusterspring.shardingsphere.mode.repository.type=ZooKeeperspring.shardingsphere.mode.repository.props.namespace=governance-spring-boot-shardingsphere-testspring.shardingsphere.mode.repository.props.server-lists=localhost:2181spring.shardingsphere.mode.overwrite=trueUse ShardingSphereDataSource in Spring ShardingSphereDataSource can be used directly by injection; or configure ShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.
@Resource private DataSource dataSource; </description>
    </item>
    
    <item>
      <title>Use Spring Boot Starter</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/spring-boot-starter/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Note: The example database connection pool is HikariCP, which can be replaced with other mainstream database connection pools according to business scenarios.
# Configure actual data sourcesspring.shardingsphere.datasource.names=ds0,ds1# Configure the first data sourcespring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSourcespring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driverspring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/ds0spring.shardingsphere.datasource.ds0.username=rootspring.shardingsphere.datasource.ds0.password=# Configure the second data sourcespring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSourcespring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driverspring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3306/ds1spring.shardingsphere.datasource.ds1.username=rootspring.shardingsphere.datasource.ds1.password=# Configure t_order table rulespring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes=ds$-&amp;gt;{0..1}.t_order$-&amp;gt;{0..1}# Configure database sharding strategyspring.</description>
    </item>
    
    <item>
      <title>Use Spring Namespace</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/spring-namespace/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using XA transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using BASE transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-base-seata-at&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Transaction Manager &amp;lt;!-- ShardingDataSource configuration --&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;bean id=&amp;#34;transactionManager&amp;#34; class=&amp;#34;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;shardingDataSource&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;jdbcTemplate&amp;#34; class=&amp;#34;org.springframework.jdbc.core.JdbcTemplate&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;dataSource&amp;#34; ref=&amp;#34;shardingDataSource&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;tx:annotation-driven /&amp;gt; &amp;lt;!-- Enable auto scan @ShardingSphereTransactionType annotation to inject the transaction type before connection created --&amp;gt; &amp;lt;sharding:tx-type-annotation-driven /&amp;gt; Use Distributed Transaction @Transactional @ShardingSphereTransactionType(TransactionType.</description>
    </item>
    
    <item>
      <title>Atomikos Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/atomikos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/atomikos/</guid>
      <description>The default XA transaction manager of Apache ShardingSphere is Atomikos.
Data Recovery xa_tx.log generated in the project logs folder is necessary for the recovery when XA crashes. Please keep it.
Update Configuration Developer can add jta.properties in classpath of the application to customize Atomikos configuration. For detailed configuration rules.
Please refer to Atomikos official documentation for more details.</description>
    </item>
    
    <item>
      <title>Data Sharding</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sharding/</guid>
      <description>ShardingAlgorithm    SPI Name Description     ShardingAlgorithm Sharding algorithm       Implementation Class Description     BoundaryBasedRangeShardingAlgorithm Boundary based range sharding algorithm   VolumeBasedRangeShardingAlgorithm Volume based range sharding algorithm   ComplexInlineShardingAlgorithm Complex inline sharding algorithm   AutoIntervalShardingAlgorithm Mutable interval sharding algorithm   ClassBasedShardingAlgorithm Class based sharding algorithm   HintInlineShardingAlgorithm Hint inline sharding algorithm   IntervalShardingAlgorithm Fixed interval sharding algorithm   HashModShardingAlgorithm Hash modulo sharding algorithm   InlineShardingAlgorithm Inline sharding algorithm   ModShardingAlgorithm Modulo sharding algorithm    KeyGenerateAlgorithm    SPI Name Description     KeyGenerateAlgorithm Key generate algorithm       Implementation Class Description     SnowflakeKeyGenerateAlgorithm Snowflake key generate algorithm   UUIDKeyGenerateAlgorithm UUID key generate algorithm    DatetimeService    SPI Name Description     DatetimeService Use current time for routing       Implementation Class Description     DatabaseDatetimeServiceDelegate Get the current time from the database for routing   SystemDatetimeService Get the current time from the application system for routing    DatabaseSQLEntry    SPI Name Description     DatabaseSQLEntry Database dialect for get current time       Implementation Class Description     MySQLDatabaseSQLEntry MySQL dialect for get current time   PostgreSQLDatabaseSQLEntry PostgreSQL dialect for get current time   OracleDatabaseSQLEntry Oracle dialect for get current time   SQLServerDatabaseSQLEntry SQLServer dialect for get current time    </description>
    </item>
    
    <item>
      <title>Encrypt</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-encrypt-rule/</guid>
      <description>Definition CREATE ENCRYPT RULE encryptRuleDefinition [, encryptRuleDefinition] ... ALTER ENCRYPT RULE encryptRuleDefinition [, encryptRuleDefinition] ... DROP ENCRYPT RULE tableName [, tableName] ... encryptRuleDefinition: tableName(COLUMNS(columnDefinition [, columnDefinition] ...), QUERY_WITH_CIPHER_COLUMN=queryWithCipherColumn) columnDefinition: (NAME=columnName [, PLAIN=plainColumnName] , CIPHER=cipherColumnName, encryptAlgorithm) encryptAlgorithm: TYPE(NAME=encryptAlgorithmType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  PLAIN specifies the plain column, CIPHER specifies the cipher column encryptAlgorithmType specifies the encryption algorithm type, please refer to Encryption Algorithm Duplicate tableName will not be created queryWithCipherColumn support uppercase or lowercase true or false  Example CREATE ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=&amp;#39;123456abc&amp;#39;))), (NAME=order_id, CIPHER =order_cipher,TYPE(NAME=MD5)) ), QUERY_WITH_CIPHER_COLUMN=true), t_encrypt_2 ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=&amp;#39;123456abc&amp;#39;))), (NAME=order_id, CIPHER=order_cipher,TYPE(NAME=MD5)) ), QUERY_WITH_CIPHER_COLUMN=FALSE); ALTER ENCRYPT RULE t_encrypt ( COLUMNS( (NAME=user_id,PLAIN=user_plain,CIPHER=user_cipher,TYPE(NAME=AES,PROPERTIES(&amp;#39;aes-key-value&amp;#39;=&amp;#39;123456abc&amp;#39;))), (NAME=order_id,CIPHER=order_cipher,TYPE(NAME=MD5)) ), QUERY_WITH_CIPHER_COLUMN=TRUE); DROP ENCRYPT RULE t_encrypt,t_encrypt_2; </description>
    </item>
    
    <item>
      <title>Encrypt</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-encrypt-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-encrypt-rule/</guid>
      <description>Definition SHOW ENCRYPT RULES [FROM schemaName] SHOW ENCRYPT TABLE RULE tableName [from schemaName]  Support to query all data encryption rules and specify logical table name query  Description    Column Description     table Logical table name   logic_column Logical column name   cipher_column Ciphertext column name   plain_column Plaintext column name   encryptor_type Encryption algorithm type   encryptor_props Encryption algorithm parameter    Example Show Encrypt Rules</description>
    </item>
    
    <item>
      <title>Encryption Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/encrypt/</guid>
      <description>MD5 Encrypt Algorithm Type: MD5
Attributes: None
AES Encrypt Algorithm Type: AES
Attributes:
   Name DataType Description     aes-key-value String AES KEY    RC4 Encrypt Algorithm Type: RC4
Attributes:
   Name DataType Description     rc4-key-value String RC4 KEY    </description>
    </item>
    
    <item>
      <title>Execute Engine</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/execute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/execute/</guid>
      <description>ShardingSphere adopts a set of automatic execution engine, responsible for sending the true SQL, which has been routed and rewritten, to execute in the underlying data source safely and effectively. It does not simply send the SQL through JDBC to directly execute in the underlying data source, or put execution requests directly to the thread pool to concurrently execute, but focuses more on the creation of a balanced data source connection, the consumption generated by the memory usage, the maximum utilization of the concurrency and other problems.</description>
    </item>
    
    <item>
      <title>Inline Expression</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/inline-expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/inline-expression/</guid>
      <description>Motivation Configuration simplicity and unity are two main problems that inline expression intends to solve.
In complex sharding rules, with more data nodes, a large number of configuration repetitions make configurations difficult to maintain. Inline expressions can simplify data node configuration work.
Java codes are not helpful in the unified management of common configurations. Writing sharding algorithms with inline expressions, users can store rules together, making them easier to be browsed and stored.</description>
    </item>
    
    <item>
      <title>Oracle</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/oracle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/oracle/</guid>
      <description>The unsupported SQL list for Oracle are as follows:
TODO</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/shadow/</guid>
      <description>Root Configuration Class name: org.apache.shardingsphere.shadow.api.config.ShadowRuleConfiguration
Attributes:
   Name DataType Description Default Value     enable boolean Shadow DB switch. Optional values: true/false false   dataSources Map&amp;lt;String, ShadowDataSourceConfiguration&amp;gt; Shadow data source mapping name and configuration None   tables Map&amp;lt;String, ShadowTableConfiguration&amp;gt; Shadow table name and configuration None   defaultShadowAlgorithmName String default shadow algorithm name Option item   shadowAlgorithms Map&amp;lt;String, ShardingSphereAlgorithmConfiguration&amp;gt; Shadow algorithm name and configuration None    Shadow Data Source Configuration Class name: org.</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/shadow/</guid>
      <description>Configuration Item Explanation spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usagespring.shardingsphere.rules.shadow.enable= # Shadow DB switch. Optional values: true/false, the default is falsespring.shardingsphere.rules.shadow.data-sources.shadow-data-source.source-data-source-name= # Production data source namespring.shardingsphere.rules.shadow.data-sources.shadow-data-source.shadow-data-source-name= # Shadow data source namespring.shardingsphere.rules.shadow.tables.&amp;lt;table-name&amp;gt;.data-source-names= # Shadow table location shadow data source names (multiple values are separated by &amp;quot;,&amp;quot;)spring.shardingsphere.rules.shadow.tables.&amp;lt;table-name&amp;gt;.shadow-algorithm-names= # Shadow table location shadow algorithm names (multiple values are separated by &amp;quot;,&amp;quot;)spring.shardingsphere.rules.shadow.defaultShadowAlgorithmName= # Default shadow algorithm name，optional item.</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/shadow/</guid>
      <description>Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/shadow/shadow-5.0.0.xsd
&amp;lt;shadow:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   enable Attribute Shadow DB switch. Optional values: true/false, the default is false   data-source(?) Tag Shadow data source configuration   default-shadow-algorithm-name(?) Tag Default shadow algorithm configuration   shadow-table(?) Tag Shadow table configuration    &amp;lt;shadow:data-source /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   source-data-source-name Attribute Production data source name   shadow-data-source-name Attribute Shadow data source name    &amp;lt;shadow:default-shadow-algorithm-name /&amp;gt; | Name | Type | Description | | &amp;mdash;&amp;ndash; | &amp;mdash;&amp;mdash; | &amp;mdash;&amp;mdash; | | name | Attribute | Default shadow algorithm name |</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/shadow/</guid>
      <description>Configuration Item Explanation dataSources: # Omit the data source configuration, please refer to the usage rules: - !SHADOW enable: # Shadow function switch. Optional values: true/false, the default is false dataSources: shadowDataSource: sourceDataSourceName: # Production data source name shadowDataSourceName: # Shadow data source name tables: &amp;lt;table-name&amp;gt;: dataSourceNames: # Shadow table location shadow data source names - &amp;lt;shadow-data-source&amp;gt; shadowAlgorithmNames: # Shadow table location shadow algorithm names - &amp;lt;shadow-algorithm-name&amp;gt; defaultShadowAlgorithmName: # Default shadow algorithm name shadowAlgorithms: &amp;lt;shadow-algorithm-name&amp;gt; (+): # Shadow algorithm name type: # Shadow algorithm type props: # Shadow algorithm property configuration # .</description>
    </item>
    
    <item>
      <title>Spring Boot Starter Configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/api-change-history/shardingsphere-jdbc/spring-boot-starter/</guid>
      <description>5.0.0-beta Sharding Configuration Item Explanation spring.shardingsphere.datasource.names= # Omit the data source configuration, please refer to the usage# Standard sharding table configurationspring.shardingsphere.rules.sharding.tables.&amp;lt;table-name&amp;gt;.actual-data-nodes= # Describe data source names and actual tables, delimiter as point, multiple data nodes separated with comma, support inline expression. Absent means sharding databases only.# Databases sharding strategy, use default databases sharding strategy if absent. sharding strategy below can choose only one.# For single sharding column scenariospring.</description>
    </item>
    
    <item>
      <title>Use Spring Namespace</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/governance/spring-namespace/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using ZooKeeper --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-zookeeper-curator&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- import if using Etcd --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-cluster-mode-repository-etcd&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:cluster=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster&amp;#34; xmlns:shardingsphere=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/datasource&amp;#34; xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/cluster/repository.xsd http://shardingsphere.apache.org/schema/shardingsphere/datasource http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd&amp;#34;&amp;gt; &amp;lt;cluster:repository id=&amp;#34;clusterRepository&amp;#34; type=&amp;#34;ZooKeeper&amp;#34; namespace=&amp;#34;regCenter&amp;#34; server-lists=&amp;#34;localhost:2181&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;max-retries&amp;#34;&amp;gt;3&amp;lt;/prop&amp;gt; &amp;lt;prop key=&amp;#34;operation-timeout-milliseconds&amp;#34;&amp;gt;3000&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/cluster:repository&amp;gt; &amp;lt;shardingsphere:data-source id=&amp;#34;shardingDatabasesTablesDataSource&amp;#34; data-source-names=&amp;#34;demo_ds_0, demo_ds_1&amp;#34; rule-refs=&amp;#34;shardingRule&amp;#34;&amp;gt; &amp;lt;shardingsphere:mode type=&amp;#34;Cluster&amp;#34; repository-ref=&amp;#34;clusterRepository&amp;#34; overwrite=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/shardingsphere:data-source&amp;gt; &amp;lt;shardingsphere:data-source id=&amp;#34;replicaQueryDataSource&amp;#34; data-source-names=&amp;#34;demo_primary_ds, demo_replica_ds_0, demo_replica_ds_1&amp;#34; rule-refs=&amp;#34;replicaQueryRule&amp;#34;&amp;gt; &amp;lt;shardingsphere:mode type=&amp;#34;Cluster&amp;#34; repository-ref=&amp;#34;clusterRepository&amp;#34; overwrite=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/shardingsphere:data-source&amp;gt; &amp;lt;shardingsphere:data-source id=&amp;#34;encryptDataSource&amp;#34; data-source-names=&amp;#34;demo_ds&amp;#34; rule-refs=&amp;#34;encryptRule&amp;#34;&amp;gt; &amp;lt;shardingsphere:mode type=&amp;#34;Cluster&amp;#34; repository-ref=&amp;#34;clusterRepository&amp;#34; overwrite=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/shardingsphere:data-source&amp;gt; &amp;lt;/beans&amp;gt; Use ShardingSphereDataSource in Spring ShardingSphereDataSource can be used directly by injection; or configure ShardingSphereDataSource in ORM frameworks such as JPA or MyBatis.</description>
    </item>
    
    <item>
      <title>Use Spring Namespace</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/spring-namespace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/spring-namespace/</guid>
      <description>Import Maven Dependency &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core-spring-namespace&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Configure Rule Note: The example database connection pool is HikariCP, which can be replaced with other mainstream database connection pools according to business scenarios.
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:sharding=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/sharding&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/shardingsphere/sharding http://shardingsphere.apache.org/schema/shardingsphere/sharding/sharding.xsd &amp;#34;&amp;gt; &amp;lt;!-- Configure actual data sources --&amp;gt; &amp;lt;!-- Configure the first data source --&amp;gt; &amp;lt;bean id=&amp;#34;ds0&amp;#34; class=&amp;#34;com.zaxxer.hikari.HikariDataSource&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/ds0&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>YAML Syntax</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/yaml-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/configuration/yaml-syntax/</guid>
      <description>!! means instantiation of that class
! means self-defined alias
- means one or multiple can be included
[] means array, can substitutable with - each other</description>
    </item>
    
    <item>
      <title>Bitronix Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/bitronix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/bitronix/</guid>
      <description>Import Maven Dependency &amp;lt;properties&amp;gt; &amp;lt;btm.version&amp;gt;2.1.3&amp;lt;/btm.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-bitronix&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.btm&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;btm&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${btm.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Customize Configuration Items Please refer to Bitronix official documentation for more details.
Configure XA Transaction Manager Type Yaml:
- !TRANSACTION defaultType: XA providerType: Bitronix SpringBoot:
spring: shardingsphere: props: xa-transaction-manager-type: Bitronix Spring Namespace:
&amp;lt;shardingsphere:data-source id=&amp;#34;xxx&amp;#34; data-source-names=&amp;#34;xxx&amp;#34; rule-refs=&amp;#34;xxx&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;xa-transaction-manager-type&amp;#34;&amp;gt;Bitronix&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/shardingsphere:data-source&amp;gt; </description>
    </item>
    
    <item>
      <title>DB Discovery</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-db-discovery-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-db-discovery-rule/</guid>
      <description>Definition CREATE DB_DISCOVERY RULE databaseDiscoveryRuleDefinition [, databaseDiscoveryRuleDefinition] ... ALTER DB_DISCOVERY RULE databaseDiscoveryRuleDefinition [, databaseDiscoveryRuleDefinition] ... DROP DB_DISCOVERY RULE ruleName [, ruleName] ... databaseDiscoveryRuleDefinition: ruleName(resources, discoveryTypeDefinition) resources: RESOURCES(resourceName [, resourceName] ...) discoveryTypeDefinition: TYPE(NAME=discoveryType [, PROPERTIES([algorithmProperties] )] ) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  discoveryType specifies the database discovery service type, ShardingSphere has built-in support for MGR Duplicate ruleName will not be created  Example CREATE DB_DISCOVERY RULE ha_group_0 ( RESOURCES(resource_0,resource_1), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39;,keepAliveCron=&amp;#39;&amp;#39;)) ); ALTER DB_DISCOVERY RULE ha_group_0 ( RESOURCES(resource_0,resource_1,resource_2), TYPE(NAME=mgr,PROPERTIES(groupName=&amp;#39;92504d5b-6dec&amp;#39; ,keepAliveCron=&amp;#39;&amp;#39;)) ); DROP DB_DISCOVERY RULE ha_group_0; </description>
    </item>
    
    <item>
      <title>DB Discovery</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-db-discovery-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-db-discovery-rule/</guid>
      <description>Definition SHOW DB_DISCOVERY RULES [FROM schemaName] Description    Column Description     name Rule name   data_source_names Data source name list   primary_data_source_name Primary data source name   discover_type Database discovery service type   discover_props Database discovery service parameters    Example mysql&amp;gt; show db_discovery rules from database_discovery_db; +-------+---------------------+--------------------------+---------------+------------------------------------------------------------------------------------------------------------+ | name | data_source_names | primary_data_source_name | discover_type | discover_props | +-------+---------------------+--------------------------+---------------+------------------------------------------------------------------------------------------------------------+ | pr_ds | ds_0, ds_1, ds_2 | ds_0 | MGR | keepAliveCron=0/50 * * * * ?</description>
    </item>
    
    <item>
      <title>DB Discovery</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/db-discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/db-discovery/</guid>
      <description>Usage Pre-work  Start the MySQL service Create MySQL database (refer to ShardingProxy data source configuration rules) Create a role or user with creation permission for ShardingProxy Start Zookeeper service (for persistent configuration)  Start ShardingProxy  Add mode and authentication configurations to server.yaml (please refer to the example of ShardingProxy) Start ShardingProxy (Related introduction)  Create a distributed database and sharding tables  Connect to ShardingProxy Create a distributed database  CREATE DATABASE discovery_db; Use newly created database  USE discovery_db; Configure data source information  ADD RESOURCE ds_0 ( HOST=127.</description>
    </item>
    
    <item>
      <title>Distributed Primary Key</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/key-generator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/key-generator/</guid>
      <description>Motivation In the development of traditional database software, the automatic sequence generation technology is a basic requirement. All kinds of databases have provided corresponding support for this requirement, such as MySQL auto-increment key, Oracle auto-increment sequence and so on. It is a tricky problem that there is only one sequence generated by different data nodes after sharding. Auto-increment keys in different physical tables in the same logic table can not perceive each other and thereby generate repeated sequences.</description>
    </item>
    
    <item>
      <title>Hint</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/hint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/sharding/hint/</guid>
      <description>Introduction Apache ShardingSphere uses ThreadLocal to manage sharding key value or hint route. Users can add sharding values to HintManager, and those values only take effect within the current thread.
Usage of hint:
 Sharding columns are not in SQL and table definition, but in external business logic. Some operations forced to do in the primary database.  Usage Sharding with Hint Hint Configuration Hint algorithms require users to implement the interface of org.</description>
    </item>
    
    <item>
      <title>Merger Engine</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/merge/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/reference/sharding/merge/</guid>
      <description>Result merger refers to merging multi-data result set acquired from all the data nodes as one result set and returning it to the request end rightly.
In function, the result merger supported by ShardingSphere can be divided into five kinds, iteration, order-by, group-by, pagination and aggregation, which are in composition relation rather than clash relation. In structure, it can be divided into stream merger, memory merger and decorator merger, among which, stream merger and memory merger clash with each other; decorator merger can be further processed based on stream merger and memory merger.</description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/mode/</guid>
      <description>Configuration Item Explanation Memory mode Configuration Entrance
Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
Attributes:
   Name Data Type Description     type (?) String Memory    Standalone mode Configuration Entrance
Class name: org.apache.shardingsphere.infra.config.mode.ModeConfiguration
   Name Data Type Description     type String Standalone    repository PersistRepositoryConfiguration Configuration StandalonePersistRepositoryConfiguration   overwrite boolean Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations    StandalonePersistRepositoryConfiguration Configuration</description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mode/</guid>
      <description>Configuration Item Explanation Memory mode spring.shardingsphere.mode.type= # MemoryStandalone mode spring.shardingsphere.mode.type= # Standalonespring.shardingsphere.mode.repository.type= # Standalone Configuration persist type, such as: Filespring.shardingsphere.mode.repository.props.path= # Configuration persist pathspring.shardingsphere.mode.overwrite= # Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations.Cluster mode spring.shardingsphere.mode.type= # Clusterspring.shardingsphere.mode.repository.type= # Cluster persist type. Such as : Zookeeper，Etcdspring.shardingsphere.mode.repository.props.namespace= # Cluster instance namespacespring.shardingsphere.mode.repository.props.server-lists= # Zookeeper or Etcd server list.</description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mode/</guid>
      <description>Configuration Item Explanation Standalone mode &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:shardingsphere=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/datasource&amp;#34; xmlns:standalone=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://shardingsphere.apache.org/schema/shardingsphere/datasource http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone http://shardingsphere.apache.org/schema/shardingsphere/mode-repository/standalone/repository.xsd&amp;#34;&amp;gt; &amp;lt;standalone:repository id=&amp;#34;standaloneRepository&amp;#34; type=&amp;#34;File&amp;#34;&amp;gt; &amp;lt;props&amp;gt; &amp;lt;prop key=&amp;#34;path&amp;#34;&amp;gt;target&amp;lt;/prop&amp;gt; &amp;lt;/props&amp;gt; &amp;lt;/standalone:repository&amp;gt; &amp;lt;shardingsphere:data-source id=&amp;#34;shardingDatabasesTablesDataSource&amp;#34; data-source-names=&amp;#34;demo_ds_0, demo_ds_1&amp;#34; rule-refs=&amp;#34;shardingRule&amp;#34; schema-name=&amp;#34;sharding_db&amp;#34;&amp;gt; &amp;lt;shardingsphere:mode type=&amp;#34;Standalone&amp;#34; repository-ref=&amp;#34;standaloneRepository&amp;#34; overwrite=&amp;#34;true&amp;#34;/&amp;gt; &amp;lt;/shardingsphere:data-source&amp;gt; &amp;lt;/beans&amp;gt; &amp;lt;standalone:repository /&amp;gt;
   Name Type Description     id Attribute Standalone mode instance name   type Attribute Standalone Configuration persist type, such as: File   props (?</description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/mode/</guid>
      <description>Configuration Item Explanation Memory mode schema: name: # JDBC data source alias. Optional, if it is not configured, logic_db is used as the schemaName by default, this parameter can help the configuration shared between JDBC driver and Proxy mode: type: # Memory Standalone mode schema: name: # JDBC data source alias. Optional, if it is not configured, logic_db is used as the schemaName by default, this parameter can help the configuration shared between JDBC driver and Proxy mode: type: # Standalone repository: type: # Standalone Configuration persist type, such as: File props: path: # Configuration persist path overwrite: true # Local configurations overwrite file configurations or not; if they overwrite, each start takes reference of local configurations.</description>
    </item>
    
    <item>
      <title>Narayana Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/narayana/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/narayana/</guid>
      <description>Import Maven Dependency &amp;lt;properties&amp;gt; &amp;lt;narayana.version&amp;gt;5.9.1.Final&amp;lt;/narayana.version&amp;gt; &amp;lt;jboss-transaction-spi.version&amp;gt;7.6.0.Final&amp;lt;/jboss-transaction-spi.version&amp;gt; &amp;lt;jboss-logging.version&amp;gt;3.2.1.Final&amp;lt;/jboss-logging.version&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-jdbc-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- Import if using XA transaction --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.shardingsphere&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;shardingsphere-transaction-xa-narayana&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${shardingsphere.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.narayana.jta&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jta&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${narayana.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.narayana.jts&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;narayana-jts-integration&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${narayana.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jboss-transaction-spi&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jboss-transaction-spi.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.jboss.logging&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jboss-logging&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jboss-logging.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Customize Configuration Items Add jbossts-properties.xml in classpath of the application to customize Narayana configuration.
Please refer to Narayana official documentation for more details.</description>
    </item>
    
    <item>
      <title>Readwrite-splitting</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/readwrite-splitting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/readwrite-splitting/</guid>
      <description>ReplicaLoadBalanceAlgorithm    SPI Name Description     ReplicaLoadBalanceAlgorithm Load balance algorithm of replica databases       Implementation Class Description     RoundRobinReplicaLoadBalanceAlgorithm Round robin load balance algorithm of replica databases   RandomReplicaLoadBalanceAlgorithm Random load balance algorithm of replica databases    </description>
    </item>
    
    <item>
      <title>Shadow</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/shadow-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/usage/shadow-rule/</guid>
      <description>Usage Pre-work  Start the MySQL service Create MySQL database (refer to ShardingProxy data source configuration rules) Create a role or user with creation permission for ShardingProxy Start Zookeeper service (for persistent configuration)  Start ShardingProxy  Add mode and authentication configurations to server.yaml (please refer to the example of ShardingProxy) Start ShardingProxy (Related introduction)  Create a distributed database and sharding tables  Connect to ShardingProxy Create a distributed database  CREATE DATABASE shadow_db; Use newly created database  USE shadow_db; Configure data source information  ADD RESOURCE ds_0 ( HOST=127.</description>
    </item>
    
    <item>
      <title>Shadow Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/built-in-algorithm/shadow/</guid>
      <description>Column Shadow Algorithm Column Value Match Shadow Algorithm Type：COLUMN_VALUE_MATCH
Attributes:
   Name DataType Description     column String Shadow column   operation String SQL operation type（INSERT, UPDATE, DELETE, SELECT）   value String Shadow column matching value    Column Regex Match Shadow Algorithm Type: COLUMN_REGEX_MATCH
Attributes:
   Name DataType Description     column String Shadow column   operation String SQL operation type (insert, update, delete, select)   regex String Shadow column matching regular expression    Note Shadow Algorithm Simple SQL Note Shadow Algorithm Type: SIMPLE_NOTE</description>
    </item>
    
    <item>
      <title>SQL92</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/sql92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/db-compatibility/sql-parser/sql92/</guid>
      <description>The unsupported SQL list for SQL92 are as follows:
TODO</description>
    </item>
    
    <item>
      <title>Data Encryption</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/data-encryption/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/data-encryption/</guid>
      <description>EncryptAlgorithm    SPI Name Description     EncryptAlgorithm Data encrypt algorithm       Implementation Class Description     MD5EncryptAlgorithm MD5 data encrypt algorithm   AESEncryptAlgorithm AES data encrypt algorithm   RC4EncryptAlgorithm Rc4 data encrypt algorithm    QueryAssistedEncryptAlgorithm    SPI Name Description     QueryAssistedEncryptAlgorithm Data encrypt algorithm which include query assisted column       Implementation Class Description     None     </description>
    </item>
    
    <item>
      <title>Hint Sharding Route</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/hint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/features/sharding/concept/hint/</guid>
      <description>Motivation Apache ShardingSphere can be compatible with SQL in way of parsing SQL statements and extracting columns and values to shard. If SQL does not have sharding conditions, it is impossible to shard without full data node route.
In some applications, sharding conditions are not in SQL but in external business logic. So it requires to designate sharding result externally, which is referred to as Hint in ShardingSphere.
Mechanism Apache ShardingSphere uses ThreadLocal to manage sharding key values.</description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/java-api/mix/</guid>
      <description>Configuration Item Explanation /* Data source configuration */ HikariDataSource writeDataSource0 = new HikariDataSource(); writeDataSource0.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); writeDataSource0.setJdbcUrl(&amp;#34;jdbc:mysql://localhost:3306/db0?serverTimezone=UTC&amp;amp;useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;#34;); writeDataSource0.setUsername(&amp;#34;root&amp;#34;); writeDataSource0.setPassword(&amp;#34;&amp;#34;); HikariDataSource writeDataSource1 = new HikariDataSource(); // ...Omit specific configuration.  HikariDataSource read0OfwriteDataSource0 = new HikariDataSource(); // ...Omit specific configuration.  HikariDataSource read1OfwriteDataSource0 = new HikariDataSource(); // ...Omit specific configuration.  HikariDataSource read0OfwriteDataSource1 = new HikariDataSource(); // ...Omit specific configuration.  HikariDataSource read1OfwriteDataSource1 = new HikariDataSource(); // ...Omit specific configuration.  Map&amp;lt;String, DataSource&amp;gt; datasourceMaps = new HashMap&amp;lt;&amp;gt;(6); datasourceMaps.</description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-boot-starter/mix/</guid>
      <description>Configuration Item Explanation # data source configurationspring.shardingsphere.datasource.names= write-ds0,write-ds1,write-ds0-read0,write-ds1-read0spring.shardingsphere.datasource.write-ds0.url= # Database URL connectionspring.shardingsphere.datasource.write-ds0.type= # Database connection pool type namespring.shardingsphere.datasource.write-ds0.driver-class-name= # Database driver class namespring.shardingsphere.datasource.write-ds0.username= # Database usernamespring.shardingsphere.datasource.write-ds0.password= # Database passwordspring.shardingsphere.datasource.write-ds0.xxx= # Other properties of database connection poolspring.shardingsphere.datasource.write-ds1.url= # Database URL connection# ...Omit specific configuration.spring.shardingsphere.datasource.write-ds0-read0.url= # Database URL connection# ...Omit specific configuration.spring.shardingsphere.datasource.write-ds1-read0.url= # Database URL connection# ...Omit specific configuration.# Sharding rules configuration# Databases sharding strategyspring.</description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/mix/</guid>
      <description>Configuration Item Explanation &amp;lt;beans xmlns=&amp;#34;http://www.springframework.org/schema/beans&amp;#34; xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34; xmlns:context=&amp;#34;http://www.springframework.org/schema/context&amp;#34; xmlns:tx=&amp;#34;http://www.springframework.org/schema/tx&amp;#34; xmlns:shardingsphere=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/datasource&amp;#34; xmlns:readwrite-splitting=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting&amp;#34; xmlns:encrypt=&amp;#34;http://shardingsphere.apache.org/schema/shardingsphere/encrypt&amp;#34; xsi:schemaLocation=&amp;#34;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://shardingsphere.apache.org/schema/shardingsphere/datasource http://shardingsphere.apache.org/schema/shardingsphere/datasource/datasource.xsd http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting http://shardingsphere.apache.org/schema/shardingsphere/readwrite-splitting/readwrite-splitting.xsd http://shardingsphere.apache.org/schema/shardingsphere/encrypt http://shardingsphere.apache.org/schema/shardingsphere/encrypt/encrypt.xsd &amp;#34;&amp;gt; &amp;lt;bean id=&amp;#34;write_ds0&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; init-method=&amp;#34;init&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;driverClassName&amp;#34; value=&amp;#34;com.mysql.jdbc.Driver&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34; value=&amp;#34;jdbc:mysql://localhost:3306/write_ds?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;username&amp;#34; value=&amp;#34;root&amp;#34; /&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34; value=&amp;#34;&amp;#34; /&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;read_ds0_0&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; init-method=&amp;#34;init&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;!-- ...Omit specific configuration. --&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;read_ds0_1&amp;#34; class=&amp;#34;com.alibaba.druid.pool.DruidDataSource&amp;#34; init-method=&amp;#34;init&amp;#34; destroy-method=&amp;#34;close&amp;#34;&amp;gt; &amp;lt;!-- ...Omit specific configuration. --&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;write_ds1&amp;#34; class=&amp;#34;com.</description>
    </item>
    
    <item>
      <title>Mixed Rules</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/mix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/mix/</guid>
      <description>The overlay between rule items in a mixed configuration is associated by the data source name and the table name.
If the previous rule is aggregation-oriented, the next rule needs to use the aggregated logical data source name configured by the previous rule when configuring the data source. Similarly, if the previous rule is table aggregation-oriented, the next rule needs to use the aggregated logical table name configured by the previous rule when configuring the table.</description>
    </item>
    
    <item>
      <title>Properties Configuration</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/props/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/props/</guid>
      <description>Introduction Apache ShardingSphere provides the way of property configuration to configure system level configuration.
Configuration Item Explanation    Name Data Type Description Default Value     sql-show (?) boolean Whether show SQL or not in log. Print SQL details can help developers debug easier. The log details include: logic SQL, actual SQL and SQL parse result. Enable this property will log into log topic ShardingSphere-SQL, log level is INFO.</description>
    </item>
    
    <item>
      <title>Shadow</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-shadow-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rdl/rdl-shadow-rule/</guid>
      <description>Definition CREATE SHADOW RULE shadowRuleDefinition [, shadowRuleDefinition] ... ALTER SHADOW RULE shadowRuleDefinition [, shadowRuleDefinition] ... ALTER SHADOW ALGORITHM shadowAlgorithm [, shadowAlgorithm] ... DROP SHADOW RULE ruleName [, ruleName] ... DROP SHADOW ALGORITHM algorithmName [, algorithmName] ... shadowRuleDefinition: ruleName(resourceMapping, shadowTableRule [, shadowTableRule] ...) resourceMapping: SOURCE=resourceName, SHADOW=resourceName shadowTableRule: tableName(shadowAlgorithm [, shadowAlgorithm] ...) shadowAlgorithm: ([algorithmName, ] TYPE(NAME=shadowAlgorithmType, PROPERTIES([algorithmProperties] ...))) algorithmProperties: algorithmProperty [, algorithmProperty] ... algorithmProperty: key=value  Duplicate ruleName cannot be created resourceMapping specifies the mapping relationship between the source database and the shadow library.</description>
    </item>
    
    <item>
      <title>Shadow</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-shadow-rule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-shadow-rule/</guid>
      <description>Definition SHOW SHADOW shadowRule | RULES [FROM schemaName] SHOW SHADOW TABLE RULES [FROM schemaName] SHOW SHADOW ALGORITHMS [FROM schemaName] shadowRule: RULE ruleName  Support querying all shadow rules and specified table query Support querying all shadow table rules Support querying all shadow algorithms  Description Shadow Rule    Column Description     rule_name Rule name   source_name Source database   shadow_name Shadow database   shadow_table Shadow table    Shadow Table Rule    Column Description     shadow_table Shadow table   shadow_algorithm_name Shadow algorithm name    Shadow Algorithms    Column Description     shadow_algorithm_name Shadow algorithm name   type Shadow algorithm type   properties Shadow algorithm parameters    Example SHOW SHADOW RULES</description>
    </item>
    
    <item>
      <title>Change History</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/spring-namespace/change-history/</guid>
      <description>5.0.0-alpha Replica Query Configuration Item Explanation Namespace: http://shardingsphere.apache.org/schema/shardingsphere/replica-query/replica-query-5.0.0.xsd
&amp;lt;replica-query:rule /&amp;gt;
   Name Type Description     id Attribute Spring Bean Id   data-source-rule (+) Tag Replica query data source rule configuration    &amp;lt;replica-query:data-source-rule /&amp;gt;
   Name Type Description     id Attribute Primary-replica data source rule name   primary-data-source-name Attribute Primary data source name   replica-data-source-names Attribute Replica data source names, multiple data source names separated with comma   load-balance-algorithm-ref Attribute Load balance algorithm name    &amp;lt;replica-query:load-balance-algorithm /&amp;gt;</description>
    </item>
    
    <item>
      <title>Change History</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/change-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/configuration/yaml/change-history/</guid>
      <description>5.0.0-alpha Replica Query Configuration Item Explanation dataSource: # Omit the data source configuration, please refer to the usage rules: - !REPLICA_QUERY dataSources: &amp;lt;data-source-name&amp;gt; (+): # Logic data source name of replica query primaryDataSourceName: # Primary data source name replicaDataSourceNames: - &amp;lt;replica-data-source-name&amp;gt; (+) # Replica data source name loadBalancerName: # Load balance algorithm name # Load balance algorithm configuration loadBalancers: &amp;lt;load-balancer-name&amp;gt; (+): # Load balance algorithm name type: # Load balance algorithm type props: # Load balance algorithm properties # .</description>
    </item>
    
    <item>
      <title>Seata Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/seata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-jdbc/usage/transaction/seata/</guid>
      <description>Startup Seata Server Download seata server according to seata-work-shop.
Create Undo Log Table Create undo_log table in each physical database (sample for MySQL).
CREATE TABLE IF NOT EXISTS `undo_log` ( `id` BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;increment id&amp;#39;, `branch_id` BIGINT(20) NOT NULL COMMENT &amp;#39;branch transaction id&amp;#39;, `xid` VARCHAR(100) NOT NULL COMMENT &amp;#39;global transaction id&amp;#39;, `context` VARCHAR(128) NOT NULL COMMENT &amp;#39;undo_log context,such as serialization&amp;#39;, `rollback_info` LONGBLOB NOT NULL COMMENT &amp;#39;rollback info&amp;#39;, `log_status` INT(11) NOT NULL COMMENT &amp;#39;0:normal status,1:defense status&amp;#39;, `log_created` DATETIME NOT NULL COMMENT &amp;#39;create datetime&amp;#39;, `log_modified` DATETIME NOT NULL COMMENT &amp;#39;modify datetime&amp;#39;, PRIMARY KEY (`id`), UNIQUE KEY `ux_undo_log` (`xid`, `branch_id`) ) ENGINE = InnoDB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8 COMMENT =&amp;#39;AT transaction mode undo table&amp;#39;; Update Configuration Configure seata.</description>
    </item>
    
    <item>
      <title>Single Table</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-single-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/user-manual/shardingsphere-proxy/usage/distsql/syntax/rql/rql-single-table/</guid>
      <description>Definition SHOW SINGLE TABLE (tableRule | RULES) [FROM schemaName] tableRule: RULE tableName Description    Column Description     table_name Single table name   resource_name Data source name    Example mysql&amp;gt; show single table rules; +--------------+---------------+ | table_name | resource_name | +--------------+---------------+ | t_single_0 | ds_0 | | t_single_1 | ds_1 | +--------------+---------------+ 2 rows in set (0.02 sec) </description>
    </item>
    
    <item>
      <title>SQL Checker</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sql-check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/sql-check/</guid>
      <description>SQLChecker    SPI Name Description     SQLChecker SQL checker       Implementation Class Description     AuthorityChecker Authority checker    </description>
    </item>
    
    <item>
      <title>Distributed Transaction</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/transaction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/transaction/</guid>
      <description>ShardingSphereTransactionManager    SPI Name Description     ShardingSphereTransactionManager Distributed transaction manager       Implementation Class Description     XAShardingSphereTransactionManager XA distributed transaction manager   SeataATShardingSphereTransactionManager Seata distributed transaction manager    XATransactionManagerProvider    SPI Name Description     XATransactionManagerProvider XA distributed transaction manager       Implementation Class Description     AtomikosTransactionManagerProvider XA distributed transaction manager based on Atomikos   NarayanaXATransactionManagerProvider XA distributed transaction manager based on Narayana   BitronixXATransactionManagerProvider XA distributed transaction manager based on Bitronix    XADataSourceDefinition    SPI Name Description     XADataSourceDefinition Auto convert Non XA data source to XA data source       Implementation Class Description     MySQLXADataSourceDefinition Auto convert Non XA MySQL data source to XA MySQL data source   MariaDBXADataSourceDefinition Auto convert Non XA MariaDB data source to XA MariaDB data source   PostgreSQLXADataSourceDefinition Auto convert Non XA PostgreSQL data source to XA PostgreSQL data source   OracleXADataSourceDefinition Auto convert Non XA Oracle data source to XA Oracle data source   SQLServerXADataSourceDefinition Auto convert Non XA SQLServer data source to XA SQLServer data source   H2XADataSourceDefinition Auto convert Non XA H2 data source to XA H2 data source    DataSourcePropertyProvider    SPI Name Description     DataSourcePropertyProvider Used to get standard properties of data source pool       Implementation Class Description     HikariCPPropertyProvider Used to get standard properties of HikariCP    </description>
    </item>
    
    <item>
      <title>Mode</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/mode/</guid>
      <description>StandalonePersistRepository    SPI Name Description     StandalonePersistRepository Standalone mode Configuration persistence       Implementation Class Description     FileRepository File persistence    ClusterPersistRepository    SPI Name Description     ClusterPersistRepository Registry center repository       Implementation Class Description     CuratorZookeeperRepository ZooKeeper registry center repository   EtcdRepository Etcd registry center repository    GovernanceWatcher    SPI Name Description     GovernanceWatcher Governance watcher       Implementation Class Description     StorageNodeStateChangedWatcher Storage node changed watcher   ComputeNodeStateChangedWatcher Compute node changed watcher   PropertiesChangedWatcher Properties changed watcher   PrivilegeNodeChangedWatcher Privilege changed watcher   GlobalRuleChangedWatcher Global rule changed watcher   MetaDataChangedWatcher Meta data changed watcher    </description>
    </item>
    
    <item>
      <title>Scaling</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/scaling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/scaling/</guid>
      <description>ScalingEntry    SPI Name Description     ScalingEntry Entry of scaling       Implementation Class Description     MySQLScalingEntry MySQL entry of scaling   PostgreSQLScalingEntry PostgreSQL entry of scaling    ScalingClusterAutoSwitchAlgorithm    SPI Name Description     ScalingClusterAutoSwitchAlgorithm Scaling job completion check algorithm       Implementation Class Description     ScalingIdleClusterAutoSwitchAlgorithm Incremental task idle time based algorithm    ScalingDataConsistencyCheckAlgorithm    SPI Name Description     ScalingDataConsistencyCheckAlgorithm Data consistency check algorithm on source and target database cluster       Implementation Class Description     ScalingDefaultDataConsistencyCheckAlgorithm Default implementation with CRC32 of all records.</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/proxy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/proxy/</guid>
      <description>DatabaseProtocolFrontendEngine    SPI Name Description     DatabaseProtocolFrontendEngine Regulate parse and adapter protocol of database access for ShardingSphere-Proxy       Implementation Class Description     MySQLFrontendEngine Base on MySQL database protocol   PostgreSQLFrontendEngine Base on PostgreSQL database protocol   OpenGaussFrontendEngine Base on openGauss database protocol    JDBCDriverURLRecognizer    SPI Name Description     JDBCDriverURLRecognizer Use JDBC driver to execute SQL       Implementation Class Description     MySQLRecognizer Use MySQL JDBC driver to execute SQL   PostgreSQLRecognizer Use PostgreSQL JDBC driver to execute SQL   OracleRecognizer Use Oracle JDBC driver to execute SQL   SQLServerRecognizer Use SQLServer JDBC driver to execute SQL   H2Recognizer Use H2 JDBC driver to execute SQL   P6SpyDriverRecognizer Use P6Spy JDBC driver to execute SQL   OpenGaussRecognizer Use openGauss JDBC driver to execute SQL    AuthorityProvideAlgorithm    SPI Name Description     AuthorityProvideAlgorithm User authority loading logic       Implementation Class Type Description     NativeAuthorityProviderAlgorithm NATIVE Persist user authority defined in server.</description>
    </item>
    
    <item>
      <title>Shadow DB</title>
      <link>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.0.0/en/dev-manual/shadow/</guid>
      <description>ShadowAlgorithm    SPI Name Description     ShadowAlgorithm shadow routing algorithm       Implementation Class Description     ColumnValueMatchShadowAlgorithm Column value match shadow algorithm   ColumnRegexMatchShadowAlgorithm Column regex match shadow algorithm   SimpleSQLNoteShadowAlgorithm Simple SQL note shadow algorithm    </description>
    </item>
    
  </channel>
</rss>