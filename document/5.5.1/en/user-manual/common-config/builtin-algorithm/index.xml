<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Builtin Algorithm on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/</link>
    <description>Recent content in Builtin Algorithm on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Metadata Repository</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/metadata-repository/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/metadata-repository/</guid>
      <description>Background Apache ShardingSphere provides different metadata persistence methods for different running modes. Users can freely choose the most appropriate way to store metadata while configuring the running mode.
Parameters Database Repository The optional values of provider are H2, MySQL, EmbeddedDerby, DerbyNetworkServer and HSQLDB. Since third-party Vulnerability Reports often misreport H2 Database, avoiding the use of H2 Database in ShardingSphere Standalone Mode may be an option. Discuss the case where provider is not the default value H2.</description>
    </item>
    
    <item>
      <title>Sharding Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/sharding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/sharding/</guid>
      <description>Background ShardingSphere built-in algorithms provide a variety of sharding algorithms, which can be divided into automatic sharding algorithms, standard sharding algorithms, composite sharding algorithms, and hint sharding algorithms, and can meet the needs of most business scenarios of users.
Additionally, considering the complexity of business scenarios, the built-in algorithm also provides a way to customize the sharding algorithm. Users can complete complex sharding logic by writing java code.
It should be noted that the sharding logic of the automatic sharding algorithm is automatically managed by ShardingSphere and needs to be used by configuring the autoTables sharding rules.</description>
    </item>
    
    <item>
      <title>Key Generate Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/keygen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/keygen/</guid>
      <description>Background In traditional database software development, automatic primary key generation is a basic requirement and various databases provide support for this requirement, such as MySQL&amp;rsquo;s self-incrementing keys, Oracle&amp;rsquo;s self-incrementing sequences, etc.
After data sharding, it is a very tricky problem to generate global unique primary keys from different data nodes. Self-incrementing keys between different actual tables within the same logical table generate duplicate primary keys because they are not mutually perceived.</description>
    </item>
    
    <item>
      <title>Load Balance Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/load-balance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/load-balance/</guid>
      <description>Background ShardingSphere built-in provides a variety of load balancer algorithms, including polling algorithm, random access algorithm and weight access algorithm, which can meet users&#39; needs in most business scenarios.
Moreover, considering the complexity of the business scenario, the built-in algorithm also provides an extension mode. Users can implement the load balancer algorithm they need based on SPI interface.
Parameters Round-robin Load Balance Algorithm Type: ROUND_ROBIN
Random Load Balance Algorithm Type: RANDOM</description>
    </item>
    
    <item>
      <title>Encryption Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/encrypt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/encrypt/</guid>
      <description>Background Encryption algorithms are by the encryption features of Apache ShardingSphere. A variety of algorithms are built-in to make it easy for users to fully leverage the feature.
Parameters Standard Encrypt Algorithm AES Encrypt Algorithm Type: AES
Attributes:
   Name DataType Description     aes-key-value String AES KEY   digest-algorithm-name String AES KEY DIGEST ALGORITHM    Assisted Encrypt Algorithm MD5 Assisted Encrypt Algorithm Type: MD5</description>
    </item>
    
    <item>
      <title>Shadow Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/shadow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/shadow/</guid>
      <description>Background The shadow DB feature carries out shadow measurement to SQL statements executed. Shadow measurement supports two types of algorithms, and users can choose one or a combination of them based on actual business needs.
Parameters Column-based shadow algorithm Column value matching shadow algorithm Type：VALUE_MATCH
   Attribute Name Data Type Description     column String shadow column   operation String SQL operation type (INSERT, UPDATE, DELETE, SELECT)   value String value matched by shadow column    Column-based Regex matching algorithm Type：REGEX_MATCH</description>
    </item>
    
    <item>
      <title>SQL Translator</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/sql-translator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/sql-translator/</guid>
      <description>Native SQL translator Type: NATIVE
Attributes:
None
Default SQL translator, does not implement yet.</description>
    </item>
    
    <item>
      <title>Sharding Audit Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/audit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/audit/</guid>
      <description>Background The sharding audit is to audit the SQL statements in the sharding database. Sharding audit not only intercept illegal SQL statements, but also gather the SQL statistics.
Parameters DML_SHARDING_CONDITIONS algorithm Type: DML_SHARDING_CONDITIONS
Procedure  when configuring data sharding rules, create sharding audit configurations.  Sample  DML_SHARDING_CONDITIONS  auditors: sharding_key_required_auditor: type: DML_SHARDING_CONDITIONS </description>
    </item>
    
    <item>
      <title>Data Masking Algorithm</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/mask/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/mask/</guid>
      <description>Background Data masking algorithms are by the mask features of Apache ShardingSphere. A variety of algorithms are built-in to make it easy for users to fully leverage the feature.
Parameters Hash Data Masking Algorithm MD5 Data Masking Algorithm Type: MD5
Attributes:
   Name DataType Description     salt String Salt value (optional)    Mask Data Masking Algorithm Keep First N Last M Data Masking Algorithm Type: KEEP_FIRST_N_LAST_M</description>
    </item>
    
    <item>
      <title>Row Value Expressions</title>
      <link>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/expr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/5.5.1/en/user-manual/common-config/builtin-algorithm/expr/</guid>
      <description>Row Value Expressions that uses the Groovy syntax Type: GROOVY
Just use ${ expression } or $-&amp;gt;{ expression } in the configuration to identify the row expressions. The content of row expressions uses Groovy syntax, and all operations supported by Groovy are supported by row expressions. ${begin..end} denotes the range interval, ${[unit1, unit2, unit_x]} denotes the enumeration value. If there are multiple ${ expression } or $-&amp;gt;{ expression } expressions in a row expression, the final result of the whole expression will be a Cartesian combination based on the result of each sub-expression.</description>
    </item>
    
  </channel>
</rss>
